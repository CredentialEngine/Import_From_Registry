<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
	</configSections>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.2" />
	</startup>
	<appSettings>
		<add key="UnobtrusiveJavaScriptEnabled" value="true" />
		<add key="aspnet:MaxJsonDeserializerMembers" value="5000" />
		<add key="siteVersion" value="2023-09-02" />
		<add key="ClientSettingsProvider.ServiceUri" value="" />
		<add key="serverName" value="localhost" />
		<!-- Options:
				daily, 
				sinceLastRun, 
				hourly, 
				adhoc, 
				or integer - meaning minutes. Could use to schedule for 7:00 am and minutes since 8pm previous night
					will need to record or derive the last run 
			-->
		<add key="scheduleType" value="adhoc" />
		<!-- Currently the default is true. In the future there may be an option to save to a data store. -->
		<add key="doingDownloadOnly" value="true" />
		<add key="savingToDatabase" value="false" />
		<!-- ========================================================================-->

		<!-- NOTE: start/end dates will be converted to UTC before calling the registry searches.
	If the dates will be provided in UTC, be sure to set usingUTC_ForTime to false. -->
		<add key="startingDate" value="2017-12-01T00:00:00" />
		<!-- If doing an adhoc import and the endDate is to be less than the current date, then provide an end date.-->
		<add key="endingDate" value="2023-12-31T00:00:00" />
		<add key="usingUTC_ForTime" value="true" />
	
		<!-- list of all possible resource types to download. 
			- COPY the ones that you wish to use to resourceTypeList. 
			- The latter will be used by the application to determine which resource types to download. -->
		<add key="resourceTypeListAll" value="credential, assessment_profile,  learning_opportunity_profile, learning_program, course, organization, cost_manifest_schema, condition_manifest_schema, pathway, pathway_set, transfer_value_profile, qdata_dataset_profile, concept_scheme, collection, competency_framework" />

		<!-- Indicate which document types to import. Only those with a value of true will be imported.-->
		<!--<add key="resourceTypeList" value="credential, assessment_profile,  learning_opportunity_profile, learning_program, course, organization, cost_manifest_schema, condition_manifest_schema, pathway, transfer_value_profile, qdata_dataset_profile, collection, competency_framework" />-->
		<add key="resourceTypeList" value="organization, credential, learning_opportunity_profile,  course" />
		<!-- *** Actions: 0-normal; 1-DeleteOnly; 2-SkipDelete 
			Generally speaking resources should not be deleted from the credential registry. Instead credentials can be set to a status of Deprecated. Orgs, Lopps, Assmts, etc. can be set to: Ceased.
			If selecting to download deletes, the files will be labeled using the format: "Deleted_" + ctdlType + "_" + ctid. 
			A partner may want to remove these resources from their system
			For example: 
				"Deleted_Credential_" -->
		<add key="deleteAction" value="2" />


		<!-- *** set to 0 to import all based on import type or set to a number to limit the number of records to import per run. Useful for initial testing.  -->
		<add key="maxImportRecords" value="0" />
		<!-- ImportPageSize - maximum is 200 -->
		<add key="importPageSize" value="100" />
		<add key="maxExceptions" value="200" />


		<!-- ====== registry ============================================= -->
		<!-- The public community is ce-registry for all environments. If using a custom community, then specify as the default - so only it will be the target, or populate additionalCommunity so that both communities will be targetted as sources. -->
		<!--<add key="defaultCommunity" value="ce-registry"/>-->
		<add key="defaultCommunity" value="ce-registry" />
		<add key="additionalCommunity" value="" />
		<!-- Set this to true to save downloaded documents to the file system. The location is based upon the appKey: path.log.file-->
		<add key="savingDocumentToFileSystem" value="false" />

		<!-- Set this to true to save downloaded JSON documents to a database. Currently only Sql server is supported. 
			If setting this to true, you can decide to set savingDocumentToFileSystem to false - your choice 
			Requires restoring the CredentialDownload database-->
		<add key="writingToDownloadResourceDatabase" value="true" />
		
		<!-- if you always only want to download documents for your organization, provide the CTID here. Then you don't have to add it to the search calls. 			
			-->
		<add key="owningOrganizationCTID" value="" />
		<!-- if you want to download documents published by a third party publisher, provide the CTID here. 
			NOTE: where the publisher and the owner are the same, there is no need to provide both the owning and publishing org filters, just pick one.  -->
		<add key="publishingOrganizationCTID" value="" />



		<!-- sandbox  
		The sandbox should be used for initial testing! 
		Your organization API key can be found on your organization dashboard in the Accounts site. 
			(though not strictly need for the sandbox. Set to blank if doing quick sandbox tests).
		<add key="MyCredentialEngineAPIKey" value="PROVIDE YOUR ACCOUNTS API KEY" />
		<add key="environment" value="sandbox" />
		<add key="assistantCredentialRegistrySearch" value="https://sandbox.credentialengine.org/assistant/search/direct?" />

		<add key="credentialRegistryUrl"		value="https://sandbox.credentialengineregistry.org/" />
		<add key="cerGetEnvelope"				value="https://sandbox.credentialengineregistry.org/{0}/envelopes/{1}" />
		<add key="credentialRegistryResource"	value="https://sandbox.credentialengineregistry.org/{0}/resources/{1}" />
		<add key="AssistantCTDLJSONSearchAPIUrl" value="https://sandbox.credentialengine.org/assistant/search/ctdl" />
-->

		<!-- Production  -->
		<add key="environment" value="production" />
		<add key="MyCredentialEngineAPIKey" value="b13924b5-5583-4756-b176-77f707d06f57" />
		<add key="credentialRegistryUrl" value="https://credentialengineregistry.org/" />
		<add key="cerGetEnvelope" value="https://credentialengineregistry.org/{0}/envelopes/{1}" />
		<add key="assistantCredentialRegistrySearch" value="https://apps.credentialengine.org/assistant/search/direct?" />
		<add key="credentialRegistryResource" value="https://credentialengineregistry.org/{0}/resources/{1}" />
		<add key="AssistantCTDLJSONSearchAPIUrl" value="https://credentialengine.org/assistant/search/ctdl" />


		<!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->

		<!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
		<add key="logErrors" value="yes" />
		<add key="notifyOnException" value="no" />
		<!-- Set to the max level of tracing to display from DoTrace methods -->
		<add key="appTraceLevel"	value="5" />
		<!-- Path and filename for file to store error messages
		NOTE: be sure to create the @Logs and CERegistryDownload folders on the C drive or alter the following to use a different drive.-->
		<add key="path.error.log"	value="C:\@logs\CERegistryDownload\[date]_ErrorLog.txt" />
		<add key="path.email.log"	value="C:\@logs\CERegistryDownload\[date]_EmailLog.txt" />
		<!-- Path and filename for file to store trace messages.-->
		<add key="path.trace.log"	value="C:\@logs\CERegistryDownload\[date]_TraceLog.txt" />

		<!-- all downloaded documents are written to this folder. Be sure to create it.
			Existing files are overwritten. 
			To always create a new file, use the template with the [date] prefix. Then downloaded files will have a prefix of the current date (yyyy-mm-dd). -->
		<add key="path.log.file"	value="C:\@logs\CERegistryDownload\files\[filename].json" />
		<!--<add key="path.log.file"	value="C:\@logs\CERegistryDownload\files\[date]_[filename].json" />-->

	</appSettings>
	<connectionStrings>
		<!-- sandbox     -->
		<add name="MainConnection" connectionString="Server=(local);database=CredentialRegistryDownload;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

		<!-- production   
		<add name="MainConnection" connectionString="Server=(local);database=CredentialRegistryDownload;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
		  -->
	</connectionStrings>
	<system.web.extensions>
		<scripting>
			<webServices>
				<jsonSerialization maxJsonLength="2147483647" />
			</webServices>
		</scripting>
	</system.web.extensions>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
			<parameters>
				<parameter value="mssqllocaldb" />
			</parameters>
		</defaultConnectionFactory>
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<system.web>
		<membership defaultProvider="ClientAuthenticationMembershipProvider">
			<providers>
				<add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
			</providers>
		</membership>
		<roleManager defaultProvider="ClientRoleProvider" enabled="true">
			<providers>
				<add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
			</providers>
		</roleManager>
	</system.web>
</configuration>
