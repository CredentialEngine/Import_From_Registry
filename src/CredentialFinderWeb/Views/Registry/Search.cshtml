@using workIT.Utilities;
@*@using Credentialing_Transparency_Initiative.Data;
@using Credentialing_Transparency_Initiative.Models;
@using Credentialing_Transparency_Initiative.Models.SchemaV2;*@
@{
    var credentialRegistryUrl = UtilityManager.GetAppKeyValue("credentialRegistryUrl");
    ViewBag.Title = "CER Search Query Builder Tool";
    var keyword = Request.Params["keyword"] ?? "";
    var filterProperty = Request.Params["filterProperty"] ?? "";
    var filterValue = Request.Params["filterValue"] ?? "";
    //ctdlData = SchemaV2Services.GetAllInfoForSchemaAndRelease("ctdl");
}
@*@functions {
    public SchemaDataAggregation ctdlData { get; set; }
}*@
<script type="text/javascript">
	//Initialization
	var initialKeyword = "@keyword";
	var initialFilterProperty = "@filterProperty";
	var initialFilterValue = "@filterValue";

	var Search = {
		Timer: 0,
		Page: 1,
		PageSize: 20,
	};
	$(document).ready(function () {
		setupSearch();
		setupFilters();
		setupInitialValues();
		setupSampleQueries();
	});
	//

	//Setup search elements
	function setupSearch() {
		Search.Keywords = $("#txtKeywords");
		Search.Filters = $("#filters");
		Search.PageSize = $("#txtPageSize");
		Search.PageNumber = $("#txtPageNumber");
		Search.QueryRaw = $("#queryRaw");
		Search.QueryEncoded = $("#queryEncoded");
		Search.Status = $("#status");
		Search.Results = $("#results");
		Search.Previous = "";

		Search.Keywords.on("keyup change", function () {
			resetCountdown();
		});
		Search.PageSize.on("keyup change", function () {
			resetCountdown();
		});
		Search.PageNumber.on("keyup change", function () {
			resetCountdown();
		});
		$("[data-apply=txtFilters]").on("click", function () {
			doSearch(false);
		});

	}
	//

	//Setup filters
	function setupFilters() {
		$("[data-action=addFilter]").on("click", function () {
			addFilter();
		});
	}
	//

	//Setup initial values
	function setupInitialValues() {
		if ("@keyword".length > 0) {
			Search.Keywords.val("@keyword").trigger("change");
		}
		if ("@filterProperty".length > 0 || "@filterValue".length > 0) {
			var filter = addFilter();
			filter.find(".name").val("@filterProperty");
			filter.find(".value").val("@filterValue");

			if ("@filterProperty".length > 0 && "@filterValue".length > 0) {
				doSearch(false);
			}
		}
	}
	//

	//Setup sample queries
	function setupSampleQueries() {
		var list = $(".sampleQueryList");
		for (var i in sampleQueries) {
			(function (item, identifier) {
				var button = $("<button class=\"greenButton\">" + item.label + "</button>").appendTo(list);
				button.on("click", function () {
					doSampleQuery(identifier);
				});
			})(sampleQueries[i], i);
		}
	}
	//
</script>
<script type="text/javascript">
	//Utility Functions

	function addFilter() {
		var template = $("#template_filter").html();
		var newFilter = $(template).appendTo(Search.Filters);
		newFilter.find("[data-action=prettyPrint]").on("click", function () {
			var box = newFilter.find(".value");
			box.val(JSON.stringify(JSON.parse(box.val()), null, "\t"));
		});
		newFilter.find("[data-action=removeFilter]").on("click", function () {
			newFilter.remove();
			resetCountdown();
		});
		return newFilter;
	}
	//
</script>
<script type="text/javascript">
	//Search Functions

	function resetCountdown() {
		clearTimeout(Search.Timer);
		Search.Timer = setTimeout(function () {
			doSearch(false);
		}, 800);
	}
	//

	function doSearch(isPaging) {
		if (!isPaging) {
			Search.Page = 1;
		}

		var queryBasis = "@credentialRegistryUrl/ce-registry/search?";
		var queryRaw = [];
		var queryEncoded = [];

		//Keywords
		var keywords = Search.Keywords.val().trim();
		if (keywords != "") {
			queryRaw.push({ name: "fts", value: keywords });
			queryEncoded.push({ name: "fts", value: encodeURIComponent(keywords) });
		}

		//Filters
		var filtersRaw = Search.Filters.find(".filter");
		filtersRaw.each(function () {
			var filter = $(this);
			var name = filter.find(".name").val().trim();
			var value = filter.find(".value").val().trim();
			var error = filter.find(".error");
			if (name != "" && value != "") {
				try{
					var jsonValue = JSON.stringify(JSON.parse(value));
					queryRaw.push({ name: name, value: jsonValue });
					queryEncoded.push({ name: encodeURIComponent(name), value: encodeURIComponent(jsonValue) });
				}
				catch (e) {
					queryRaw.push({ name: name, value: value });
					queryEncoded.push({ name: encodeURIComponent(name), value: encodeURIComponent(value) });
				}
			}
		});

		//Paging
		var pageNumber = parseInt(Search.PageNumber.val());
		var pageSize = parseInt(Search.PageSize.val());
		queryRaw.push({ name: "page", value: pageNumber });
		queryEncoded.push({ name: "page", value: pageNumber });
		queryRaw.push({ name: "per_page", value: pageSize });
		queryEncoded.push({ name: "per_page", value: pageSize });

		//Querying
		var queryCombinedRaw = "start?";
		var queryCombinedEncoded = "start?";
		for (var i in queryRaw) {
			queryCombinedRaw = queryCombinedRaw + "&" + queryRaw[i].name + "=" + queryRaw[i].value;
		}
		for (var i in queryEncoded) {
			queryCombinedEncoded = queryCombinedEncoded + "&" + queryEncoded[i].name + "=" + queryEncoded[i].value;
		}
		queryCombinedRaw = queryCombinedRaw.replace("start?&", "").replace("start?", "");
		queryCombinedEncoded = queryCombinedEncoded.replace("start?&", "").replace("start?", "");
		var queryFinalRaw = queryBasis + queryCombinedRaw;
		var queryFinalEncoded = queryBasis + queryCombinedEncoded;

		if (Search.Previous == queryFinalRaw) {
			return;
		}
		Search.Previous = queryFinalRaw;
		Search.QueryRaw.html(queryFinalRaw);
		Search.QueryEncoded.html("<a href=\"" + queryFinalEncoded + "\" target=\"_blank\">" + queryFinalEncoded + "</a>");

		$.ajax({
			url: "@Url.Content( "~/Registry/ProxyQuery" )",
			async: true,
			headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
			dataType: "json",
			type: "POST",
			data: JSON.stringify({ query: queryCombinedEncoded }),
			success: function (msg) {
				console.log(msg);
				success_doSearch(msg);
			}
		});
	}
	//

	function success_doSearch(msg) {
		if (msg.valid) {
			var data = JSON.parse(msg.data);
			console.log(data);
			Search.Status.html("Found " + msg.extra.headers.Total + " Results");
			renderResults(data);
		}
	}
	//
</script>
<script type="text/javascript">
	//Rendering Functions

	function renderResults(data) {
		var box = Search.Results;
		var template = $("#template_searchResult").html();
		var envelopeProperties = ["envelope_community", "envelope_id", "envelope_type", "envelope_version", "resource_encoding", "resource_format"];

		box.html("");
		for (var i in data) {
			var item = data[i];
			var result = $(template
				.replace(/{ceterms:name}/g, item.decoded_resource["ceterms:name"])
				.replace(/{ceterms:description}/g, item.decoded_resource["ceterms:description"])
				.replace(/{@@id}/g, item.decoded_resource["@@id"].indexOf("http") == -1 ? "@credentialRegistryUrl/resources/" + item.decoded_resource["@@id"] : item.decoded_resource["@@id"])
				.replace(/{ceterms:ctid}/g, item.decoded_resource["ceterms:ctid"])
				).appendTo(box);
			var resourcePropertiesBox = result.find(".resourceProperties");
			var envelopePropertiesBox = result.find(".envelopeProperties");
			var rawDataBox = result.find(".rawData");
			for (var j in item.decoded_resource) {
				if (typeof (item.decoded_resource[j]) == "string") {
					if (j == "ceterms:name" || j == "ceterms:description" || j == "@@id") {
						continue;
					}
					resourcePropertiesBox.append("<div><b>" + j + ":</b> " + item.decoded_resource[j] + "</div>");
				}
				if (Array.isArray(item.decoded_resource[j]) && item.decoded_resource[j].length > 0 && typeof (item.decoded_resource[j][0]) == "string") {
					resourcePropertiesBox.append("<div><b>" + j + ":</b> " + item.decoded_resource[j].join(", ") + "</div>");
				}
			}
			for (var j in envelopeProperties) {
				envelopePropertiesBox.append("<div><b>" + envelopeProperties[j] + ":</b> " + item[envelopeProperties[j]] + "</div>");
			}
			rawDataBox.html(JSON.stringify(item.decoded_resource, null, "\t"));
		}
	}
</script>
@{
   // var allCredentialTypes = ctdlData.Details.Groups.Where(m => m.Uri == "expand:Credential").SelectMany(m => m.Members).ToList();
}
<script type="text/javascript">
	/* Sample Queries */
	var sampleQueries = {
		@*all_credentials: { keywords: "", filters: [@foreach( var cred in allCredentialTypes ) { @Html.Raw( "{ \"@type\": \"" + cred + "\" }" + ( cred == allCredentialTypes.Last() ? "" : ", " ) ) }] },*@
		all_credentialorganizations: {
			label: "All Credentialing Organizations",
			keywords: "",
			filters: [{ "@@type": "ceterms:CredentialOrganization" }]
		},
		all_qacredentialorganizations: {
			label: "All Quality Assurance Organizations",
			keywords: "",
			filters: [{ "@@type": "ceterms:QACredentialOrganization" }]
		},
		all_assessments: {
			label: "All Assessments",
			keywords: "",
			filters: [{ "@@type": "ceterms:AssessmentProfile" }]
		},
		all_learningopportunities: {
			label: "All Learning Opportunities",
			keywords: "",
			filters: [{ "@@type": "ceterms:LearningOpportunityProfile" }]
		},
		credential_certificates: {
			label: "All Certificates",
			keywords: "",
			filters: [{ "@@type": "ceterms:Certificate" }]
		},
		credential_bachelordegrees: {
			label: "All Bachelor Degrees",
			keywords: "",
			filters: [{ "@@type": "ceterms:BachelorDegree" }]
		},
		credential_certificates_math: {
			label: "All Certificates",
			keywords: "math",
			filters: [{ "@@type": "ceterms:Certificate" }]
		},
		audiencelevel_earlycollege: {
			label: "Degrees for early college-level students",
			keywords: "",
			filters: [{ "ceterms:audienceLevelType": [{ "ceterms:targetNode": { "@@id": "audLevel:SecondaryLevel" } }, { "ceterms:targetNode": { "@@id": "audLevel:AssociatesDegreeLevel" } }] }]
		},
		bachelordegrees_programming: {
			label: "Bachelor Degrees for Programming",
			keywords: "",
			filters: [{ "@@type": "ceterms:BachelorDegree" }, { "ceterms:occupationType": [{ "ceterms:targetNode": { "@@id": "http://www.onetonline.org/link/summary/15-1131.00" } }, { "ceterms:targetNode": { "@@id": "http://www.onetonline.org/link/summary/15-1132.00" } }] }]
		},
		lopp_competency_1: {
			label: "Learning Opportunities that use a specific framework",
			keywords: "",
			filters: [{ "@@type": "ceterms:LearningOpportunityProfile" }, { "ceterms:targetCompetency": [{ "ceterms:framework": { "@@id": "http://snl.depaul.edu/academics/undergraduate/undergraduate-majors/decision-analytics-ba/Pages/Learning-Outcomes.aspx" } }] }]
		},
		assessment_onlineonly: {
			label: "Assessments offered online",
			keywords: "",
			filters: [{ "@@type": "ceterms:AssessmentProfile" }, { "ceterms:deliveryType": [{ "ceterms:targetNode": { "@@id": "deliveryType:OnlineOnly" } }] }]
		},
		assessment_competency_1: {
			label: "Assessments for a specific competency",
			keywords: "",
			filters: [{ "@@type": "ceterms:AssessmentProfile" }, { "ceterms:targetCompetency": [{ "ceterms:targetNodeDescription": "Perform math operations using whole numbers, fractions, and percentages" }] }]
		},
		organization_educational: {
			label: "Two- and Four-Year Colleges",
			keywords: "",
			filters: [{ "@@type": "ceterms:CredentialOrganization" }, { "ceterms:agentType": [{ "ceterms:targetNode": { "@@id": "orgType:TwoYear" } }, { "ceterms:targetNode": { "@@id": "orgType:FourYear" } }] }]
		},
		organization_indiana: {
			label: "Organizations that operate in Indiana",
			keywords: "",
			filters: [{ "@@type": "ceterms:CredentialOrganization" }, { "ceterms:jurisdiction": [{ "ceterms:mainJurisdiction": [{ "ceterms:geoURI": { "@@id": "http://geonames.org/4921868/" } }] }] }]
		},
	};

	function doSampleQuery(queryName) {
		//Reset search
		Search.Keywords.val("");
		Search.PageSize.val(10);
		Search.PageNumber.val(1);
		$(".filter").remove();

		//Run query
		var query = sampleQueries[queryName];
		Search.Keywords.val(query.keywords);
		for (var i in query.filters) {
			var filterData = query.filters[i];
			var filterHTML = addFilter();
			for (var j in filterData) {
				filterHTML.find(".name").val(j);
				if (typeof (filterData[j]) == "string") {
					filterHTML.find(".value").val(filterData[j]); //Don't stringify strings
				}
				else {
					filterHTML.find(".value").val(JSON.stringify(filterData[j]));
				}
			}
		}
		doSearch(false);
	}
	//
</script>
<style type="text/css">
    #content {
        padding: 0 1vw;
    }

    h3 {
        padding: 5px;
        margin: 5px 0 0 0;
    }

    p {
        margin: 5px 0;
    }

    #searchHeader {
        display: -webkit-flex;
        display: flex;
        margin-bottom: 10px;
    }

        #searchHeader input[type=text], #searchHeader textarea {
            display: block;
            width: 100%;
        }

        #searchHeader textarea {
            resize: vertical;
            min-height: 3em;
            max-height: 12em;
        }

        #searchHeader .headerLeft {
            -webkit-flex: 1 1 100%;
            flex: 1 1 100%;
            padding-right: 10px;
        }

        #searchHeader .headerRight {
            -webkit-flex: 0 0 450px;
            flex: 0 0 450px;
        }

    .sampleQueryList button {
        display: block;
        width: 100%;
    }

    #paging {
        display: -webkit-flex;
        display: flex;
        -webkit-justify-content: center;
        justify-content: center;
    }

        #paging .formItem {
            display: -webkit-flex;
            display: flex;
            -webkit-align-items: baseline;
            align-items: baseline;
            margin: 0 25px;
        }

            #paging .formItem .label {
                padding: 0 5px;
                width: 100px;
                text-align: right;
            }

            #paging .formItem input[type=text] {
                width: 150px;
            }

    .queryBox {
        display: -webkit-flex;
        display: flex;
        -webkit-align-items: baseline;
        align-items: baseline;
        margin-bottom: 5px;
        min-height: 32px;
    }

    .queryTitle {
        -webkit-flex: 0 0 100px;
        flex: 0 0 100px;
        width: 100px;
    }

    .query {
        -webkit-flex: 1 1 100%;
        flex: 1 1 100%;
        word-break: break-word;
        background-color: #EEE;
        padding: 5px;
        font-family: Consolas, 'Courier New', monospace;
    }

    .buttons {
        text-align: right;
        padding: 5px 0;
    }

    .filter {
        display: -webkit-flex;
        display: flex;
        padding: 5px 0;
    }

        .filter .filterContent {
            -webkit-flex: 1 1 100%;
            flex: 1 1 100%;
        }

        .filter .buttons {
            -webkit-flex: 0 0 100px;
            flex: 0 0 100px;
            width: 100px;
            padding: 0 0 0 5px;
        }

            .filter .buttons button {
                width: 100%;
                margin-bottom: 5px;
            }

        .filter .error {
            color: #D33;
            font-weight: bold;
            padding: 5px;
        }

            .filter .error:empty {
                display: none;
            }

    #status {
        padding: 5px;
        font-style: italic;
        background-color: #F5F5F5;
        margin-bottom: 10px;
    }

    .result {
        display: -webkit-flex;
        display: flex;
        min-height: 400px;
        height: 600px;
        margin-bottom: 10px;
    }

        .result .resultHeader {
            background-color: #EEE;
            font-weight: bold;
            font-size: 18px;
            padding: 5px;
            margin-bottom: 5px;
        }

        .result .renderedData {
            width: 50%;
            overflow: auto;
        }

            .result .renderedData div b {
                width: 150px;
                text-align: right;
                padding-right: 5px;
                opacity: 0.8;
            }

        .result .rawData {
            width: 50%;
            min-height: 400px;
            max-height: 100%;
            background-color: #EEE;
            padding: 5px;
            font-family: Consolas, 'Courier New', monospace;
            font-size: 12px;
            overflow: auto;
            white-space: pre-wrap;
        }

        .result .resourceData, .result .envelopeData {
            margin-bottom: 10px;
        }
</style>
<h2>CER Search Query Builder Tool</h2>
<p>Use this tool to develop and test queries to be sent to the <a href="@Url.Content( "https://credreg.net/registry/handbook#search_api" )" target="_blank">Credential Engine Registry Search API</a>.</p>
<p>The <b>Keywords</b> field accepts any text string and performs a full text search on all properties within a record.</p>
<p>The <b>JSON Subdocuments</b> are used to pass JSON structures to the query. The structure of the JSON document (in terms of arrays and objects) must exactly match the structure of the desired record(s), but you only need to include the properties that are relevant to your query. Note that you must click the <b>Apply</b> button at the bottom of the list of JSON Subdocuments once you are done entering them in order to perform a query with them.</p>
<p>The <b>Sample Queries</b> provide some pre-formatted queries to demonstrate how to use this tool.</p>
<p>The <b>Query</b> section shows two representations of the query that has been constructed: The first is unencoded and meant to help you understand the data; the second is URL encoded and is what would actually be sent to the Registry server. Click on the URL encoded query to see the raw, real data your system will get back from the Registry for that query.</p>
<p>The <b>Results</b> section provides basic information about each result along with the JSON-LD payload data for each returned envelope.</p>
<div id="cerSearch">
    <div id="searchHeader">
        <div class="headerLeft">
            <h3>Keywords</h3>
            <input type="text" id="txtKeywords" placeholder="Full Text Search" />
            <h3>JSON Subdocuments</h3>
            <div id="filters"></div>
            <div class="buttons">
                <button class="greenButton" data-action="addFilter">Add Subdocument</button>
                <button class="applyButton greenButton" data-apply="txtFilters">Apply</button>
            </div>
            <div id="paging">
                <div class="formItem">
                    <div class="label">Page #</div>
                    <input type="text" id="txtPageNumber" placeholder="1" value="1" />
                </div>
                <div class="formItem">
                    <div class="label">Page Size</div>
                    <input type="text" id="txtPageSize" placeholder="1" value="10" />
                </div>
            </div>
        </div>
        <div class="headerRight">
            <h3>Sample Queries</h3>
            <div class="sampleQueryList"></div>
        </div>
    </div>
    <div id="queryBox">
        <h3>Query</h3>
        <div class="queryBox"><div class="queryTitle">Raw: </div><div class="query" id="queryRaw"></div></div>
        <div class="queryBox"><div class="queryTitle">Encoded: </div><div class="query" id="queryEncoded"></div></div>
    </div>
    <div id="resultsBox">
        <h3>Results</h3>
        <div id="status"></div>
        <div id="results"></div>
    </div>
</div>

<div id="templates" style="display:none">
    <script type="text/template" id="template_filter">
        <div class="filter">
            <div class="filterContent">
                <input type="text" class="name" placeholder="ceterms:subject" />
                <textarea class="value" placeholder='[ { "ceterms:targetNodeName": "exact value" } ]' />
                <div class="error"></div>
            </div>
            <div class="buttons">
                <button class="redButton" data-action="removeFilter">Remove</button>
                <button class="greenButton" data-action="prettyPrint">Format</button>
            </div>
        </div>
    </script>
    <script type="text/template" id="template_searchResult">
        <div class="result">
            <div class="renderedData">
                <div class="resourceData">
                    <div class="resultHeader">Resource Data</div>
                    <div><b>Name:</b> {ceterms:name}</div>
                    <div><b>Description:</b> {ceterms:description}</div>
                    <div><b>@@id:</b> <a href="{@@id}" target="_blank">{@@id}</a></div>
                    <div><b>View Details:</b> <a href="@Url.Content( "~/registry/tableviewer?ctid=" ){ceterms:ctid}" target="_blank">{ceterms:ctid}</a></div>
                    <div class="resourceProperties"></div>
                </div>
                <div class="envelopeData">
                    <div class="resultHeader">Envelope Data</div>
                    <div class="envelopeProperties"></div>
                </div>
            </div>
            <div class="rawData"></div>
        </div>
    </script>
</div>