@using workIT.Models.Common;
@using workIT.Models.Search;
@using workIT.Services;
@using workIT.Utilities;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Search";

    var enumServices = new EnumerationServices();
    var isUserSiteStaff = AccountServices.IsUserSiteStaff();
    var showReports = isUserSiteStaff || Request.Params[ "ShowReports" ] == "true";
    var googleMapsKey = new ThirdPartyApiServices().GetGoogleMapsApiKey();

    var credentialTypes = enumServices.GetCredentialType( workIT.Models.Common.EnumerationType.MULTI_SELECT, false );
	var credLanguages = enumServices.GetSiteTotals ( EnumerationType.MULTI_SELECT, 65, 1, false );    
	var asmtLanguages = enumServices.GetSiteTotals ( EnumerationType.MULTI_SELECT, 65, 3, false );
	var loppLanguages = enumServices.GetSiteTotals ( EnumerationType.MULTI_SELECT, 65, 7, false );
    var asmtQA = enumServices.GetEntityAgentQAActions( EnumerationType.MULTI_SELECT, 3, false );
    var asmtConnections = enumServices.GetAssessmentsConditionProfileTypes( workIT.Models.Common.EnumerationType.MULTI_SELECT, false );
    var loppQA = enumServices.GetEntityAgentQAActions( EnumerationType.MULTI_SELECT, 7, false );
    var loppConnections = enumServices.GetLearningOppsConditionProfileTypes( workIT.Models.Common.EnumerationType.MULTI_SELECT, false );

    var asmtDeliveryMethods = enumServices.GetSiteTotals( EnumerationType.MULTI_SELECT, 21, 3, false );
    var loppDeliveryMethods = enumServices.GetSiteTotals( EnumerationType.MULTI_SELECT, 21, 7, false );
    var credAudienceTypes = enumServices.GetAudienceTypes( EnumerationType.MULTI_SELECT, 1, false );
    var asmtAudienceTypes = enumServices.GetAudienceTypes( EnumerationType.MULTI_SELECT, 3, false );
    var loppAudienceTypes = enumServices.GetAudienceTypes( EnumerationType.MULTI_SELECT, 7, false );

    var searchType = Request.Params[ "searchType" ] ?? "credential";
    var viewMode = Request.Params[ "viewMode" ] ?? "list";
    var sortOrder = Request.Params[ "sortOrder" ] ?? "newest";
    var elastic = Request.Params[ "elastic" ] ?? "false";
    var custom = Request.Params[ "custom" ] ?? "{}";

    Widget widget = new Widget();
    int widgetId = 0;
    var haveWidget = false;
    var searchTarget = "detailWindow";
    var widgetAlias = ViewContext.RouteData.Values[ "widgetAlias" ];
    if ( widgetAlias != null && !string.IsNullOrWhiteSpace( widgetAlias.ToString() ) )
    {
        widget = WidgetServices.GetByAlias( widgetAlias.ToString() );
        widgetId = widget.Id;
    }
    else
    {
        widgetId = FormHelper.GetRequestKeyValue( "widgetId", 0 );
        if ( widgetId > 0 )
        {
            widget = WidgetServices.Get( widgetId );

        }
    }
    if ( widget != null && widget.Id > 0 )
    {
        haveWidget = true;
        searchTarget = "_self";

    }



    var preselectedKeywords = ( Request.Params[ "keywords" ] ?? "" ).Replace( "\"", "" );
    var preselectedFilters = new Dictionary<int, List<int>>();
    try
    {
        var filterString = string.IsNullOrWhiteSpace( Request.Params[ "filters" ] ) ? "" : Request.Params[ "filters" ];
        foreach ( var filterchunk in filterString.Split( '_' ) )
        {
            var chunkParts = filterchunk.Split( '-' );
            var categoryID = int.Parse( chunkParts[ 0 ] );
            var filterIDs = chunkParts[ 1 ].Split( ',' ).Select( int.Parse ).ToList();
            preselectedFilters.Add( categoryID, filterIDs );
        }
    }
    catch { }

}

@helper RenderFilterListItem( string searchType, string filterName, string filterLabel, bool renderAllowed = true )
{
    if ( renderAllowed )
    {
        <button class="filterListItem whiteGhost @searchType @filterName.ToLower()" data-searchType="@searchType" data-filterName="@filterName.ToLower()">@Html.Raw( filterLabel )</button>
    }
}
@helper RenderFilterListItem( string searchType, string filterName, string filterLabel, Enumeration tags, bool renderAllowed = true )
{
    if ( renderAllowed && tags != null && tags.Items.Count > 0 )
    {
        <button class="filterListItem whiteGhost @searchType @filterName.ToLower()" data-searchType="@searchType" data-filterName="@filterName.ToLower()">@Html.Raw( filterLabel )</button>
    }
}
@helper RenderCodeFilter( string searchType, string filterName, string filterLabel, string description, string displayPrefix, Enumeration tags, bool isColumnar = false, bool showDefinitions = false, List<string> suppressTags = null, Dictionary<string, List<string>> autoSelectValuesWhenKeySelected = null )
{

    if ( tags != null && tags.Items.Count > 0 )
    {
        suppressTags = suppressTags ?? new List<string>();
        <div class="filter" data-searchType="@searchType" data-filterName="@filterName.ToLower()" data-categoryID="@tags.Id" data-displayPrefix="@displayPrefix" data-filterType="code">
            <div class="filterLabel">@Html.Raw( filterLabel )</div>
            <div class="filterDescription">@Html.Raw( description )</div>
            <div class="filterItems @( isColumnar ? "columns" : "" )">
                @foreach ( var item in tags.Items )
                {
                    var autoValues = "";
                    try
                    {
                        if ( autoSelectValuesWhenKeySelected != null && autoSelectValuesWhenKeySelected.ContainsKey( item.SchemaName ) )
                        {
                            autoValues = string.Join( ",", autoSelectValuesWhenKeySelected[ item.SchemaName ] );
                        }
                    }
                    catch { }
				<label class="tag whiteGhost" data-suppressed="@( suppressTags.Contains( item.SchemaName ) ? "true" : "false" )">
					@if ( tags.Id == 65  )
					{
					<input type="checkbox" data-schema="@item.SchemaName" data-tagID="@item.Value" data-categoryID="@tags.Id" data-name="@item.Name" data-autoselectvalues="@autoValues" />
					}
					else
					{
					<input type="checkbox" data-schema="@item.SchemaName" data-tagID="@item.Id" data-categoryID="@tags.Id" data-name="@item.Name" data-autoselectvalues="@autoValues" />
					}
					<i class="fa fa-check"></i>
					<span class="name">@item.Name</span>
					@if ( showDefinitions )
					{
					<span class="definition">@item.Description</span>
					}
				</label>
                }
            </div>
        </div>
    }
}
@helper RenderTextFilter( string searchType, string filterName, string filterLabel, string description, string displayPrefix )
{
    <div class="filter" data-searchType="@searchType" data-filterName="@filterName.ToLower()" data-displayPrefix="@displayPrefix" data-filterType="text">
        <div class="filterLabel">@Html.Raw( filterLabel )</div>
        <div class="filterDescription">@Html.Raw( description )</div>
        <div class="filterTextAddBox">
            <input type="text" class="filterText hasAutoComplete" data-autocompletecontext="@filterName.ToLower()" placeholder="Type some text and press Enter" />
            <button class="filterTextAddButton">Add</button>
        </div>
        <div class="filterTextItems"></div>
    </div>
}
@helper RenderFrameworkFilter( string searchType, string filterName, string microSearchType, string filterLabel, string description, string displayPrefix, string searchLabel, string searchSelectedLabel, Enumeration frameworkTopLevel, string topLevelSelectLabel, int pageSize = 5, bool includeAllCodes = false )
{
    <div class="filter" data-searchType="@searchType"
         data-filterName="@filterName.ToLower()"
         data-frameworkID="@frameworkTopLevel.Id"
         data-microsearchType="@microSearchType"
         data-pageSize="@pageSize" data-pageNumber="1" data-includeAllCodes="@( includeAllCodes ? "true" : "false" )" data-displayPrefix="@displayPrefix" data-filterType="framework">
        <div class="filterLabel">@Html.Raw( filterLabel )</div>
        <div class="filterDescription">@Html.Raw( description )</div>
        <div class="frameworkColumns">
            <div class="frameworkColumn frameworkSearchColumn">
                <div class="label">@Html.Raw( searchLabel )</div>
                <div class="frameworkSelectBox offscreen">
                    <select class="frameworkTopLevel">
                        <option value="0">@topLevelSelectLabel</option>
                        @foreach ( var item in frameworkTopLevel.Items )
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <button class="frameworkTopLevelSelectButton">Select <i class="fa fa-caret-right"></i></button>
                </div>
                <input type="text" class="frameworkTextBox" placeholder="Enter keyword(s)" />
                <div class="frameworkStatusBox"></div>
                <div class="frameworkResultsBox"></div>
                <div class="frameworkPagingBox"></div>
            </div>
            <div class="frameworkColumn frameworkSelectedColumn">
                <div class="label">@Html.Raw( searchSelectedLabel )</div>
                <div class="frameworkSelectedItems"></div>
            </div>
        </div>
    </div>
}

@*@helper RenderFrameworkFilter( MicroSearchFilterSettings settings )
    {
        <div class="filterV2 frameworkFilter microSearchFilter microSearchFilterBox"
             data-microSearchName="@( "mirosearch_" + settings.FilterName )"
             data-searchtype="@settings.ParentSearchType" data-filtername="@settings.FilterName" data-categoryID="@settings.CategoryId" data-microSearchType="@settings.MicroSearchType" data-pageSize="@settings.PageSize" data-pageNumber="1" data-tagTitle="@settings.TagTitle" data-filterSchema="@settings.FilterSchema">
            <div class="microSearchPrevious" style="display:none;"></div>
            @if ( !string.IsNullOrWhiteSpace( settings.Guidance ) )
            {
                <p class="filterGuidance">@Html.Raw( settings.Guidance )</p>
            }
            <div class="microSearchFindBox">
                <div class="microSearchTitle">@settings.InputTitle</div>
                <div class="microSearchInputs">
                    @{ var count = 0; }
                    @foreach ( var filter in settings.Filters )
                    {
                        filter.SynthesizeItems();
                        switch ( filter.Type )
                        {
                            case "text":
                                <input type="text" data-filterType="text" data-filtername="@filter.FilterName" placeholder="@filter.Placeholder" />
                                break;

                            case "select":
                                <div class="selectWrapper" data-filterType="select" data-filtername="@filter.FilterName">
                                    <select data-filtername="@filter.FilterName">
                                        @if ( filter.IncludeDefaultItem )
                                        {
                                            <option value="0">@filter.DefaultItemTitle</option>
                                        }
                                        @foreach ( var item in filter.Items )
                                        {
                                            <option value="@item.Key">@item.Value</option>
                                        }
                                    </select>
                                    <button class="selectButton" data-buttonID="@count">Select <i class="fa fa-caret-right"></i></button>
                                </div>
                                count++;
                                break;

                            default:
                                break;
                        }
                    }
                    @if ( settings.IncludeKeywords )
                    {
                        <input type="text" data-filtername="Keywords" placeholder="Find..." />
                    }
                </div>
                <div class="microSearchStatus microSearchInputStatus"></div>
                <div class="microSearchResults"></div>
                <div class="microSearchPaging"></div>
            </div>
            <div class="microSearchSelectedBox">
                <div class="microSearchTitle">@settings.SelectedTitle</div>
                <div class="microSearchStatus microSearchSelectedStatus">No items selected.</div>
                <div class="microSearchSelectedItems"></div>
            </div>
        </div>
    }*@
<script type="text/javascript">
    /* Global Variables */
    var global = {
        searchType: "@searchType",
        widgetId : "@widgetId",
        viewMode: "@viewMode",
        sortOrder: "@sortOrder",
        totalPages: 0,
        pageNumber: 1,
        pageSize: 25,
        searchTimeout: 0,
        searchStatus: {
            searching: false
        },
        currentResults: {},
        window: $(window),
        preselectedFilters: @Html.Raw( Newtonsoft.Json.JsonConvert.SerializeObject( preselectedFilters ) ),
        custom: $.parseJSON(JSON.stringify(@Html.Raw( custom ))),
        preselectedKeywords: "@preselectedKeywords",
    	elastic: "@elastic",
    	isIframeMode: window != window.top
    };
</script>
<script type="text/javascript">
    /* Initialization */
    $(document).ready(function () {
        setupSearchType();
        setupViewMode();
        setupSortOrder();
        setupDescriptionToggle();
        setupKeywords();
        setupFilters();
        setupFilterUI();
        setupMapBoxScrolling();
        setupScrollPaging();
        setupAutoComplete();
        initialize();

    });

    function getUrlVars() {
        var vars = {};
        var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
            vars[key] = value;
        });
        return vars;
    }
    //Search Type
    function setupSearchType() {
        $("#ddlSearchType").on("change", function () {
            global.searchType = $(this).find("option:selected").attr("value");
            $("#txtSearchKeyword").val("");
            filters.clearAllFilters();
            resetCountDown();
        });
    }
    //

    //View Mode
    function setupViewMode() {
        var buttons = $("#viewModes button");
        buttons.on("click", function () {
            var button = $(this);
            var viewMode = button.attr("data-viewMode");
            buttons.removeClass("selected").filter(button).addClass("selected");
            global.viewMode = viewMode;
            $("#searchResultsContent").attr("data-viewMode", viewMode);
            global.window.trigger("viewModeChanged");
            //Thrash the DOM so IE works
            if (window.navigator.userAgent.indexOf("Trident") > -1) {
                $("#searchResultsSection").hide().show();
            }
        });
    }
    //

    //Sort Order
    function setupSortOrder() {
        $("#ddlSortOrder").on("change", function () {
            global.sortOrder = $(this).find("option:selected").attr("value");
            this.defaultValue = this.value;
            resetCountDown();
        });
    }
    //

    //Show/Hide Descriptions
    function setupDescriptionToggle() {
        $("#toggleDescriptions").on("click", function () {
            $("#searchResultsContent").toggleClass("hideDescriptions");
        });
        $("#toggleGrayButtons").on("click", function () {
            $("#searchResultsContent").toggleClass("hideGrayButtons");
        });

    }
    //

    //Setup Keywords-related things
    function setupKeywords() {
        //Search query
        $("#txtSearchKeyword").on("keyup change", function (e) {
            if (e.which == 9 || e.keyCode == 9) {
                return; //Ignore tab
            }

            filters.setSortOrder();

            resetCountDown();
        });

        //Search Button
        $("#btnDoSearch").on("click", function () {
            resetCountDown();
        });

        //Clear button
        $("#btnClearKeywords").on("click", function () {
            $("#txtSearchKeyword").val("").trigger("change");
        });

        //Reset button
        $("#btnResetSearch").on("click", function () {
            $("#txtSearchKeyword").val("");
            filters.clearAllFilters();
            resetCountDown();
        });
    }
    //

    //Filter functions that trigger a search
    function setupFilters() {
        //Code filters
        $(".filter[data-filterType='code']").each(function () {
            var filter = $(this);
            filter.find(".tag").each(function () {
                var tag = $(this);
                tag.find("input[type=checkbox]").on("click preselect", function () {
                    var cbx = $(this);
                    var autoselect = cbx.attr("data-autoselectvalues").split(",");
                    for (var i in autoselect) {
                        if (autoselect[i].length == 0) {
                            continue;
                        }
                        filter.find(".tag input[type=checkbox][data-schema='" + autoselect[i] + "']").prop("checked", cbx.prop("checked"));
                    }
                    filters.setSortOrder();
                    filters.updateFilters();
                });
            });
            //Use this instead if autofilter checking is not used in the search
            //filter.find(".tag input[type=checkbox]").on("click preselect", function () {
            //	filters.updateFilters();
            //});
        });

        //Text filters
        $(".filter[data-filterType='text']").each(function () {
            var filter = $(this);
            var entryBox = filter.find(".filterText");
            var entryButton = filter.find(".filterTextAddButton");
            entryBox.on("keyup", function (e) {
                if (e.which == 13 || e.keyCode == 13) {
                    filters.addTextFilterItem(filter);
                }
            });
            entryBox.on("autoCompleteSelect", function () {
                entryButton.trigger("click");
                setTimeout(function () { entryBox.val(""); }, 10);
            });
            entryButton.on("click", function (e) {
                filters.addTextFilterItem(filter);
            });
        });

        //Framework filters
        $(".filter[data-filterType='framework']").each(function () {
            var filter = $(this);
            var topLevelSelector = filter.find(".frameworkTopLevel");
            var textBox = filter.find(".frameworkTextBox");
            var topLevelSelectButton = filter.find(".frameworkTopLevelSelectButton");
            var categoryID = parseInt(filter.attr("data-frameworkID"));
            topLevelSelector.on("change", function () {
                filters.doMicroSearch(filter, true);
            });
            topLevelSelector.on("preselect", function () {
                topLevelSelectButton.trigger("click");
            });
            textBox.on("keyup change", function () {
                filters.doMicroSearch(filter, true);
            });
            topLevelSelectButton.on("click", function () {
                var selectedItem = topLevelSelector.find("option:selected");
                var value = parseInt(selectedItem.attr("value"));
                var name = selectedItem.text();
                var selectors = { CategoryId: categoryID, CodeId: value, IsTopLevel: true };
                if (value > 0) {
                    filters.addMicroFilter(filter, name, selectors);
                }
            });
        });
    }
    //

    //Basic filter UI functions
    function setupFilterUI() {
        //Filter section overall
        $("#btnToggleFilters, #btnCloseMainFilters").on("click", function () {
            $("#searchMainFilters").slideToggle(250);
        });

        //Individual Filters
        var filterLists = $(".filterList");
        var filterListItems = $(".filterListItem");
        var filters = $(".filter");
        filterListItems.on("click", function () {
            var button = $(this);
            filterListItems.removeClass("activeFilter").filter(button).addClass("activeFilter");
            filters.removeClass("activeFilter").filter("[data-searchType=" + button.attr("data-searchType") + "][data-filterName=" + button.attr("data-filterName") + "]").addClass("activeFilter");
        });

        //Show/hide Filters when search type changes
        $("#ddlSearchType").on("change", function () {
            filterLists.removeClass("activeFilter").filter("[data-searchType=" + global.searchType + "]").addClass("activeFilter").find(".filterListItem").first().trigger("click");
        });

        //Clear selected filters
        $("#btnClearAllTags").on("click", function () {
            $("#searchSelectedTagsList .selectedTag .closeButton").trigger("click");
        });
    }
    //

    //Handle fixing the map box in place while scrolling
    function setupMapBoxScrolling() {
        var content = $("#searchResultsContent");
        var mapBox = $("#mapBox");
        var win = global.window;
        var compareBar = $("#compareBar");
        if (global.isIframeMode) {
            mapBox.css("max-height", "800px");
        }
        else {
            win.on("resize scroll", function () {
                var scrollTop = win.scrollTop();
                var topThreshhold = content.position().top;
                var winHeight = win.height();
                var compareBarHeight = compareBar.outerHeight();
                var bottomThreshhold = topThreshhold + content.outerHeight() + compareBar.outerHeight();
                //Adjust the map box size so the entire thing always shows
                if (global.window[0].matchMedia("(max-width: 700px)").matches) {
                    mapBox.css("height", (winHeight * 0.5) - compareBarHeight);
                }
                else {
                    mapBox.css("height", winHeight - compareBarHeight);
                }
                //Handle sticky map
                if (scrollTop > topThreshhold) {
                    mapBox.addClass("sticky");
                }
                else {
                    mapBox.removeClass("sticky");
                }
                if (scrollTop + winHeight >= bottomThreshhold) {
                    mapBox.addClass("bottom");
                }
                else {
                    mapBox.removeClass("bottom");
                }
            });

        }
    }
    //

    //Add in results when the user scrolls down far enough
    function setupScrollPaging() {
        if (global.isIframeMode) {
            return;
        }
        var win = global.window;
        var resultsList = $("#searchResultsList");
        win.on("scroll", function () {
            var top = win.scrollTop();
            var winHeight = win.outerHeight();
            var resultsHeight = resultsList.position().top + resultsList.outerHeight();
            var min = winHeight * 1.5;

            //Don't do anything if not enough scrolling has happened or there are no more pages or if a search is in progress
            if (top < min || global.pageNumber >= global.totalPages || global.searchStatus.searching) {
                return;
            }

            //Do a search if nearing the bottom
            if (top + winHeight >= resultsHeight - 500) {
                global.pageNumber++;
                doSearch(true);
            }
        });
    }
    //

    //Setup AutoComplete fields
    function setupAutoComplete() {
        $(".hasAutoComplete").each(function () {
            var box = $(this);
            box.autocomplete({
                source: function (request, response) { handleAutoComplete(request, response, box); },
                select: function (event, ui) { box.val(ui.item.value); box.trigger("change"); box.trigger("autoCompleteSelect"); },
                delay: 150,
            });
        });
    }
    //

    //Initialize event handler based stuff
    function initialize() {
        filters.setSortOrder();
        //Set search type
        $("#ddlSearchType").trigger("change");

        //Handle Preselected keywords
        if (global.preselectedKeywords.length > 0) {
            $("#txtSearchKeyword").val(global.preselectedKeywords).trigger("change");
        }

        //Handle Preselected filters
        for (var i in global.preselectedFilters) {
            var categoryID = i;
            var items = global.preselectedFilters[i];

            for (var j in items) {
                //Code filters
                $(".filter[data-searchtype=" + global.searchType + "][data-filtertype=code][data-categoryID=" + categoryID + "] input[data-tagID=" + items[j] + "]").prop("checked", true).trigger("preselect");
                //Text filters
                //No handling?
                //Framework filters
                $(".filter[data-searchtype=" + global.searchType + "][data-filtertype=framework][data-frameworkID=" + categoryID + "] .frameworkTopLevel option[value=" + items[j] + "]").prop("selected", true).trigger("preselect");
            }
        }

        var c = global.custom;
        if (c.aid !== undefined) {
            filters.addCustomFilter(c.n, { AgentId: c.aid, RelationshipId: c.rid }, c.p, "<b>" + c.r + "</b>" + c.d, function () {
                resetCountDown();
            });
        }

        //filters.addCustomFilter(name, tagItem.QueryValues, category, tagItem.Display, function() { resetCountDown(); });

        filters.updateFilters();
        resetCountDown();
    }
    //

</script>
<script type="text/javascript">
    /* Search Functions */
    //Reset search delay
    function resetCountDown() {
        clearTimeout(global.searchTimeout);
        global.searchTimeout = setTimeout(function () {
            doSearch(false);
        }, 800);
    }
    //

    //Set search status
    function setSearchStatus(message) {
        $("#searchStatus").html(message);
        $("#searchResultsContent").attr("data-searchInProgress", global.searchStatus.searching ? "true" : "false");
    }
    //

    //Do a search
    function doSearch(isPaging, overrideSuccessMethod) {
        //Reset paging if needed
        if (!isPaging) {
            global.pageNumber = 1;
        }

        //Build query
        var query = {
            SearchType: global.searchType,
            WidgetId: global.widgetId,
            StartPage: global.pageNumber,
            PageSize: global.pageSize,
            SortOrder: global.sortOrder,
            Keywords: $("#txtSearchKeyword").val().trim(),
            FiltersV2: filters.getFiltersForQuery(),
            Elastic: global.elastic,
        };

        //Set status
        global.searchStatus.searching = true;
        setSearchStatus("Searching...");

        //Do Search
        doAjax("Search", "MainSearch", { query: query, useV4Results: true }, overrideSuccessMethod ? overrideSuccessMethod : success_doSearch, null, { isPaging: isPaging });
    }
    //

    //Handle search results
    function success_doSearch(message, extra) {
        global.searchStatus.searching = false;

        if (message.valid) {
            //Handle resuls
            global.currentResults = message.data;
            global.totalPages = Math.ceil(message.data.TotalResults / global.pageSize);
            renderCurrentResults(extra.isPaging);

            //Set status
            if (global.currentResults.TotalResults > 0) {
                setSearchStatus("Found " + message.data.TotalResults + " results");
            }
            else {
                setSearchStatus("Sorry, no results found");
            }
        }
        else {
            setSearchStatus(message.status);
        }
    }
    //

    //Handle autocomplete
    function handleAutoComplete(request, response, box) {
        var context = box.attr("data-autocompletecontext").toLowerCase();
        if (box.val().trim().length >= 2) {
            doAjax("Search", "DoAutoComplete", { text: request.term, context: context, searchType: global.searchType, widgetId: global.widgetId }, success_handleAutoComplete, null, { response: response, box: box })
        }
    }
    //

    function success_handleAutoComplete(message, extra) {
        if (message.valid) {
            console.log("AutoComplete suggestions received", { message: message, extra: extra });
            extra.response(message.data);
        }
        else {
            extra.response([]);
        }
    }
    //
</script>
<script type="text/javascript">
    /* Ajax Methods */

    //Do an AJAX search
    function doAjax(controller, method, data, success, button, passThrough) {
        //Disable the button
        if (button) {
            $(button).attr("data-originalValue", $(button).attr("value")).attr("value", "...").prop("disabled", true);
        }

        //Make the request
        $.ajax({
            url: "@Url.Content( "~/" )" + controller + "/" + method,
            async: true,
            headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
            dataType: "json",
            type: "POST",
            data: JSON.stringify(data),
            success: function (message) {
                success(message, passThrough);
            },
            error: function(message){
            	success(message, passThrough);
            }
        }).done(function() {
            //Ensure the spinner is hidden
            hideSpinner();
            //Reenable the button
            if(button){
                $(button).attr("value", $(button).attr("data-originalValue")).prop("disabled", false);
            }
        });
    }
    //
</script>
<script type="text/javascript">
	/* Report Download Functions */
    var Reports = {};
    var Search = {};

    Search.Current = {
        SortOrder: "",
        Query: {},
        RawResults: [],
        Results: [],
        TotalResults: 0,
        PageNumber: 1,
        PageSize: 20,
        Searching: false,
        CustomFilters: [],
        CompareMode: false
    }

	$(document).ready(function() {
		setupReports();
	});

	function setupReports(){
		//Reports.ReportButton = $("#downloadResults");
		//Reports.ReportSpinner = $("#downloadSpinner");
        Search.Box = $('#searchResultsSection');
        Search.Render = {
            StatusBox: Search.Box.find(".searchStatus")
        }
        Search.Reports = {
            Box: Search.Box.find(".reportsBox"),
            StatusBox: Search.Box.find(".reportsBox .reportsStatus"),
            ProgressWrapper: Search.Box.find(".reportsBox .reportsProgressWrapper"),
            ProgressBar: Search.Box.find(".reportsBox .reportsProgressBar"),
            DownloadButton: Search.Box.find("[data-action='downloadReport']"),
            Cache: []
        };
		//Reports.ReportButton.on("click", function(){
		//	downloadReport();
		//	Reports.ReportSpinner.css("display", "inline");
        //});

        Search.Reports.DownloadButton.on("click", function () {
            downloadReport();
        });
	}

    function downloadReport() {
        Search.Reports.Box.show();
		Search.Reports.Cache = [];
		var current = global.pageSize;
		global.pageSize = 100;
        doSearch(false, success_downloadReportPage);
        Search.Reports.StatusBox.html("Downloading...");
        Search.Reports.ProgressBar.css("width", "0%");

		//Reports.OldPageSize = global.pageSize;
		//global.pageSize = 9999;
		//doSearch(false, success_downloadReport);
	}

	//function success_downloadReport(message, extra){
	//	global.searchStatus.searching = false;
	//	global.pageSize = Reports.OldPageSize;
	//	if(message.valid){
	//		renderReport(message.data.Results);
	//	}
	//	else{
	//		setSearchStatus(message.status);
 //       }
 //       Reports.ReportSpinner.css("display", "none");
	//}

    function success_downloadReportPage(message, passThrough) {
        Search.Current.Searching = false;
        //Search.Render.SpinnerBox.attr("data-searching", "false");
        if (message.valid) {
            var totalPages = Math.ceil(message.data.TotalResults / global.pageSize);
            Search.Reports.StatusBox.html("Loaded Page " + global.pageNumber + " of " + totalPages);
            Search.Reports.Cache = Search.Reports.Cache.concat(message.data.Results);
            Search.Reports.ProgressBar.css("width", (100 * (global.pageNumber / (totalPages || 1))) + "%");
            if (global.pageNumber >= totalPages) {
                setStatus(message.data.TotalResults == 0 ? "Sorry, no results found." : "Found " + message.data.TotalResults + " Results", "");
				global.pageNumber = 1;
				downloadCSV();
				global.pageSize = 25;
            }
            else {
                global.pageNumber++;
                doSearch(true, success_downloadReportPage);
            }
        }
        else {
            Search.Reports.StatusBox.html("Error: " + message.status);
            Search.Reports.Box.hide();
        }
    }

    //Set the status for the search
    function setStatus(message, status) {
        Search.Render.StatusBox.attr("data-status", status).html(message);
    }
	//
	@*function renderReport(data){
		//Build tables
        var rows = [["Id", "Name", "CTID", "Owner", "Detail", "Updated"]]; //Initialize with header row
		for(var i in data){
			(function(item){
				var p = item.Properties;
				var urlBase = "https://@( Request.Url.Authority )" + "/" + global.searchType + "/";
                var row = [p.RecordId, p.Name, p.ctid, p.Owner, urlBase + p.RecordId, p.LastUpdated];
				rows.push(row);
			})(data[i]);
		}

		//Convert to CSV
		var output = "";
		for(var i in rows){
			(function(row){
				var text = JSON.stringify(row);
				text = text
					.substring(1, text.length - 1) //Remove [ and ]
					.replace(/\\n/g, "\n") //Replace encoded line breaks with raw line breaks
					.replace(/\\"/g, '""') //Quotes in CSVs need to be escaped with quotes, e.g. "line in \"json\"" becomes "line in ""json"""
					+ "\n"; //Add new row
				output += text;
			})(rows[i]);
		}

		//Prompt download
		console.log("Saving Data...", rows);

		var link = $("<a style=\"display:none;\" download=\"" + global.searchType + " " + new Date().toJSON().split("T")[0] + ".csv\"></a>").appendTo("body"); //Create link
		var data = window.URL.createObjectURL(new Blob([output], { type: "text/csv" }), { oneTimeOnly: true }); //Create data blob
		link.attr("href", data); //Assign data blob to link
		link[0].click(); //Click the link
		window.URL.revokeObjectURL(data); //Clean up to avoid RAM leak
		link.remove(); //Remove link
		Reports.ReportSpinner.css("display", "none");
	}*@

    function downloadCSV(){
			//console.log("Downloaded Data", Search.Reports.Cache);
			//Create table data
			var csv = "";
        var rows = [];
        if (global.searchType === 'organization') {
            rows.push(["Id", "CTID", "Name", "Last Updated", "Detail Page"]);
            Search.Reports.Cache.forEach(function (record) {
                rows.push([record.RecordId, record.Properties.ctid, record.Name, record.Properties.LastUpdated, "//@( Request.Url.Authority )" + "/" + global.searchType + "/" + record.RecordId]);
            });
        }
        else if (global.searchType === 'credential') {
            rows.push(["Id", "CTID", "Name", "Credential Type", "Last Updated", "Detail Page", "Owner", "Owner ID"]);
            Search.Reports.Cache.forEach(function (record) {
                rows.push([record.RecordId, record.Properties.ctid, record.Name, record.Properties.Type, record.Properties.LastUpdated, "//@( Request.Url.Authority )" + "/" + global.searchType + "/" + record.RecordId, record.Properties.Owner, record.Properties.OwnerId]);
            });
        }
         else {
            rows.push(["Id", "CTID", "Name", "Last Updated", "Detail Page", "Owner", "Owner ID"]);
            Search.Reports.Cache.forEach(function (record) {
                rows.push([record.RecordId, record.Properties.ctid, record.Name, record.Properties.LastUpdated, "//@( Request.Url.Authority )" + "/" + global.searchType + "/" + record.RecordId, record.Properties.Owner, record.Properties.OwnerId]);
            });
        }
			rows.forEach(function(row){
				var rowText = JSON.stringify(row);
				rowText = rowText.substring(1, rowText.length - 1);
				rowText = rowText
					.replace(/\\n/g, "\n")
					.replace(/\\"/g, '""')
					+ "\n";
				csv += rowText;
			});

			//Save as file
			var blob = new Blob([csv], { type: "text/csv" });
            var fileName = "Report - " + global.searchType + " " + new Date().toJSON().split("T")[0] + ".csv";
			if(window.navigator && window.navigator.msSaveOrOpenBlob){
				window.navigator.msSaveOrOpenBlob(blob, fileName);
			}
			else{
				var link = $("<a></a>").appendTo("body");
				link.attr("download", fileName);
				var data = window.URL.createObjectURL(blob, { oneTimeOnly: true });
				link.attr("href", data);
				link[0].click();
				link.remove();
				window.URL.revokeObjectURL(data);
               }
            Search.Reports.Box.hide();
			Search.Reports.Cache = [];
		}

    //Show the spinner
    function showSpinner(){
        $("#waitWrapper").stop().fadeIn(250);
    }
    //

    //Hide the spinner
    function hideSpinner() {
        $("#waitWrapper").stop().fadeOut(250);
    }
    //
</script>
<script type="text/javascript">
    /* Rendering Methods */
    //Autofill a template
    function autoFillTemplate(template, data) {
        var text = template;
        for (var i in data) {
            text = text.replace(new RegExp("{" + i + "}", "g"), data[i]);
        }
        return text;
    }
    //

    //Render search results
    function renderCurrentResults(isPaging) {
        var results = global.currentResults.Results;
        var resultTemplate = $("#template_searchresult").html();
        var box = $("#searchResultsList");
        var pagingBox = $("#searchPagingButtons");

        //Clear results if not appending
        if (!isPaging) {
        	box.html("");
            map.clearMarkers();
        }

        for (var i in results) {
            //Create result
            var result = $(autoFillTemplate(resultTemplate, results[i].Properties)).appendTo(box);
            handleResultImage(result);
            handleResultLocations(result, results[i]);
            renderTags(result, results[i].TagsV2);
        }

    	//Add paging buttons if in iframe mode
        if(global.isIframeMode){
        	pagingBox.html("");
        	if(global.totalPages > global.pageNumber){
        		var pagingButton = $("<button class=\"greenButton\">Load More Results</button>").appendTo(pagingBox);
        		pagingButton.on("click", function() {
        			global.pageNumber++;
        			doSearch(true);
        		});
        	}
        	else{
        		pagingBox.html("<p class=\"noMoreResults\">No more results to display</p>");
        	}
        }

        //Force resize
        global.window.trigger("resize");
    }
    //

    //Handle images to avoid unwanted requests
    function handleResultImage(result) {
        var box = result.find(".resultImage");
        var url = box.attr("data-resultImageUrl");
        if (url.indexOf("http") > -1) {
            box.css("background-image", "url('" + url + "'), linear-gradient(#CCC, #EEE)");
        }
    }
    //

    //Add location buttons
    function handleResultLocations(result, data) {
        var box = result.find(".resultLocationsBox");
        var button = result.find(".btnAvailableAt");
        var list = result.find(".resultLocations");
        var template = $("#template_mapmarker_button").html();
        try {
            if (data.Properties.Locations.length > 0) {
                //Create the map markers and buttons
                for (var i in data.Properties.Locations) {
                    var marker = map.addMarker(data.Properties.RecordId, data.Properties.Locations[i].Latitude, data.Properties.Locations[i].Longitude);
                    list.append(autoFillTemplate(template, { MarkerId: marker.customInfo.Id, RecordId: data.Properties.RecordId }));
                }
                //Setup the "show locations" button
                button.find(".label").html("Show " + data.Properties.Locations.length + " Locations");
                button.on("click", function () {
                    box.attr("data-showLocations", "true");
                });
                //Show marker button directly if only one
                if (data.Properties.Locations.length == 1) {
                    box.attr("data-showLocations", "true");
                }
                //Show the location box
                box.attr("data-showLocationsBox", "true");
            }
            else {
                return;
            }
        }
        catch(e) { }
    }
    //

    //Add gray boxes
    function renderTags(result, tags){
        var buttonsBox = result.find(".resultTagButtons");
        var contentBox = result.find(".resultTagContent");
        var buttonTemplate = $("#template_tagButton").html();
        var resultID = result.attr("data-resultID");
        //For each tag...
        for(var i in tags){
            var tag = tags[i];
            //If it has items...
            if(tag.TotalItems > 0){
                //Create and append the button, and assign it a generic handler
                var button = $(autoFillTemplate(buttonTemplate.replace(/{AjaxQueryValues}/g, JSON.stringify(tag.AjaxQueryValues)), tag).replace(/{ResultId}/g, resultID)).appendTo(buttonsBox);

                //Closure to prevent loop reference error
                (function(result, tagName){
                    button.on("click", function(){
                        showTagItems(result, tagName);
                    });
                })(result, tag.Name);

                //Create and append a box to hold the tag items
                var tagContents = $("<div></div>").attr("class", "tagContentBox").attr("data-Name", tag.Name).appendTo(contentBox);
                //Create and append the tag items themselves
                renderTagItems(result, tag.Name, tag.Items);
            }
        }
    }
    //

    //Show Tags
    function showTagItems(result, buttonName){
        var button = result.find(".tagSetButton[data-Name=" + buttonName + "]");
        var container = result.find(".tagContentBox[data-name=" + button.attr("data-name") + "]");

        if(container.hasClass("selected")){
            result.find(".tagContentBox").removeClass("selected");
        }
        else{
            result.find(".tagContentBox").removeClass("selected").filter(container).addClass("selected");
        }

        if(button.attr("data-IsAjaxQuery") == "true" && !button.hasClass("ajaxPerformed")){
            var query = JSON.parse(button.find(".queryValues").html());
            var queryName = button.attr("data-AjaxQueryName");

            if(button.attr("data-searchquerytype") == "partial"){
            	doAjax("Search", "LoadPartial", { queryValues: query, partialName: queryName }, success_loadPartial, button, { result: result, buttonName: buttonName, container: container, button: button });
            }
            else{
            	query.AjaxQueryName = queryName
            	doAjax("Search", "GetTagsV2Data", query, success_showAjaxTags, button, { result: result, buttonName: buttonName, container: container });
            }
            button.addClass("ajaxPerformed");
        }
    }
    //

    //Show AJAX based tags
    function success_showAjaxTags(message, extra){
        if(message.valid){
            renderTagItems(extra.result, extra.buttonName, message.data);
            //extra.container.append("<a class=\"linkButton whiteButton tagItemButton\" target=\"" + global.searchType + "\" href=\"@Url.Content( "~/detail/" )" + global.searchType + "/" + extra.result.attr("data-resultID") + "\">More <i class=\"fas fa-ellipsis-h\"></i></a>");
        }
    }
	//

	//Show AJAX-based partial
	function success_loadPartial(message, extra){
		extra.button.prop("disabled", false); //Not sure why the AJAX method isn't handling this
		var container = extra.result.find(".tagContentBox[data-Name=" + extra.buttonName + "]");
		if(message.responseText){ //A little hacky since we're borrowing a JSON mime type'd data stream to transmit HTML data
			container.html(message.responseText);
		}
	}
	//

    //Render Tag Items
    function renderTagItems(result, tagName, tagItems){
        var container = result.find(".tagContentBox[data-Name=" + tagName + "]");
        var button = result.find(".tagSetButton[data-Name=" + tagName + "]");
        var itemTemplate = $("#template_tagItem").html();
        if(button.attr("data-SearchQueryType") === "merged") itemTemplate = $("#template_none").html();

        for(var i in tagItems){
            var tagItem = tagItems[i];
            var tag = $(autoFillTemplate(itemTemplate.replace(/{QueryValues}/g, JSON.stringify(tagItem.QueryValues)), tagItem)).appendTo(container);

            (function(tag, tagItem, button){
                switch(button.attr("data-SearchQueryType")){
                    case "none":
                        tag.replaceWith($("<div></div>").addClass("noQuery").html(tag.html()));
                        break;
                    case "link":
                        tag.on("click", function() {
                            window.open("@Url.Content( "~/detail/" )" + tagItem.QueryValues.TargetType + "/" + tagItem.QueryValues.TargetId, "grayTagWindow");
                        });
                        break;
                    case "search":
                        tag.on("click", function() {
                            var name = button.attr("data-name")
                            var category = button.attr("data-categoryName");
                            window.open("@Url.Content( "~/search/" )?autosearch=true&searchType='" + tagItem.QueryValues.TargetType + "'&custom= {n: 'qa', id: "+ tagItem.QueryValues.TargetId + ", p: '" +category+"', d: '" + tagItem.QueryValues.TextValue + "'}", "grayTagWindow");
                        });
                        break;
                    case "qaperformed":
                        console.log(tagItem.QueryValues.IsReference ? tagItem.QueryValues.SubjectWebpage : "@Url.Content( "~/detail/" )" + tagItem.QueryValues.SearchType + "/" + tagItem.QueryValues.RecordId);
                        tag.on("click", function () {
                            window.open(tagItem.QueryValues.IsReference ? tagItem.QueryValues.SubjectWebpage : "@Url.Content( "~/detail/" )" + tagItem.QueryValues.SearchType + "/" + tagItem.QueryValues.RecordId, "grayTagWindow");
                        });
                        break;
                    case "detail":
                        tag.on("click", function() {
                            window.open("@Url.Content( "~/detail/" )" + global.searchType + "/" + resultID, "grayTagWindow");
                        });
                        break;
                    case "code":
                        tag.on("click", function() {
                            $(".filter[data-searchType=" + global.searchType + "][data-filterType=code][data-categoryID=" + tagItem.QueryValues.CategoryId + "] input[data-tagID=" + tagItem.QueryValues.CodeId + "]").prop("checked", true).trigger("preselect");
                        });
                        break;
                    case "text":
                        tag.on("click", function(){
                            var category = button.attr("data-name").toLowerCase();
                            var filter = $(".filter[data-searchType=" + global.searchType + "][data-filterType=text][data-filterName=" + category + "]");
                            filter.find(".filterText").val(tagItem.QueryValues.TextValue);
                            filters.addTextFilterItem(filter);
                        });
                        break;
                    case "framework":
                        tag.on("click", function(){
                            var filter = $(".filter[data-searchType=" + global.searchType + "][data-filterType=framework][data-frameworkID=" + tagItem.QueryValues.CategoryId + "]");
                            var selectors = { CategoryId: tagItem.QueryValues.CategoryId, CodeId: tagItem.QueryValues.CodeId };
                            if(tagItem.QueryValues.IsTopLevel){
                                selectors.IsTopLevel = true;
                            }
                            filters.addMicroFilter(filter, tagItem.Display, selectors);
                        });
                        break;
                    case "custom":
                        tag.on("click", function() {
                            var name = button.attr("data-name")
                            var category = button.attr("data-categoryName");
                            filters.addCustomFilter(name, tagItem.QueryValues, category, tagItem.Display, function() { resetCountDown(); });
                        });
                        break;
                    case "merged":
                        var name = button.attr("data-name")
                        var category = button.attr("data-categoryName");
                        var wrapper = $("<div></div>").insertBefore(tag);
                        tag.appendTo(wrapper); //Not sure if this will move or duplicate the tag
                        var ownerOrgSearchLink = "@Url.Content( "~/search/" )?autosearch=true&searchType=" + tagItem.QueryValues.TargetType + "&custom= {n:'qualityassurance',aid:" + tagItem.QueryValues.AgentId + ",rid:" + tagItem.QueryValues.RelationshipId + ",p:'" + category + "',r:'" + tagItem.QueryValues.Relationship + " by ',d:'" + tagItem.QueryValues.TextValue + "'}";

                         $("<a />", { target: "grayTagWindow", title: tagItem.QueryValues.IsThirdPartyOrganization, href: tagItem.QueryValues.IsThirdPartyOrganization == true ? tagItem.QueryValues.AgentUrl : "@Url.Content( "~/organization/" )" + tagItem.QueryValues.AgentId }).addClass("viewButton linkButton fa fa-list-alt tagItemButton").appendTo(wrapper);

                        @*var detailLink = $("<a class='whiteButton linkButton fa fa-list-alt tagItemButton'></a>").appendTo(wrapper);
                        detailLink.attr("href", "@Url.Content( "~/organization/" )" + tagItem.QueryValues.AgentId );
                        detailLink.attr("target", "grayTagWindow");*@
                        //title: tagItem.QueryValues.IsThirdPartyOrganization,

                        var searchLink = $("<a class='whiteButton linkButton tagItemButton fa fa-search'></a>").appendTo(wrapper);

                        if(global.searchType === tagItem.QueryValues.TargetType){
                            searchLink.on("click", function() {
                                filters.addCustomFilter(name, tagItem.QueryValues, category, tagItem.Display, function() { resetCountDown(); });
                                console.log();
                            });
                        }
                        else{
                            searchLink.attr("href", ownerOrgSearchLink);
                            searchLink.attr("target", "grayTagWindow");
                        }

                        //tag.on("click", function() {
                        //    if(global.searchType === tagItem.QueryValues.TargetType){
                        //        filters.addCustomFilter(name, tagItem.QueryValues, category, tagItem.Display, function() { resetCountDown(); });
                        //    }
                        //    else
                        //    {
                        //        window.open(ownerOrgSearchLink, "grayTagWindow");
                        //    }
                        //});

                        break;
                    default:
                        break;
                }
            })(tag, tagItem, button);
        }

        if(tagItems.length >= 10)
        {
            container.append("<a class=\"linkButton whiteButton tagItemButton\" target=\"" + global.searchType + "\" href=\"/detail/" + global.searchType + "/" + result.attr("data-resultID") + "\">More <i class=\"fas fa-ellipsis-h\"></i></a>");
        }
    }
    //

</script>
<script type="text/javascript">
    /* Filters Methods */
    var filters = {
        customFilters: []
    };

    //Update the rendered filters
    filters.updateFilters = function () {
        filters.renderSelectedFilters();
        resetCountDown();
    }
    //

    filters.setSortOrder = function () {
        var defaultSortOrder = $("#ddlSortOrder").prop("defaultValue");
        console.log(1, defaultSortOrder);
        if (typeof defaultSortOrder === 'undefined') {
            console.log(filters.getFiltersForQuery().length > 0 || $("#txtSearchKeyword").val().length > 0);
            if (filters.getFiltersForQuery().length > 0 || $("#txtSearchKeyword").val().length > 0) {
                $("#ddlSortOrder").val("relevance");
                global.sortOrder = "relevance";
            }
            else {
                $("#ddlSortOrder").val("newest");
                global.sortOrder = "newest";
            }
        }
        //if(filters.getFiltersForQuery().length === 0  && $("#txtSearchKeyword").val().length === 0)
        //{
        //    $("#ddlSortOrder").val("newest");
        //    global.sortOrder = "newest";
        //    $("#ddlSortOrder").prop("defaultValue", "undefined");
        //}
        //console.log(filters.getFiltersForQuery().length, $("#ddlSortOrder").prop("defaultValue"), $("#ddlSortOrder").val());
    }

    //Read selected filters
    filters.readSelectedFilters = function () {
        var results = [];
        $(".filter").each(function () {
            var filter = $(this);
            var filterName = filter.attr("data-filterName");
            var displayPrefix = filter.attr("data-displayPrefix");
            //console.log(filterName, filter.attr("data-filterType"));
            switch (filter.attr("data-filterType")) {
                case "code": {
                    filter.find(".tag input:checked").each(function () {
                        var item = $(this);
                        results.push({
                            Type: "CODE",
                            Name: filterName,
                            Values: {
                                CategoryId: parseInt(item.attr("data-categoryID")),
								CodeId: parseInt(item.attr("data-tagID")),
								CodeText: item.attr("data-tagID"),
                                SchemaName: item.attr("data-schema")
                            },
                            Element: item,
                            DisplayPrefix: displayPrefix,
                            Display: item.attr("data-name"),
                            OnRemove: function () { item.prop("checked", false).trigger("change"); }
                        });
                    });
                    break;
                }
                case "text": {
                    filter.find(".filterTextItem").each(function () {
                        var item = $(this);
                        results.push({
                            Type: "TEXT",
                            Name: filterName,
                            Values: {
                                TextValue: item.find(".value").text().trim()
                            },
                            Element: item,
                            DisplayPrefix: displayPrefix,
                            Display: item.find(".value").text(),
                            OnRemove: function () { item.remove(); }
                        });
                    });
                    break;
                }
                case "framework": {
                    filter.find(".frameworkSelectedItems .frameworkFilterItem").each(function () {
                        var item = $(this);
                        var r = {
                            Type: "FRAMEWORK",
                            Name: filterName,
                            Values: JSON.parse(item.find(".selectors").text().trim()),
                            Element: item,
                            DisplayPrefix: displayPrefix,
                            Display: item.find(".display").text().trim(),
                            OnRemove: function () { item.remove(); }
                        };
                        //console.log(r);
                        results.push(r);
                    });
                    break;
                }
                default: break;
            }
        });
        if (map.usingMapSearch) {
            results.push({
                Type: "MAP",
                Name: "bounds",
                Values: map.getBounds(),
                Element: $("#mapBox"),
                DisplayPrefix: "Map",
                Display: "Visible map area",
                OnRemove: function () { map.usingMapSearch = false; }
            });
        }
        if (map.usingLocationSearch) {
            results.push({
                Type: "MAP",
                Name: "bounds",
                Values: { north: map.selectedLocation.Bounds.North, east: map.selectedLocation.Bounds.East, south: map.selectedLocation.Bounds.South, west: map.selectedLocation.Bounds.West },
                Element: $("#mapBox"),
                DisplayPrefix: "Map",
                Display: "Location: " + map.selectedLocation.LocationFormatted,
                OnRemove: function () { map.usingLocationSearch = false; }
            });
        }
        for (var i in filters.customFilters) {
            results.push(filters.customFilters[i]);
        }
        return results;
    }
    //

    //Render gray tags for selected filters
    filters.renderSelectedFilters = function () {
        var items = filters.readSelectedFilters();
        var box = $("#searchSelectedTags");
        var list = $("#searchSelectedTagsList");
        var template = $("#template_selectedtag").html();

        box.attr("data-totalTags", items.length);
        list.html("");
        for (var i in items) {
            (function (item) {
                var tag = $(autoFillTemplate(template, items[i])).appendTo(list);
                tag.find(".closeButton").on("click", function () {
                    item.OnRemove();
                    tag.remove();
                    //Slight delay to prevent filters from re-rendering before all are cleared
                    setTimeout(function () {
                        filters.setSortOrder();
                        filters.updateFilters();
                    }, 10);
                });
            })(items[i]);
        }
    }
    //

    //Get filters for search query
    filters.getFiltersForQuery = function () {
        var items = filters.readSelectedFilters();
        var results = [];
        for (var i in items) {
            (function (item) {
                results.push({
                    Type: item.Type,
                    Name: item.Name,
                    Values: item.Values
                });
            })(items[i]);
        }

        return results;
    }
    //

    //Write text filter
    filters.addTextFilterItem = function (filter) {
        var textBox = filter.find(".filterText");
        var value = textBox.val().trim();
        var itemsBox = filter.find(".filterTextItems");
        var template = $("#template_textfilter_item").html();
        //If the value is long enough and not a duplicate, add it
        if (value.length >= 3 && filters.readTextFilterItems(filter).indexOf(value) == -1) {
            var item = $(template.replace(/{value}/g, value)).appendTo(itemsBox);
            textBox.val("");
            //Setup remove button functionality
            item.find(".removeButton").on("click", function () {
                filters.removeTextFilterItem(item);
            });
            //Update filters and return the new item
            filters.updateFilters();
            return item;
        }
        return null;
    }
    //

    //Read text filter
    filters.readTextFilterItems = function (filter) {
        var items = filter.find(".filterTextItems .filterTextItem");
        var result = [];
        items.each(function () {
            result.push($(this).find(".value").html());
        });
        return result;
    }
    //

    //Remove text filter
    filters.removeTextFilterItem = function (item) {
        item.remove();
        filters.updateFilters();
    }
    //

    //Do a microsearch
    filters.doMicroSearch = function (filter, resetPaging) {
        if (resetPaging) {
            filter.attr("data-pageNumber", "1");
        }
        var microQuery = {
            Filters: [
                { Name: "Keywords", Value: filter.find(".frameworkTextBox").val().trim() },
                { Name: "HeaderId", value: parseInt(filter.find(".frameworkTopLevel option:selected").attr("value")) }
            ],
            IncludeAllCodes: filter.attr("data-includeAllCodes") == "true",
            PageNumber: filter.attr("data-pageNumber"),
            PageSize: filter.attr("data-pageSize"),
            SearchType: filter.attr("data-microSearchType"),
            ParentSearchType: filter.attr("data-searchType"),
            PageContext: "MainSiteSearch"
        };
        doAjax("Search", "DoMicroSearch", microQuery, filters.handleMicroSearchResults, null, { filter: filter });
    }
    //

    //Handle the results of a microsearch
    filters.handleMicroSearchResults = function (message, extra) {
        //console.log(message, extra);
        //Get variables
        var filter = extra.filter;
        var statusBox = filter.find(".frameworkStatusBox");
        var resultsBox = filter.find(".frameworkResultsBox");
        var pagingBox = filter.find(".frameworkPagingBox");
        var currentPage = parseInt(filter.attr("data-pageNumber"));
        var pageSize = parseInt(filter.attr("data-pageSize"));
        var totalPages = Math.ceil(message.extra / pageSize);
        var pageSkips = [1, 5, 10, 15, 20, 25, 50, 75, 100, totalPages];
        var itemTemplate = $("#template_frameworkfilter_item").html();
        var pagingTemplate = $("#template_frameworkfilter_pagingbutton").html();
        var overrideCategoryID = parseInt(filter.attr("data-frameworkID"));

        //Clear old results
        statusBox.html("Found " + message.extra + " Results");
        resultsBox.html("");
        pagingBox.html("");

        //Handle error
        if (!message.valid) {
            statusBox.html(message.status);
            return;
        }

        //Render new results with a closure
        for (var i in message.data) {
            (function (data) {
                data.Selectors.CategoryId = overrideCategoryID; //Hack
                var item = filters.renderMicroItem(resultsBox, data.Name, data.Selectors);
                item.on("click", function () {
                    filters.addMicroFilter(filter, data.Name, data.Selectors);
                });
            })(message.data[i]);
        }

        //Render paging with a closure
        for (var i = 1; i <= totalPages; i++) {
            if (pageSkips.indexOf(i) > -1 || (i >= currentPage - 2 && i <= currentPage + 2)) {
                (function (page) {
                    var pageButton = $(pagingTemplate.replace(/{Display}/g, page).replace(/{current}/g, currentPage == i ? "current" : "")).appendTo(pagingBox);
                    pageButton.on("click", function () {
                        filter.attr("data-pageNumber", page);
                        filters.doMicroSearch(filter, false);
                    });
                })(i);
            }
        }
    }
    //

    //Render a microsearch item
    filters.renderMicroItem = function (targetBox, name, selectors) {
        var itemTemplate = $("#template_frameworkfilter_item").html();
        var newItem = $(itemTemplate.replace(/{Selectors}/g, JSON.stringify(selectors)).replace(/{Display}/g, name)).appendTo(targetBox);
        return newItem;
    }
    //

    //Select a microsearch item
    filters.addMicroFilter = function (filter, name, selectors) {
        var selectedItemsBox = filter.find(".frameworkSelectedItems");
        var selectorsString = JSON.stringify(selectors);
        var found = false;
        //console.log(123, selectorsString);
        //Prevent duplicates
        selectedItemsBox.find(".frameworkFilterItem").each(function () {
            if ($(this).find(".selectors").text().trim() == selectorsString) {
                found = true;
            }
        });
        if (found) {
            return;
        }
        //Add the item
        var selectedItem = filters.renderMicroItem(selectedItemsBox, name, selectors);
        selectedItem.on("click", function () {
            selectedItem.remove();
            filters.updateFilters();
        });
        //Update filters
        filters.updateFilters();
        return selectedItem;
    }
    //

    //Add a custom filter
    filters.addCustomFilter = function (name, values, tagTitle, tagText, onRemove) {
        console.log(name, values, tagTitle, tagText);
        //Prevent duplicates
        var stringifiedValues = JSON.stringify(values);
        for (var i in filters.customFilters) {
            if (JSON.stringify(filters.customFilters[i].Values) == stringifiedValues) {
                return;
            }
        }
        //Add the filter
        filters.customFilters.push({
            Type: "CUSTOM",
            Name: name,
            Values: values,
            DisplayPrefix: tagTitle,
            Display: tagText,
            OnRemove: function () { if (onRemove) { onRemove(); } filters.removeCustomFilter(stringifiedValues); }
        });
        filters.updateFilters();
    }
    //

    //Remove a custom filter by its query values as stringified JSON
    filters.removeCustomFilter = function (stringifiedValues) {
        var replacement = [];
        for (var i in filters.customFilters) {
            if (JSON.stringify(filters.customFilters[i].Values) != stringifiedValues) {
                replacement.push(filters.customFilters[i]);
            }
        }
        filters.customFilters = replacement;
        filters.updateFilters();
    }
    //

    //Clear all filters
    filters.clearAllFilters = function () {
        $("#searchSelectedTagsList .selectedTag .closeButton").trigger("click");
    }
    //
</script>
<script type="text/javascript">
    /* Map Methods */
    var map = {
        markerID: 0,
        markers: [],
        box: null,
        googleMap: null,
        defaultCenter: { lat: 37.0902, lng: -95.7129 },
        usingMapSearch: false,
        usingLocationSearch: false,
        selectedLocation: null,
        locationTimer: 0,
        locationPrevious: ""
    };

    //Initial setup
    function setupMapBox() {
        map.box = $("#mapBox #googleMap");
        map.googleMap = new google.maps.Map(map.box[0], { center: map.defaultCenter, zoom: 4 });
        map.wakeMap();
        global.window.on("viewModeChanged", function () {
            //map.wakeMap();
        });

        $("#btnMapSearch").on("click", function () {
            map.usingMapSearch = true;
            map.usingLocationSearch = false;
            filters.updateFilters();
        });

        $("#btnCloseMap").on("click", function () {
            map.usingMapSearch = false;
            filters.updateFilters();
            $("#viewModes [data-viewmode=list]").trigger("click");
        });

        $("#txtLocationSearch").on("focus", function () {
            map.setLocationStatus("Enter a location...", true);
        }).on("keyup change", function () {
            map.resetLocationCountdown();
        });

        $("#btnCloseLocationSearchResults").on("click", function () {
            map.setLocationStatus(null, false);
        });
    }
    //

    //Wake up map after being hidden
    map.wakeMap = function () {
        map.moveMap(map.defaultCenter.lat, map.defaultCenter.lng, 4);
    }
    //

    //Move the map
    map.moveMap = function (latitude, longitude, zoom) {
        google.maps.event.trigger(map.googleMap, "resize");
        map.googleMap.setCenter({ lat: latitude, lng: longitude });
        if (zoom) {
            map.googleMap.setZoom(Math.floor(zoom));
        }
    }
    //

    //Add a map marker
    map.addMarker = function (resultID, latitude, longitude) {
        var marker = new google.maps.Marker({
            map: map.googleMap,
            position: { lat: latitude, lng: longitude },
            customInfo: { Id: map.markerID }
        });
        (function (markerID, resultID) {
            marker.addListener("click", function () {
                map.focusMapAndResult(markerID, resultID);
            });
        })(map.markerID, resultID);
        map.markers.push(marker);
        map.markerID++;
        return marker;
    }
    //

    //Clear map markers
    map.clearMarkers = function () {
        for (var i in map.markers) {
            map.markers[i].setMap(null);
        }
    }
    //

    //Focus the map and highlight a result
    map.focusMapAndResult = function (markerID, resultID) {
        $("#viewModes [data-viewmode='map']").trigger("click");
        for (var i in map.markers) {
            if (map.markers[i].customInfo.Id == markerID) {
                map.moveMap(map.markers[i].position.lat(), map.markers[i].position.lng(), 7);
            }
        }
        $(".result[data-resultID=" + resultID + "]").addClass("highlighted")[0].scrollIntoView();
        setTimeout(function () {
            $(".result[data-resultID=" + resultID + "]").removeClass("highlighted");
        }, 500);
    }
    //

    //Get map area
    map.getBounds = function () {
        return map.googleMap.getBounds().toJSON();
    }
    //

    //Reset countdown for location/geocoordinates search
    map.resetLocationCountdown = function () {
        clearTimeout(map.locationTimer);
        map.locationTimer = setTimeout(function () {
            map.doLocationSearch();
        }, 1000);
    }
    //

    //Do a location search
    map.doLocationSearch = function () {
        var txtBox = $("#txtLocationSearch");
        var value = txtBox.val().trim().replace(/"/g, "");
        //Prevent duplicate
        if (value == map.locationPrevious) {
            return;
        }
        map.locationPrevious = value;
        //Do the search
        map.setLocationStatus("Searching...", true);
        doAjax("Search", "FindLocations", { text: value }, map.handleLocationResults, null, null);
    }
    //

    //Handle location search results
    map.handleLocationResults = function (message, extra) {
        var resultsList = $("#locationSearchResultsList");
        var resultTemplate = $("#template_locationsearch_result").html();
        if (message.valid) {
            //Re-render results
            map.setLocationStatus("Select a result to focus the map", true);
            resultsList.html("");
            for (var i in message.data) {
                (function (item) {
                    var result = $(autoFillTemplate(resultTemplate, item)).appendTo(resultsList);
                    result.find("[data-action=focusmap]").on("click", function () {
                        map.fitToBounds(item.Bounds.North, item.Bounds.East, item.Bounds.South, item.Bounds.West);
                        map.setLocationStatus(null, false);
                    });
                    result.find("[data-action=searchhere]").on("click", function () {
                        map.fitToBounds(item.Bounds.North, item.Bounds.East, item.Bounds.South, item.Bounds.West);
                        map.setLocationStatus(null, false);
                        map.usingMapSearch = false;
                        map.usingLocationSearch = true;
                        map.selectedLocation = item;
                        filters.updateFilters();
                    });
                })(message.data[i]);
            }
        }
        else {
            map.setLocationStatus(message.status, true);
        }
    }
    //
    //Set location search status
    map.setLocationStatus = function (message, active) {
        if (message) {
            $("#locationSearchStatus").html(message);
        }
        $("#locationSearchResultsBox").attr("data-active", active ? true : false);
    }
    //

    //Focus the map on a set of boundaries
    map.fitToBounds = function (north, east, south, west) {
        map.googleMap.fitBounds({
            north: north,
            east: east,
            south: south,
            west: west
        });
    }
    //
</script>

<link rel="stylesheet" href="~/Content/search.css" type="text/css" />

@*<link rel="stylesheet" href="~/Content/SiteColors.css" type="text/css" />*@
@*/* added sitecolor and search classes*/*@
@if ( haveWidget )
{
    //widget = WidgetServices.GetCurrentWidget();
    if ( widget != null && widget.Id > 0 )
    {
        if ( widget.WidgetStylesUrl != null && widget.WidgetStylesUrl.Length > 5 )
        {
            <link rel="Stylesheet" type="text/css" href="@widget.WidgetStylesUrl" />
        }
        else
        if ( !string.IsNullOrEmpty( widget.CustomStylesURL ) && widget.CustomStylesURL.Length > 5 )
        {
            <link rel="Stylesheet" type="text/css" href="@widget.CustomStylesURL" />
        }
    }
}
<style type="text/css">
    /* Big Stuff */
    #content { padding: 0; background-color: #FFF; transition: none; }
    #searchPagingButtons { padding: 10px; text-align: center; }
        #searchPagingButtons button { font-size: 18px; padding: 10px 20px; }
    .noMoreResults { font-size: 20px; font-style: italic; padding: 10px; background-color: rgba(0,0,0,0.1); }
</style>

<style type="text/css">

#searchMainInputs { background-image: url('@Url.Content( "~/images/Common/wallpaper_industries_green_30deg.png" )') }
.result.credential [data-credentialType*=adge] { background-image: url('@Url.Content( "~/images/icons/flat_badge.png" )'); }
.result.credential [data-credentialType*=ertificate] { background-image: url('@Url.Content( "~/images/icons/flat_certificate.png" )'); }
.result.credential [data-credentialType*=ertification] { background-image: url('@Url.Content( "~/images/icons/flat_certification.png" )'); }
.result.credential [data-credentialType*=egree], .result.credential [data-credentialType*=master], .result.credential [data-credentialType*=octorate] { background-image: url('@Url.Content( "~/images/icons/flat_degree.png" )'); }

.result.credential [data-credentialType*=iploma], .result.credential [data-credentialType*=eneraleducationdev] { background-image: url('@Url.Content( "~/images/icons/flat_diploma.png" )'); }
.result.credential [data-credentialType*=icense] { background-image: url('@Url.Content( "~/images/icons/flat_license.png" )'); }
.result.credential [data-credentialType*=pprentice] { background-image: url('@Url.Content( "~/images/icons/flat_apprentice.png" )'); }
.result.credential [data-credentialType*=ilitary] { background-image: url('@Url.Content( "~/images/icons/flat_military.png" )'); }
.result.credential [data-credentialType*=icro] { background-image: url('@Url.Content( "~/images/icons/flat_microcredential.png" )'); }
.result.credential [data-credentialType*=uality] { background-image: url('@Url.Content( "~/images/icons/flat_quality.png" )'); }
.result.credential .resultImageBox .resultImage .credentialBadgeIcon { background-image: url('@Url.Content( "~/images/icons/flat_badge.png" )'); }

.tagSetButton[data-name=connections] { background-image: url('@Url.Content( "~/images/icons/cti_icon_connections.png" )'); }
.tagSetButton[data-name*=own] { background-image: url('@Url.Content( "~/images/icons/cti_icon_owns.png" )'); }
.tagSetButton[data-name*=quality], .tagSetButton[data-name*=orgQuality] { background-image: url('@Url.Content( "~/images/icons/cti_icon_quality.png" )'); }
.tagSetButton[data-name=level] { background-image: url('@Url.Content( "~/images/icons/cti_icon_levels.png" )'); }
.tagSetButton[data-name=occupations] { background-image: url('@Url.Content( "~/images/icons/cti_icon_occupations.png" )'); }
.tagSetButton[data-name=industries] { background-image: url('@Url.Content( "~/images/icons/cti_icon_industries.png" )'); }
.tagSetButton[data-name=subjects] { background-image: url('@Url.Content( "~/images/icons/cti_icon_subjects.png" )'); }
.tagSetButton[data-name=competencies] { background-image: url('@Url.Content( "~/images/icons/cti_icon_competencies.png" )'); }
.tagSetButton[data-name=time] { background-image: url('@Url.Content( "~/images/icons/cti_icon_duration.png" )'); }
.tagSetButton[data-name=cost] { background-image: url('@Url.Content( "~/images/icons/cti_icon_cost.png" )'); }
.tagSetButton[data-name=organizationtype] { background-image: url('@Url.Content( "~/images/icons/cti_icon_organizationtype.png" )'); }
.tagSetButton[data-name=organizationsectortype] { background-image: url('@Url.Content( "~/images/icons/cti_icon_organizationsector.png" )'); }
.tagSetButton[data-name=owned_by] { background-image: url('@Url.Content( "~/images/icons/cti_icon_owns.png" )'); }
.tagSetButton[data-name=offered_by] { background-image: url('@Url.Content( "~/images/icons/cti_icon_offers.png" )'); }
.tagSetButton[data-name=org_service_type] { background-image: url('@Url.Content( "~/images/icons/cti_icon_servicetype.png" )'); }
.tagSetButton[data-name=assessment_use_types] { background-image: url('@Url.Content( "~/images/icons/cti_icon_assessmentusetype.png" )'); }
.tagSetButton[data-name=assessment_method_types] { background-image: url('@Url.Content( "~/images/icons/cti_icon_assessmentmethodtype.png" )'); }
.tagSetButton[data-name=scoring_methods] { background-image: url('@Url.Content( "~/images/icons/cti_icon_scoringmethodtype.png" )'); }
.tagSetButton[data-name=deliver_methods] { background-image: url('@Url.Content( "~/images/icons/cti_icon_deliverymethodtype.png" )'); }
.tagSetButton[data-name=instructionalprogramtype] { background-image: url('@Url.Content( "~/images/icons/cti_icon_cip.png" )'); }
.tagSetButton[data-name=learning_methods] { background-image: url('@Url.Content( "~/images/icons/cti_icon_learningmethodtype.png" )'); }
</style>

<style type="text/css">
    #waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }

    #wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }

    #waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }

    #waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }

    #downloadResults { margin-right: 5px; }

    #downloadSpinner { padding: 5px; }

    /* Reports */
    .reportsBox { margin: 2.5px 0; display: none; }
        .reportsBox .reportsStatus { padding: 2.5px 5px; font-size: 12px; text-align: center; }
        .reportsBox .reportsProgressWrapper { width: 100%; background-color: #555; padding: 1px; height: 20px; border-radius: 4px; }
            .reportsBox .reportsProgressWrapper .reportsProgressBar { width: 0%; background-color: #3D4; height: 100%; transition: width 0.2s; border-radius: 4px; }

    #resultsSettings button { max-height: 40px; }
</style>


<div id="searchHeaderSection" class="row">

    <div id="searchMainInputs">
        <div class="searchHeaderItem" id="searchTypeBox">

            <div class="searchHeaderItemTitle">Search</div>
            <div class="searchHeaderItemContent">
                <select id="ddlSearchType" class="fullHeight">
                    <option value="credential" @( searchType == "credential" ? "selected=\"selected\"" : "" )>Credentials</option>
                    <option value="organization" @( searchType == "organization" ? "selected=\"selected\"" : "" )>Organizations</option>
                    <option value="assessment" @( searchType == "assessment" ? "selected=\"selected\"" : "" )>Assessments</option>
                    <option value="learningopportunity" @( searchType == "learningopportunity" ? "selected=\"selected\"" : "" )>Learning Opportunities</option>
                </select>
            </div>
        </div>
        <div class="searchHeaderItem" id="searchKeywordBox">
            <div class="searchHeaderItemTitle">For</div>
            <div class="searchHeaderItemContent">
                <input type="text" id="txtSearchKeyword" placeholder="Start typing to search..." class="fullHeight hasAutoComplete" data-autocompletecontext="mainsearch" />
                <button id="btnClearKeywords" class="closeButton clearCloseButton"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="searchHeaderItem" id="searchButtonsBox">
            <div class="searchHeaderItemTitle"></div>
            <div class="searchHeaderItemContent" id="searchButtons">
                <button id="btnDoSearch" class="searchButton fullHeight" title="Search"><i class="fa fa-search"></i><span class="buttonText">Search</span></button>
                <button id="btnToggleFilters" class="filterButton fullHeight" title="Filters"><i class="fa fa-plus"></i><span class="buttonText">Filters</span></button>
                <button id="btnResetSearch" class="redButton resetButton fullHeight" title="Reset"><i class="fa fa-sync"></i></button>
            </div>
        </div>
    </div>

    <div id="searchMainFilters" class="hoverFilterButton">
        <div id="mainFiltersHeader">
            <div class="label">Add Filters</div>
            <button class="closeButton filterCloseButton whiteGhost borderedGhost" id="btnCloseMainFilters"><i class="fas fa-times"></i></button>
        </div>
        <div id="mainFiltersContent">
            <div id="filtersList">
                @* Credential *@
				<div class="filterList" data-searchType="credential">
					@if ( !widget.WidgetFilters.CredFilters.HideCredentialTypes )
					{
						@RenderFilterListItem( "credential", "CredentialTypes", "Credential Types" );
					}
					@if ( !widget.WidgetFilters.CredFilters.HideAudienceLevelTypes )
					{
						@RenderFilterListItem( "credential", "AudienceLevelTypes", "Audience Level Types" )
					}
					@if ( credAudienceTypes.HasItems() && !widget.WidgetFilters.CredFilters.HideApplicableAudienceTypes )
					{
						@RenderFilterListItem( "credential", "AudienceTypes", "Applicable Audience Types" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideCredentialConnections )
					{
						@RenderFilterListItem( "credential", "CredentialConnections", "Credential Connections" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideCompetencies )
					{
						@RenderFilterListItem( "credential", "Competencies", "Competencies" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideSubjectArea )
					{
						@RenderFilterListItem( "credential", "Subjects", "Subject Areas" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideOccupations )
					{
						@RenderFilterListItem( "credential", "Occupations", "Occupations" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideIndustries )
					{
						@RenderFilterListItem( "credential", "Industries", "Industries" )
					}
					@if ( !widget.WidgetFilters.CredFilters.HideQualityAssuarance )
					{
						@RenderFilterListItem( "credential", "QualityAssurance", "Quality Assurance" )
					}
					@if ( credLanguages.HasItems() && credLanguages.Items.Count() > 1 )
					{
						@RenderFilterListItem( "credential", "Languages", "Languages" )
					}
					@if ( widget.Id <= 0 )
					{
						@RenderFilterListItem( "credential", "Reports", "Other Filters" )
					}
				</div>

                @* Organization *@
                <div class="filterList" data-searchType="organization">
                    @RenderFilterListItem( "organization", "OrganizationTypes", "Organization Types" )
                    @RenderFilterListItem( "organization", "Industries", "Industries" )
                    @RenderFilterListItem( "organization", "ServiceTypes", "Service Types" )
                    @RenderFilterListItem( "organization", "SectorTypes", "Sector Types" )
                    @*@RenderFilterListItem( "organization", "ClaimTypes", "Claim Types" )*@
                    @RenderFilterListItem( "organization", "QualityAssurance", "Quality Assurance" )
                    @RenderFilterListItem( "organization", "QAPerformed", "Quality Assurance Performed" )
                    @RenderFilterListItem( "organization", "Reports", "Other Filters" )

                </div>

                @* Assessment *@
				<div class="filterList" data-searchType="assessment">
					@RenderFilterListItem( "assessment", "Competencies", "Competencies" )
					@RenderFilterListItem( "assessment", "Subjects", "Subject Areas" )
					@RenderFilterListItem( "assessment", "AssessmentConnections", "Assessment Connections", asmtConnections )
					@RenderFilterListItem( "assessment", "AssessmentMethodTypes", "Assessment Method Types" )
					@RenderFilterListItem( "assessment", "AssessmentUseTypes", "Assessment Use Types" )
					@RenderFilterListItem( "assessment", "ScoringMethodTypes", "Scoring Method Types" )
					@RenderFilterListItem( "assessment", "DeliveryMethodTypes", "Delivery Method Types" )
					@RenderFilterListItem( "assessment", "InstructionalProgramType", "Instructional Program Classification" )
					@if ( asmtAudienceTypes.HasItems() )
					{
						@RenderFilterListItem( "assessment", "AudienceTypes", "Applicable Audience Types" )
					}
					@RenderFilterListItem( "assessment", "QualityAssurance", "Quality Assurance", asmtQA )
					@if ( asmtLanguages.HasItems() && asmtLanguages.Items.Count() > 1 )
					{
						@RenderFilterListItem( "assessment", "Languages", "Languages" )
					}
					@RenderFilterListItem( "assessment", "Reports", "Other Filters" )
				</div>

                @* Learning Opportunity *@
				<div class="filterList" data-searchType="learningopportunity">
					@RenderFilterListItem( "learningopportunity", "Competencies", "Competencies" )
					@RenderFilterListItem( "learningopportunity", "Subjects", "Subject Areas" )
					@RenderFilterListItem( "learningopportunity", "LearningOpportunityConnections", "Learning Opportunity Connections", loppConnections )
					@RenderFilterListItem( "learningopportunity", "LearningMethodTypes", "Learning Method Types" )
					@RenderFilterListItem( "learningopportunity", "DeliveryMethodTypes", "Delivery Method Types" )
					@RenderFilterListItem( "learningopportunity", "InstructionalProgramType", "Instructional Program Classification" )
					@if ( loppAudienceTypes.HasItems() )
					{
						@RenderFilterListItem( "learningopportunity", "AudienceTypes", "Applicable Audience Types" )
					}
					@RenderFilterListItem( "learningopportunity", "QualityAssurance", "Quality Assurance", loppQA )
					@if ( loppLanguages.HasItems() && loppLanguages.Items.Count() > 1 )
					{
						@RenderFilterListItem( "learningopportunity", "Languages", "Languages" )
					}
					@RenderFilterListItem( "learningopportunity", "Reports", "Other Filters" )
				</div>

            </div>
            <div id="filters">
                @* Credential *@
                @RenderCodeFilter( "credential", "CredentialTypes", "", "Select the credential type(s).", "Credential Type", credentialTypes, true, false, new List<string>() { "ceterms:QualityAssuranceCredential", "ceterms:DigitalBadge", "ceterms:OpenBadge" }, new Dictionary<string, List<string>>() { { "ceterms:Badge", new List<string>() { "ceterms:DigitalBadge", "ceterms:OpenBadge" } } } )
                @RenderCodeFilter( "credential", "AudienceLevelTypes", "", "Select the educational level(s).", "Audience Level Type", enumServices.GetAudienceLevel( workIT.Models.Common.EnumerationType.MULTI_SELECT, false ), true )

                @RenderCodeFilter( "credential", "AudienceTypes", "", "Select the applicable audience types that are the target of credentials. Note that many credentials will not have specific audience types.", "Audience Type", credAudienceTypes, true )

                @RenderCodeFilter( "credential", "CredentialConnections", "", "Select the connection type(s) to filter credentials:", "Credential Connection", enumServices.GetCredentialConnectionsFilters( workIT.Models.Common.EnumerationType.MULTI_SELECT, false ), true, true )
                @RenderTextFilter( "credential", "Competencies", "Competencies", "Enter a term(s) to show credentials with relevant competencies.", "Competency" )
                @RenderTextFilter( "credential", "Subjects", "Subject Areas", "Enter a term(s) to show credentials with relevant subjects.", "Subject" )
                @if ( workIT.Utilities.UtilityManager.GetAppKeyValue( "usingElasticCredentialSearch", false ) )
                {
                    @RenderTextFilter( "credential", "Occupations", "Occupations", "Find and select the occupation(s) to filter relevant credentials.", "Occupation" )
                }
                else
                {
                    @RenderFrameworkFilter( "credential", "Occupations", "OccupationSearch", "", "Find and select the occupation(s) to filter relevant credentials.", "Occupation", "Find Occupations", "Selected Occupations", EnumerationServices.SOC_Categories_Enumeration( false ), "Select an Occupation Category" )
                }
                @if ( workIT.Utilities.UtilityManager.GetAppKeyValue( "usingElasticCredentialSearch", false ) )
                {
                    @RenderTextFilter( "credential", "Industries", "Industries", "Find and select the industries to filter relevant credentials.", "Industry" )
                }
                else
                {
                    @RenderFrameworkFilter( "credential", "Industries", "IndustrySearch", "", "Find and select industries to filter relevant credentials.", "Industry", "Find Industries", "Selected Industries", EnumerationServices.NAICS_CategoriesInUse_Enumeration( 1 ), "Select an Industry Category" )
                }

                @RenderCodeFilter( "credential", "QualityAssurance", "", "Select the type(s) of quality assurance to filter relevant credentials.", "Quality Assurance", enumServices.GetEntityAgentQAActions( EnumerationType.MULTI_SELECT, 1, false ) )
				@RenderCodeFilter( "credential", "Languages", "", "Select one or more languages to display credentials for those languages", "Languages", credLanguages )
                @RenderCodeFilter( "credential", "Reports", "", "Select one of the 'Other' filters that are available. Note these filters are independent (ORs). For example selecting 'Has Cost Profile(s)' and 'Has Financial Aid' will show assessments that have cost profile(s) or financial assistance.", "Report", enumServices.GetEnumeration( "CredentialReports", EnumerationType.SINGLE_SELECT, false ), true )

                @* Organization *@
                @RenderCodeFilter( "organization", "OrganizationTypes", "", "Select the organization type(s)", "Organization Type", enumServices.GetOrganizationType( workIT.Models.Common.EnumerationType.MULTI_SELECT, false ), true )
                @if ( workIT.Utilities.UtilityManager.GetAppKeyValue( "usingElasticOrganizationSearch", false ) )
                {
                    @RenderTextFilter( "organization", "Industries", "Industries", "Find and select the industries to filter relevant credentials.", "Industry" )
                }
                else
                {
                    @RenderFrameworkFilter( "organization", "Industries", "IndustrySearch", "", "Find and select industries to filter relevant organizations.", "Industry", "Find Industries", "Selected Industries", EnumerationServices.NAICS_CategoriesInUse_Enumeration( 2 ), "Select an Industry Category" )
                }
                @RenderCodeFilter( "organization", "ServiceTypes", "", "Select a service(s) offered by an organization.", "Service Type", enumServices.GetOrganizationServices( EnumerationType.MULTI_SELECT, false ), true )
                @RenderCodeFilter( "organization", "SectorTypes", "", "Select the type of sector for an organization.", "Sector Type", enumServices.GetEnumeration( "orgSectorType", EnumerationType.SINGLE_SELECT, false ) )
                @RenderCodeFilter( "organization", "QualityAssurance", "", "Select the type(s) of quality assurance to filter relevant organizations.", "Quality Assurance", enumServices.GetEntityAgentQAActions( EnumerationType.MULTI_SELECT, 2, false ) )
                @RenderCodeFilter( "organization", "QAPerformed", "", "Select one or more types of quality assurance to display credentials that have performed those types of assurance.", "Quality Assurance Performed", enumServices.GetEntityAgentQAActions( EnumerationType.MULTI_SELECT, 2, false,true ) )
                @RenderCodeFilter( "organization", "Reports", "", "Select one of the 'Other' filters that are available. Note these filters are independent (ORs). For example selecting 'Has Condition Manifest' and 'Has Cost Manifest' will show organizations that have condition manifest(s) or cost manifest(s).", "Report", enumServices.GetEnumeration( "OrganizationReports", EnumerationType.SINGLE_SELECT, false ), true )
                @RenderCodeFilter( "organization", "ClaimTypes", "", "Select the type of claim for an organization.", "Claim Type", enumServices.GetEnumeration( "claimType", EnumerationType.SINGLE_SELECT, false ) )

                @* Assessment *@
                @RenderTextFilter( "assessment", "Competencies", "Competencies", "Enter a term(s) to show assessments with relevant competencies.", "Competency" )
                @RenderTextFilter( "assessment", "Subjects", "Subject Areas", "Enter a term(s) to show assessments with relevant subjects.", "Subject" )
                @RenderCodeFilter( "assessment", "AssessmentConnections", "", "Select the connection type(s) to filter Assessments:", "Assessment Connection", asmtConnections, true, true )
                @RenderCodeFilter( "assessment", "AssessmentMethodTypes", "", "Select the assessment method(s) type.", "Assessment Method Type", enumServices.GetEnumeration( "assessmentMethodType", EnumerationType.CUSTOM, false, false ) )
                @RenderCodeFilter( "assessment", "AssessmentUseTypes", "", "Select the type(s) of assessment uses.", "Assessment Use Type", enumServices.GetEnumeration( "assessmentUse", EnumerationType.MULTI_SELECT, false, false ) )
                @RenderCodeFilter( "assessment", "ScoringMethodTypes", "", "Select the type of scoring method(s).", "Scoring Method Type", enumServices.GetEnumerationForRadioButtons( "scoringMethod", -1, false ) )
                @RenderCodeFilter( "assessment", "DeliveryMethodTypes", "", "Select the type of delivery method(s).", "Delivery Method", asmtDeliveryMethods )
                @if ( workIT.Utilities.UtilityManager.GetAppKeyValue( "usingElasticAssessmentSearch", false ) )
                {
                    @RenderTextFilter( "assessment", "InstructionalProgramType", "Classifications", "Find and select the classification(s) of instructional programs to filter assessments.", "InstructionalProgramType" )
                }
                else
                {
                    @RenderFrameworkFilter( "assessment", "InstructionalProgramType", "CIPSearch", "", "Find and select the classification(s) of instructional programs to filter assessments.", "Instructional Program Classification", "Find Classifications", "Selected Classifications", EnumerationServices.CIPS_CategoriesInUse_Enumeration( 3 ), "Select an Instructional Program Classification Category" )
                }
                @RenderCodeFilter( "assessment", "AudienceTypes", "", "Select the applicable audience types that are the target of assessments. Note that many assessments will not have specific audience types.", "Audience Type", asmtAudienceTypes, true )
                @RenderCodeFilter( "assessment", "QualityAssurance", "", "Select the type(s) of quality assurance to filter relevant assessments.", "Quality Assurance", asmtQA )
				@RenderCodeFilter( "assessment", "Languages", "", "Select one or more languages to display assessments for those languages", "Languages", asmtLanguages )
                @RenderCodeFilter( "assessment", "Reports", "", "Select one of the 'Other' filters that are available. Note these filters are independent (ORs). For example selecting 'Has Cost Profile(s)' and 'Has Financial Aid' will show assessments that have cost profile(s) or financial assistance.", "Report", enumServices.GetEnumeration( "AssessmentReports", EnumerationType.SINGLE_SELECT, false ), true )

                @* Learning Opportunity *@
                @RenderTextFilter( "learningopportunity", "Competencies", "Competencies", "Enter a term(s) to show learning opportunities with relevant competencies.", "Competency" )
                @RenderTextFilter( "learningopportunity", "Subjects", "Subject Areas", "Enter a term(s) to show learning opportunities with relevant subjects.", "Subject" )
                @RenderCodeFilter( "learningopportunity", "LearningOpportunityConnections", "", "Select the connection type(s) to filter Learning Opportunity:", "Learning Opportunity Connection", loppConnections, true, true )
                @RenderCodeFilter( "learningopportunity", "LearningMethodTypes", "", "Select the type(s) of learning method.", "Learning Method Type", enumServices.GetEnumeration( "learningMethodType", EnumerationType.MULTI_SELECT, false ), true )
                @RenderCodeFilter( "learningopportunity", "DeliveryMethodTypes", "", "Select the type(s) of delivery method(s).", "Delivery Method", loppDeliveryMethods )
                @if ( workIT.Utilities.UtilityManager.GetAppKeyValue( "usingElasticAssessmentSearch", false ) )
                {
                    @RenderTextFilter( "learningopportunity", "InstructionalProgramType", "Classifications", "Find and select the classification(s) of instructional programs to filter assessments.", "InstructionalProgramType" )
                }
                else
                {
                    @RenderFrameworkFilter( "learningopportunity", "InstructionalProgramType", "CIPSearch", "", "Find and select the classification(s) of instructional programs to filter assessments.", "Instructional Program Classification", "Find Classifications", "Selected Classifications", EnumerationServices.CIPS_CategoriesInUse_Enumeration( 3 ), "Select an Instructional Program Classification Category" )
                }
                @RenderCodeFilter( "learningopportunity", "AudienceTypes", "", "Select the applicable audience types that are the target of learning opportunities. Note that many learning opportunities will not have specific audience types.", "Audience Type", loppAudienceTypes, true )
                @RenderCodeFilter( "learningopportunity", "QualityAssurance", "", "Select the type(s) of quality assurance to filter relevant learning opportunities. ", "Quality Assurance", loppQA )
				@RenderCodeFilter( "learningopportunity", "Languages", "", "Select one or more languages to display learningopportunities for those languages", "Languages", loppLanguages )
                @RenderCodeFilter( "learningopportunity", "Reports", "", "Select one of the 'Other' filters that are available. Note these filters are independent (ORs). For example selecting 'Has Cost Profile(s)' and 'Has Financial Aid' will show assessments that have cost profile(s) or financial assistance.", "Report", enumServices.GetEnumeration( "LOPPReports", EnumerationType.SINGLE_SELECT, false ), true )
            </div>
        </div>
    </div>
    <div id="searchSelectedTags" data-totalTags="0">
        <div id="searchSelectedTagsList"></div>
        <button class="redButton" id="btnClearAllTags" title="Clear Filters"><i class="fas fa-times"></i></button>
    </div>
</div>
<div id="searchResultsSection">
    <div id="searchResultsHeader">
        <div id="searchStatus" class="searchStatus">Ready to Search</div>

        <div id="resultsSettings">
            @if ( showReports )
            {
                <span id="downloadSpinner" style="display:none;"><i class="fa fa-spin fa-spinner"></i></span>

                <button id="downloadResults" data-action="downloadReport">Download Report</button>
                <div class="reportsBox">
                    <div class="reportsStatus"></div>
                    <div class="reportsProgressWrapper">
                        <div class="reportsProgressBar"></div>
                    </div>
                </div>
            }
            <button id="toggleDescriptions" class="contentToggleButton">Show/Hide Descriptions</button>
            <button id="toggleGrayButtons" class="contentToggleButton">Show/Hide Gray Buttons</button>
            <select id="ddlSortOrder">
                <option value="newest" selected="selected">Sort by Most Recent</option>
                <option value="relevance">Sort by Relevance</option>
                <option value="alpha">Sort by A-Z</option>
                <option value="oldest">Sort by Least Recent</option>
            </select>
            <div id="viewModes">
                <button class="viewButton @( viewMode == "list" ? "selected" : "" )" data-viewMode="list"><i class="fa fa-fw fa-list"></i><span class="label"> List</span></button>
                <button class="viewButton @( viewMode == "map" ? "selected" : "" )" data-viewMode="map"><i class="fa fa-fw fa-map-marker"></i><span class="label"> Map</span></button>
            </div>
        </div>

    </div>
    <div id="searchResultsContent" class="@( widget.WidgetFilters.SearchFilters.HideDescriptions ? "hideDescriptions" : "" ) @( widget.WidgetFilters.SearchFilters.HideGrayButtons ? "hideGrayButtons" : "" )" data-viewMode="@viewMode" data-searchInProgress="false">
        <div id="searchResultsBox">
            <div id="searchResultsList"></div>
            <div id="searchPagingButtons"></div>
            @*<div id="searchScrollStatus">
                    <div class="searching">Search in progress...</div>
                    <div class="done">No more results to display</div>
                </div>*@
        </div>
        <div id="mapBox">
            <div id="mapHeader">
                <div id="mapGuidance">Drag and resize the map to frame the area to search, or search for a location to reposition the map.</div>
                <div id="mapHeaderInputs">
                    <div id="mapSearchBox">
                        <input type="text" id="txtLocationSearch" placeholder="Find a Place..." />
                        <div id="locationSearchResultsBox" data-active="false">
                            <div id="locationSearchStatus"></div>
                            <button class="closeButton" id="btnCloseLocationSearchResults"><i class="fas fa-times"></i></button>
                            <div id="locationSearchResultsList"></div>
                        </div>
                    </div>
                    <button id="btnMapSearch" class="blueButton" title="Search for results in the entire visible map area."><i class="fa fa-map-o"></i><span class="label"> Search Area</span></button>
                    <button id="btnCloseMap" class="redButton" title="Close Map"><i class="fas fa-times"></i></button>
                </div>
            </div>
            <div id="googleMap" style="max-height: 900px; "></div>
        </div>
    </div>
</div>
<div id="waitWrapper">
    <div id="wait"><i id="waitSpinner" class="fa fa-spin fa-spinner"></i><div id="waitTitle">Working...</div></div>
</div>

@Html.Partial( "~/Views/Compare/_CompareBar.cshtml", "" )
<script src="https://maps.googleapis.com/maps/api/js?key=@googleMapsKey&callback=setupMapBox"></script>

<div id="templates" style="display:none;">
    @* Credential Result *@
    <script type="text/template" id="template_searchresult">
        <div class="result {SearchType}" data-resultID="{RecordId}">
            <div class="resultImageBox">
                <div class="resultImage" data-resultImageUrl="{ResultImageUrl}" data-credentialType="{TypeSchema}">
                    <div class="credentialBadgeIcon credentialOnly" data-hasBadge="{HasBadge}" title="This credential includes a virtual badge as proof of completion."></div>
                </div>
                <div class="credentialTypeLabel credentialOnly">{Type}</div>
                <div class="credentialTypeLabel credentialOnly" data-hasBadge="{HasBadge}">+ Badge Issued</div>
            </div>
            <div class="resultDataBox">
                <div class="resultHeader">
                    @if ( haveWidget )
                    {
                        <a class="resultName" href="@Url.Content( "~/" ){SearchType}/{RecordId}/{UrlTitle}">{Name}</a>
                    }
                    else
                    {
                        <a class="resultName" href="@Url.Content( "~/" ){SearchType}/{RecordId}/{UrlTitle}" target="@searchTarget">{Name}</a>
                    }
                    @if ( isUserSiteStaff )
                    {
                        <div>{ctid}</div>
                    }
                    <a class="resultOwner" data-ownerID="{OwnerId}" href="@Url.Content( "~/organization/" ){OwnerId}" target="@searchTarget">{Owner}</a>
                    <div class="specificLocation organizationOnly" data-location="{Location}">{Location}</div>
                    <div class="resultLocationsBox" data-showLocationsBox="false" data-showLocations="false">
                        <button class="whiteButton mapButton btnAvailableAt"><i class="fa fa-map-marker"></i><span class="label"></span></button>
                        <div class="resultLocations"></div>
                    </div>
                    <button class="actionButton compareButton" data-compareinlist="false" data-id="{RecordId}" onclick="compare.toggleCompareItem({RecordId}, '{SearchType}', '{Name}', this);">
                        <span class="status isInList"><span class="label">Remove </span><i class="fas fa-times" aria-hidden="true"></i></span>
                        <span class="status notInList"><span class="label">Compare </span><i class="fa fa-copy" aria-hidden="true"></i></span>
                        <span class="status working"><i class="fa fa-spin fa-spinner" aria-hidden="true"></i></span>
                    </button>
                </div>

                <div class="resultDescriptionBox">
                    <div class="resultDescription">{Description}</div>
                    <div class="resultDescriptionFade"></div>

                </div>
                <div class="resultTagsBox">
                    <data class="resultTagButtons"></data>
                    <data class="resultTagContent"></data>
                    <div style="text-align: right;font-size: small;color: #97a0a0;">Last Downloaded:{LastUpdated}</div>
                </div>

            </div>
        </div>
    </script>

    @* Gray Tag Box *@
    <script type="text/template" id="template_tag">
        <button class="grayButton tagSetButton" data-RecordId="{RecordId}" data-IsAjaxQuery="{IsAjaxQuery}" data-AjaxQueryName="{AjaxQueryName}" data-Name="{Name}" data-SearchQueryType="{SearchQueryType}" data-CategoryName="{CategoryName}">
            <span class="label">{Display}</span>
            <div class="queryValues">{AjaxQueryValues}</div>
        </button>
    </script>

    @* Tag Item *@
    <script type="text/template" id="template_tagitem">
        <button class="whiteButton tagItemButton">
            <span class="label">{Display}</span>
            <div class="queryValues">{QueryValues}</div>
        </button>
    </script>

    @* Map Marker *@
    <script type="text/template" id="template_mapmarker_button">
        <button class="viewButton mapButton" onclick="map.focusMapAndResult({MarkerId}, {RecordId})"><i class="fa fa-map-marker"></i></button>
    </script>

    @* Text Filter Item *@
    <script type="text/template" id="template_textfilter_item">
        <div class="filterTextItem">
            <div class="value">{value}</div>
            <button class="removeButton whiteGhost borderedGhost"><i class="fas fa-times"></i></button>
        </div>
    </script>

    @* Framework Filter Item *@
    <script type="text/template" id="template_frameworkfilter_item">
        <button class="frameworkFilterItem whiteGhost">
            <div class="selectors" style="display:none">{Selectors}</div>
            <div class="display">{Display}</div>
            <div class="add"><i class="fa fa-caret-right"></i></div>
            <div class="remove"><i class="fas fa-times"></i></div>
        </button>
    </script>

    @* Framework Paging Button *@
    <script type="text/template" id="template_frameworkfilter_pagingbutton">
        <button class="pagingButton whiteGhost borderedGhost {current}">{Display}</button>
    </script>

    @* Selected Filter *@
    <script type="text/template" id="template_selectedtag">
        <div class="selectedTag">
            <span class="prefix">{DisplayPrefix}:</span>
            <span class="display">{Display}</span>
            <button class="closeButton"><i class="fas fa-times"></i></button>
        </div>
    </script>

    @* Map Search Result V2 *@
    <script type="text/template" id="template_locationsearch_result">
        <div class="locationSearchResult">
            <div class="text">
                <div class="title">{TitleFormatted}</div>
                <div class="location">{LocationFormatted}</div>
            </div>
            <div class="buttons">
                <button data-action="focusmap" title="Adjust the map to show this place and the surrounding area.">Focus Map Here</button>
                <button data-action="searchhere" title="Limit results to just this location.">Search Here</button>
            </div>
        </div>
    </script>
</div>

@* Template: TagV2 Button *@
<script type="text/template" id="template_tagButton">
    <button class="grayButton tagSetButton" data-resultID="{ResultId}" data-IsAjaxQuery="{IsAjaxQuery}" data-AjaxQueryName="{AjaxQueryName}" data-Name="{Name}" data-SearchQueryType="{SearchQueryType}" data-CategoryName="{CategoryName}">
        <span class="label">{Display}</span>
        <div class="queryValues">{AjaxQueryValues}</div>
    </button>
</script>

@* Template: TagV2 Item *@
<script type="text/template" id="template_tagItem">
    <button class="whiteButton tagItemButton">
        <span class="label">{Display}</span>
        <div class="queryValues">{QueryValues}</div>
    </button>
</script>

<script type="text/template" id="template_none">
    <div class="noQuery">
        <span class="label">{Display}</span>
    </div>
</script>
