@using workIT.Models.Common;
@using workIT.Services;
@{
	ViewBag.Title = "Search";

	var enumServices = new EnumerationServices();
	var isUserSiteStaff = AccountServices.IsUserSiteStaff();
	var googleMapsKey = new ThirdPartyApiServices().GetGoogleMapsApiKey();

	//var deliveryMethods = enumServices.GetEnumeration( "deliveryType", EnumerationType.MULTI_SELECT, false );

	var searchType = Request.Params[ "searchType" ] ?? "credential";
	var viewMode = Request.Params[ "viewMode" ] ?? "list";
	var sortOrder = Request.Params[ "sortOrder" ] ?? "alpha";

	var preselectedKeywords = (Request.Params[ "keywords" ] ?? "").Replace( "\"", "" );
	var preselectedFilters = new Dictionary<int, List<int>>();
	try
	{
		var filterString = string.IsNullOrWhiteSpace( Request.Params[ "filters" ] ) ? "" : Request.Params[ "filters" ];
		foreach ( var filterchunk in filterString.Split( '_' ) )
		{
			var chunkParts = filterchunk.Split( '-' );
			var categoryID = int.Parse( chunkParts[ 0 ] );
			var filterIDs = chunkParts[ 1 ].Split( ',' ).Select( int.Parse ).ToList();
			preselectedFilters.Add( categoryID, filterIDs );
		}
	}
	catch { }

}
@helper RenderFilterListItem( string searchType, string filterName, string filterLabel, bool renderAllowed = true )
{
	if ( renderAllowed )
	{
		<button class="filterListItem whiteGhost" data-searchType="@searchType" data-filterName="@filterName.ToLower()">@Html.Raw( filterLabel )</button>
	}
}
@helper RenderCodeFilter( string searchType, string filterName, string filterLabel, string description, string displayPrefix, Enumeration tags, bool isColumnar = false, bool showDefinitions = false, List<string> suppressTags = null, Dictionary<string, List<string>> autoSelectValuesWhenKeySelected = null )
{ 
	suppressTags = suppressTags ?? new List<string>();
	autoSelectValuesWhenKeySelected = autoSelectValuesWhenKeySelected ?? new Dictionary<string, List<string>>();
	<div class="filter" data-searchType="@searchType" data-filterName="@filterName.ToLower()" data-categoryID="@tags.Id" data-displayPrefix="@displayPrefix" data-filterType="code">
		<div class="filterLabel">@Html.Raw( filterLabel )</div>
		<div class="filterDescription">@Html.Raw( description )</div>
		<div class="filterItems @( isColumnar ? "columns" : "" )">
			@foreach( var item in tags.Items )
			{
				var autoValues = "";
				try
				{
					autoValues = string.Join( ",", autoSelectValuesWhenKeySelected[ item.SchemaName ] );
				}
				catch { }
				<label class="tag whiteGhost" data-suppressed="@( suppressTags.Contains( item.SchemaName ) ? "true" : "false" )">
					<input type="checkbox" data-schema="@item.SchemaName" data-tagID="@item.Id" data-categoryID="@tags.Id" data-name="@item.Name" data-autoselectvalues="@autoValues" />
					<i class="fa fa-check"></i>
					<span class="name">@item.Name</span>
					@if ( showDefinitions )
					{
						<span class="definition">@item.Description</span>
					}
				</label>
			}
		</div>
	</div>
}
@helper RenderTextFilter( string searchType, string filterName, string filterLabel, string description, string displayPrefix )
{ 
	<div class="filter" data-searchType="@searchType" data-filterName="@filterName.ToLower()" data-displayPrefix="@displayPrefix" data-filterType="text">
		<div class="filterLabel">@Html.Raw( filterLabel )</div>
		<div class="filterDescription">@Html.Raw( description )</div>
		<div class="filterTextAddBox">
			<input type="text" class="filterText hasAutoComplete" data-autocompletecontext="@filterName.ToLower()" placeholder="Type some text and press Enter" />
			<button class="filterTextAddButton">Add</button>
		</div>
		<div class="filterTextItems"></div>
	</div>
}
@helper RenderFrameworkFilter( string searchType, string filterName, string microSearchType, string filterLabel, string description, string displayPrefix, string searchLabel, string searchSelectedLabel, Enumeration frameworkTopLevel, string topLevelSelectLabel, int pageSize = 5, bool includeAllCodes = false )
{
	<div class="filter" data-searchType="@searchType" data-filterName="@filterName.ToLower()" data-frameworkID="@frameworkTopLevel.Id" data-microsearchType="@microSearchType" data-pageSize="@pageSize" data-pageNumber="1" data-includeAllCodes="@( includeAllCodes ? "true" : "false" )" data-displayPrefix="@displayPrefix" data-filterType="framework">
		<div class="filterLabel">@Html.Raw( filterLabel )</div>
		<div class="filterDescription">@Html.Raw( description )</div>
		<div class="frameworkColumns">
			<div class="frameworkColumn frameworkSearchColumn">
				<div class="label">@Html.Raw( searchLabel )</div>
				<div class="frameworkSelectBox">
					<select class="frameworkTopLevel">
						<option value="0">@topLevelSelectLabel</option>
						@foreach( var item in frameworkTopLevel.Items )
						{
							<option value="@item.Id">@item.Name</option>
						}
					</select>
					<button class="frameworkTopLevelSelectButton">Select <i class="fa fa-caret-right"></i></button>
				</div>
				<input type="text" class="frameworkTextBox" placeholder="Enter keyword(s)" />
				<div class="frameworkStatusBox"></div>
				<div class="frameworkResultsBox"></div>
				<div class="frameworkPagingBox"></div>
			</div>
			<div class="frameworkColumn frameworkSelectedColumn">
				<div class="label">@Html.Raw( searchSelectedLabel )</div>
				<div class="frameworkSelectedItems"></div>
			</div>
		</div>
	</div>
}

<script type="text/javascript">
	/* Global Variables */
	var global = {
		searchType: "@searchType",
		viewMode: "@viewMode",
		sortOrder: "@sortOrder",
		totalPages: 0,
		pageNumber: 1,
		pageSize: 25,
		searchTimeout: 0,
		searchStatus: {
			searching: false
		},
		currentResults: {},
		window: $(window),
		preselectedFilters: @Html.Raw( Newtonsoft.Json.JsonConvert.SerializeObject( preselectedFilters ) ),
		preselectedKeywords: "@preselectedKeywords"
	};
</script>
<script type="text/javascript">
	/* Initialization */
	$(document).ready(function () {
		setupSearchType();
		setupViewMode();
		setupSortOrder();
		setupKeywords();
		setupFilters();
		setupFilterUI();
		setupMapBoxScrolling();
		setupScrollPaging();
		setupAutoComplete();
		initialize();
	});

	//Search Type
	function setupSearchType() {
		$("#ddlSearchType").on("change", function () {
			global.searchType = $(this).find("option:selected").attr("value");
			$("#txtSearchKeyword").val("");
			filters.clearAllFilters();
			resetCountDown();
		});
	}
	//

	//View Mode
	function setupViewMode() {
		var buttons = $("#viewModes button");
		buttons.on("click", function () {
			var button = $(this);
			var viewMode = button.attr("data-viewMode");
			buttons.removeClass("selected").filter(button).addClass("selected");
			global.viewMode = viewMode;
			$("#searchResultsContent").attr("data-viewMode", viewMode);
			global.window.trigger("viewModeChanged");
			//Thrash the DOM so IE works
			if (window.navigator.userAgent.indexOf("Trident") > -1) {
				$("#searchResultsSection").hide().show();
			}
		});
	}
	//

	//Sort Order
	function setupSortOrder() {
		$("#ddlSortOrder").on("change", function () {
			global.sortOrder = $(this).find("option:selected").attr("value");
			resetCountDown();
		});
	}
	//

	//Setup Keywords-related things
	function setupKeywords() {
		//Search query
		$("#txtSearchKeyword").on("keyup change", function (e) {
			if (e.which == 9 || e.keyCode == 9) {
				return; //Ignore tab
			}
			resetCountDown();
		});

		//Search Button
		$("#btnDoSearch").on("click", function () {
			resetCountDown();
		});

		//Clear button
		$("#btnClearKeywords").on("click", function () {
			$("#txtSearchKeyword").val("").trigger("change");
		});

		//Reset button
		$("#btnResetSearch").on("click", function() {
			$("#txtSearchKeyword").val("");
			filters.clearAllFilters();
			resetCountDown();
		});
	}
	//

	//Filter functions that trigger a search
	function setupFilters() {
		//Code filters
		$(".filter[data-filterType='code']").each(function () {
			var filter = $(this);
			filter.find(".tag").each(function() {
				var tag = $(this);
				tag.find("input[type=checkbox]").on("click preselect", function() {
					var cbx = $(this);
					var autoselect = cbx.attr("data-autoselectvalues").split(",");
					for(var i in autoselect){
						if(autoselect[i].length == 0){
							continue;
						}
						filter.find(".tag input[type=checkbox][data-schema='" + autoselect[i] + "']").prop("checked", cbx.prop("checked"));
					}
					filters.updateFilters();
				});
			});
			//Use this instead if autofilter checking is not used in the search
			//filter.find(".tag input[type=checkbox]").on("click preselect", function () {
			//	filters.updateFilters();
			//});
		});

		//Text filters
		$(".filter[data-filterType='text']").each(function () {
			var filter = $(this);
			var entryBox = filter.find(".filterText");
			var entryButton = filter.find(".filterTextAddButton");
			entryBox.on("keyup", function (e) {
				if (e.which == 13 || e.keyCode == 13) {
					filters.addTextFilterItem(filter);
				}
			});
			entryBox.on("autoCompleteSelect", function() {
				entryButton.trigger("click");
				setTimeout(function() { entryBox.val(""); }, 10);
			});
			entryButton.on("click", function (e) {
				filters.addTextFilterItem(filter);
			});
		});

		//Framework filters
		$(".filter[data-filterType='framework']").each(function () {
			var filter = $(this);
			var topLevelSelector = filter.find(".frameworkTopLevel");
			var textBox = filter.find(".frameworkTextBox");
			var topLevelSelectButton = filter.find(".frameworkTopLevelSelectButton");
			var categoryID = parseInt(filter.attr("data-frameworkID"));
			topLevelSelector.on("change", function () {
				filters.doMicroSearch(filter, true);
			});
			topLevelSelector.on("preselect", function() {
				topLevelSelectButton.trigger("click");
			});
			textBox.on("keyup change", function () {
				filters.doMicroSearch(filter, true);
			});
			topLevelSelectButton.on("click", function () {
				var selectedItem = topLevelSelector.find("option:selected");
				var value = parseInt(selectedItem.attr("value"));
				var name = selectedItem.text();
				var selectors = { CategoryId: categoryID, CodeId: value, IsTopLevel: true };
				if (value > 0) {
					filters.addMicroFilter(filter, name, selectors);
				}
			});
		});
	}
	//

	//Basic filter UI functions
	function setupFilterUI() {
		//Filter section overall
		$("#btnToggleFilters, #btnCloseMainFilters").on("click", function () {
			$("#searchMainFilters").slideToggle(250);
		});

		//Individual Filters
		var filterLists = $(".filterList");
		var filterListItems = $(".filterListItem");
		var filters = $(".filter");
		filterListItems.on("click", function () {
			var button = $(this);
			filterListItems.removeClass("activeFilter").filter(button).addClass("activeFilter");
			filters.removeClass("activeFilter").filter("[data-searchType=" + button.attr("data-searchType") + "][data-filterName=" + button.attr("data-filterName") + "]").addClass("activeFilter");
		});

		//Show/hide Filters when search type changes
		$("#ddlSearchType").on("change", function () {
			filterLists.removeClass("activeFilter").filter("[data-searchType=" + global.searchType + "]").addClass("activeFilter").find(".filterListItem").first().trigger("click");
		});

		//Clear selected filters
		$("#btnClearAllTags").on("click", function () {
			$("#searchSelectedTagsList .selectedTag .closeButton").trigger("click");
		});
	}
	//

	//Handle fixing the map box in place while scrolling
	function setupMapBoxScrolling() {
		var content = $("#searchResultsContent");
		var mapBox = $("#mapBox");
		var win = global.window;
		var compareBar = $("#compareBar");
		win.on("resize scroll", function () {
			var scrollTop = win.scrollTop();
			var topThreshhold = content.position().top;
			var winHeight = win.height();
			var compareBarHeight = compareBar.outerHeight();
			var bottomThreshhold = topThreshhold + content.outerHeight() + compareBar.outerHeight();
			//Adjust the map box size so the entire thing always shows
			if (global.window[0].matchMedia("(max-width: 700px)").matches) {
				mapBox.css("height", (winHeight * 0.5) - compareBarHeight);
			}
			else {
				mapBox.css("height", winHeight - compareBarHeight);
			}
			//Handle sticky map
			if (scrollTop > topThreshhold) {
				mapBox.addClass("sticky");
			}
			else {
				mapBox.removeClass("sticky");
			}
			if (scrollTop + winHeight >= bottomThreshhold) {
				mapBox.addClass("bottom");
			}
			else {
				mapBox.removeClass("bottom");
			}
		});
	}
	//

	//Add in results when the user scrolls down far enough
	function setupScrollPaging() {
		var win = global.window;
		var resultsList = $("#searchResultsList");
		win.on("scroll", function () {
			var top = win.scrollTop();
			var winHeight = win.outerHeight();
			var resultsHeight = resultsList.position().top + resultsList.outerHeight();
			var min = winHeight * 1.5;

			//Don't do anything if not enough scrolling has happened or there are no more pages or if a search is in progress
			if (top < min || global.pageNumber >= global.totalPages || global.searchStatus.searching) {
				return;
			}

			//Do a search if nearing the bottom
			if (top + winHeight >= resultsHeight - 500) {
				global.pageNumber++;
				doSearch(true);
			}
		});
	}
	//

	//Setup AutoComplete fields
	function setupAutoComplete() {
		$(".hasAutoComplete").each(function() { 
			var box = $(this);
			box.autocomplete({
				source: function(request, response) { handleAutoComplete(request, response, box); },
				select: function(event, ui){ box.val(ui.item.value); box.trigger("change"); box.trigger("autoCompleteSelect"); },
				delay: 150,
			});
		});
	}
	//

	//Initialize event handler based stuff
	function initialize() {
		//Set search type
		$("#ddlSearchType").trigger("change");

		//Handle Preselected keywords
		if(global.preselectedKeywords.length > 0){
			$("#txtSearchKeyword").val(global.preselectedKeywords).trigger("change");
		}

		//Handle Preselected filters
		for(var i in global.preselectedFilters){
			var categoryID = i;
			var items = global.preselectedFilters[i];
			for(var j in items){
				//Code filters
				$(".filter[data-searchtype=" + global.searchType + "][data-filtertype=code][data-categoryID=" + categoryID + "] input[data-tagID=" + items[j] + "]").prop("checked", true).trigger("preselect");
				//Text filters
				//No handling?
				//Framework filters
				$(".filter[data-searchtype=" + global.searchType + "][data-filtertype=framework][data-frameworkID=" + categoryID + "] .frameworkTopLevel option[value=" + items[j] + "]").prop("selected", true).trigger("preselect");
			}
		}

		filters.updateFilters();
		resetCountDown();
	}
	//

</script>
<script type="text/javascript">
	/* Search Functions */
	//Reset search delay
	function resetCountDown() {
		clearTimeout(global.searchTimeout);
		global.searchTimeout = setTimeout(function () {
			doSearch(false);
		}, 800);
	}
	//

	//Set search status
	function setSearchStatus(message) {
		$("#searchStatus").html(message);
		$("#searchResultsContent").attr("data-searchInProgress", global.searchStatus.searching ? "true" : "false");
	}
	//

	//Do a search
	function doSearch(isPaging) {
		//Reset paging if needed
		if (!isPaging) {
			global.pageNumber = 1;
		}

		//Build query
		var query = {
			SearchType: global.searchType,
			StartPage: global.pageNumber,
			PageSize: global.pageSize,
			SortOrder: global.sortOrder,
			Keywords: $("#txtSearchKeyword").val().trim(),
			FiltersV2: filters.getFiltersForQuery()
		};

		//Set status
		global.searchStatus.searching = true;
		setSearchStatus("Searching...");

		//Do Search
		doAjax("Search", "MainSearch", { query: query, useV4Results: true }, success_doSearch, null, { isPaging: isPaging });
	}
	//

	//Handle search results
	function success_doSearch(message, extra) {
		global.searchStatus.searching = false;

		if (message.valid) {
			//Handle resuls
			global.currentResults = message.data;
			renderCurrentResults(extra.isPaging);
			global.totalPages = Math.ceil(message.data.TotalResults / global.pageSize);

			//Set status
			if (global.currentResults.TotalResults > 0) {
				setSearchStatus("Found " + message.data.TotalResults + " results");
			}
			else {
				setSearchStatus("Sorry, no results found");
			}
		}
		else {
			setSearchStatus(message.status);
		}
	}
	//

	//Handle autocomplete
	function handleAutoComplete(request, response, box){
		var context = box.attr("data-autocompletecontext").toLowerCase();
		if(box.val().trim().length >= 2){
			doAjax("Search", "DoAutoComplete", { text: request.term, context: context, searchType: global.searchType }, success_handleAutoComplete, null, { response: response, box: box })
		}
	}
	//

	function success_handleAutoComplete(message, extra){
		if(message.valid){
			console.log("AutoComplete suggestions received", { message: message, extra: extra });
			extra.response(message.data);
		}
		else {
			extra.response([]);
		}
	}
	//
</script>
<script type="text/javascript">
	/* Ajax Methods */

	//Do an AJAX search
	function doAjax(controller, method, data, success, button, passThrough) {
		//Disable the button
		if (button) {
			$(button).attr("data-originalValue", $(button).attr("value")).attr("value", "...").prop("disabled", true);
		}

		//Make the request
		$.ajax({
			url: "@Url.Content( "~/" )" + controller + "/" + method,
			async: true,
			headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
			dataType: "json",
			type: "POST",
			data: JSON.stringify(data),
			success: function (message) {
				console.log("Response: ", message);
				success(message, passThrough);
			}
		}).done(function() {
			//Ensure the spinner is hidden
			hideSpinner();
			//Reenable the button
			if(button){
				$(button).attr("value", $(button).attr("data-originalValue")).prop("disabled", false);
			}
		});
	}
	//
</script>
<script type="text/javascript">
	/* Rendering Methods */
	//Autofill a template
	function autoFillTemplate(template, data) {
		var text = template;
		for (var i in data) {
			text = text.replace(new RegExp("{" + i + "}", "g"), data[i]);
		}
		return text;
	}
	//

	//Render search results
	function renderCurrentResults(isPaging) {
		var results = global.currentResults.Results;
		var resultTemplate = $("#template_searchresult").html();
		var box = $("#searchResultsList");

		//Clear results if not appending
		if (!isPaging) {
			box.html("");
			map.clearMarkers();
		}

		for (var i in results) {
			//Create result
			var result = $(autoFillTemplate(resultTemplate, results[i].Properties)).appendTo(box);
			handleResultImage(result);
			handleResultLocations(result, results[i]);
			renderTags(result, results[i].TagsV2);
		}

		//Force resize
		global.window.trigger("resize");
	}
	//

	//Handle images to avoid unwanted requests
	function handleResultImage(result) {
		var box = result.find(".resultImage");
		var url = box.attr("data-resultImageUrl");
		if (url.indexOf("http") > -1) {
			box.css("background-image", "url('" + url + "'), linear-gradient(#CCC, #EEE)");
		}
	}
	//

	//Add location buttons
	function handleResultLocations(result, data) {
		var box = result.find(".resultLocationsBox");
		var button = result.find(".btnAvailableAt");
		var list = result.find(".resultLocations");
		var template = $("#template_mapmarker_button").html();
		try {
			if (data.Properties.Locations.length > 0) {
				//Create the map markers and buttons
				for (var i in data.Properties.Locations) {
					var marker = map.addMarker(data.Properties.RecordId, data.Properties.Locations[i].Latitude, data.Properties.Locations[i].Longitude);
					list.append(autoFillTemplate(template, { MarkerId: marker.customInfo.Id, RecordId: data.Properties.RecordId }));
				}
				//Setup the "show locations" button
				button.find(".label").html("Show " + data.Properties.Locations.length + " Locations");
				button.on("click", function () {
					box.attr("data-showLocations", "true");
				});
				//Show marker button directly if only one
				if (data.Properties.Locations.length == 1) {
					box.attr("data-showLocations", "true");
				}
				//Show the location box
				box.attr("data-showLocationsBox", "true");
			}
			else {
				return;
			}
		}
		catch(e) { }
	}
	//

	//Add gray boxes
	function renderTags(result, tags){
		var buttonsBox = result.find(".resultTagButtons");
		var contentBox = result.find(".resultTagContent");
		var buttonTemplate = $("#template_tagButton").html();
		var resultID = result.attr("data-resultID");
		//For each tag...
		for(var i in tags){
			var tag = tags[i];
			//If it has items...
			if(tag.TotalItems > 0){
				//Create and append the button, and assign it a generic handler
				var button = $(autoFillTemplate(buttonTemplate.replace(/{AjaxQueryValues}/g, JSON.stringify(tag.AjaxQueryValues)), tag).replace(/{ResultId}/g, resultID)).appendTo(buttonsBox);

				//Closure to prevent loop reference error
				(function(result, tagName){
					button.on("click", function(){
						showTagItems(result, tagName);
					});
				})(result, tag.Name);
				
				//Create and append a box to hold the tag items
				var tagContents = $("<div></div>").attr("class", "tagContentBox").attr("data-Name", tag.Name).appendTo(contentBox);
				//Create and append the tag items themselves
				renderTagItems(result, tag.Name, tag.Items);
			}
		}
	}
	//

	//Show Tags
	function showTagItems(result, buttonName){
		var button = result.find(".tagSetButton[data-Name=" + buttonName + "]");
		var container = result.find(".tagContentBox[data-name=" + button.attr("data-name") + "]");

		if(container.hasClass("selected")){
			result.find(".tagContentBox").removeClass("selected");
		}
		else{
			result.find(".tagContentBox").removeClass("selected").filter(container).addClass("selected");
		}

		if(button.attr("data-IsAjaxQuery") == "true" && !button.hasClass("ajaxPerformed")){
			var query = JSON.parse(button.find(".queryValues").html());
			query.AjaxQueryName = button.attr("data-AjaxQueryName");
			doAjax("Search", "GetTagsV2Data", query, success_showAjaxTags, button, { result: result, buttonName: buttonName, container: container });
			button.addClass("ajaxPerformed");
		}
	}
	//

	//Show AJAX based tags
	function success_showAjaxTags(message, extra){
		if(message.valid){
			renderTagItems(extra.result, extra.buttonName, message.data);
			extra.container.append("<a class=\"linkButton whiteButton tagItemButton\" target=\"" + global.searchType + "\" href=\"/detail/" + global.searchType + "/" + extra.result.attr("data-resultID") + "\">More <i class=\"fa fa-arrow-circle-o-right\"></i></a>")
		}
	}
	//

	//Render Tag Items
	function renderTagItems(result, tagName, tagItems){
		var container = result.find(".tagContentBox[data-Name=" + tagName + "]");
		var button = result.find(".tagSetButton[data-Name=" + tagName + "]");
		var itemTemplate = $("#template_tagItem").html();

		for(var i in tagItems){
			var tagItem = tagItems[i];
			var tag = $(autoFillTemplate(itemTemplate.replace(/{QueryValues}/g, JSON.stringify(tagItem.QueryValues)), tagItem)).appendTo(container);
			
			(function(tag, tagItem, button){
				switch(button.attr("data-SearchQueryType")){
					case "none":
						tag.replaceWith($("<div></div>").addClass("noQuery").html(tag.html()));
						break;
					case "link":
						tag.on("click", function() {
							window.open("/detail/" + tagItem.QueryValues.TargetType + "/" + tagItem.QueryValues.TargetId, "grayTagWindow");
						});
						break;
					case "detail":
						tag.on("click", function() {
							window.open("/detail/" + global.searchType + "/" + resultID, "grayTagWindow");
						});
						break;
					case "code":
						tag.on("click", function() {
							$(".filter[data-searchType=" + global.searchType + "][data-filterType=code][data-categoryID=" + tagItem.QueryValues.CategoryId + "] input[data-tagID=" + tagItem.QueryValues.CodeId + "]").prop("checked", true).trigger("preselect");
						});
						break;
					case "text":
						tag.on("click", function(){
							var category = button.attr("data-name").toLowerCase();
							var filter = $(".filter[data-searchType=" + global.searchType + "][data-filterType=text][data-filterName=" + category + "]");
							filter.find(".filterText").val(tagItem.QueryValues.TextValue);
							filters.addTextFilterItem(filter);
						});
						break;
					case "framework":
						tag.on("click", function(){
							var filter = $(".filter[data-searchType=" + global.searchType + "][data-filterType=framework][data-frameworkID=" + tagItem.QueryValues.CategoryId + "]");
							var selectors = { CategoryId: tagItem.QueryValues.CategoryId, CodeId: tagItem.QueryValues.CodeId };
							if(tagItem.QueryValues.IsTopLevel){
								selectors.IsTopLevel = true;
							}
							filters.addMicroFilter(filter, tagItem.Display, selectors);
						});
						break;
					case "custom":
						tag.on("click", function() {
							var name = button.attr("data-name")
							var category = button.attr("data-categoryName");
							filters.addCustomFilter(name, tagItem.QueryValues, category, tagItem.Display, function() { resetCountDown(); });
						});
						break;
					default:
						break;
				}
			})(tag, tagItem, button);
		}
	}
	//

</script>
<script type="text/javascript">
	/* Filters Methods */
	var filters = {
		customFilters: []
	};

	//Update the rendered filters
	filters.updateFilters = function () {
		filters.renderSelectedFilters();
		resetCountDown();
	}
	//

	//Read selected filters
	filters.readSelectedFilters = function () {
		var results = [];
		$(".filter").each(function () {
			var filter = $(this);
			var filterName = filter.attr("data-filterName");
			var displayPrefix = filter.attr("data-displayPrefix");
			switch (filter.attr("data-filterType")) {
				case "code": {
					filter.find(".tag input:checked").each(function () {
						var item = $(this);
						results.push({
							Type: "CODE",
							Name: filterName,
							Values: {
								CategoryId: parseInt(item.attr("data-categoryID")),
								CodeId: parseInt(item.attr("data-tagID")),
								SchemaName: item.attr("data-schema")
							},
							Element: item,
							DisplayPrefix: displayPrefix,
							Display: item.attr("data-name"),
							OnRemove: function () { item.prop("checked", false).trigger("change"); }
						});
					});
					break;
				}
				case "text": {
					filter.find(".filterTextItem").each(function () {
						var item = $(this);
						results.push({
							Type: "TEXT",
							Name: filterName,
							Values: {
								TextValue: item.find(".value").text().trim()
							},
							Element: item,
							DisplayPrefix: displayPrefix,
							Display: item.find(".value").text(),
							OnRemove: function () { item.remove(); }
						});
					});
					break;
				}
				case "framework": {
					filter.find(".frameworkSelectedItems .frameworkFilterItem").each(function () {
						var item = $(this);
						results.push({
							Type: "FRAMEWORK",
							Name: filterName,
							Values: JSON.parse(item.find(".selectors").text().trim()),
							Element: item,
							DisplayPrefix: displayPrefix,
							Display: item.find(".display").text().trim(),
							OnRemove: function () { item.remove(); }
						});
					});
					break;
				}
				default: break;
			}
		});
		if (map.usingMapSearch) {
			results.push({
				Type: "MAP",
				Name: "bounds",
				Values: map.getBounds(),
				Element: $("#mapBox"),
				DisplayPrefix: "Map",
				Display: "Visible map area",
				OnRemove: function () { map.usingMapSearch = false; }
			});
		}
		for(var i in filters.customFilters){
			results.push(filters.customFilters[i]);
		}
		return results;
	}
	//

	//Render gray tags for selected filters
	filters.renderSelectedFilters = function () {
		var items = filters.readSelectedFilters();
		var box = $("#searchSelectedTags");
		var list = $("#searchSelectedTagsList");
		var template = $("#template_selectedtag").html();

		box.attr("data-totalTags", items.length);
		list.html("");
		for (var i in items) {
			(function (item) {
				var tag = $(autoFillTemplate(template, items[i])).appendTo(list);
				tag.find(".closeButton").on("click", function () {
					item.OnRemove();
					tag.remove();
					//Slight delay to prevent filters from re-rendering before all are cleared
					setTimeout(function () {
						filters.updateFilters();
					}, 10);
				});
			})(items[i]);
		}
	}
	//

	//Get filters for search query
	filters.getFiltersForQuery = function () {
		var items = filters.readSelectedFilters();
		var results = [];
		for (var i in items) {
			(function (item) {
				results.push({
					Type: item.Type,
					Name: item.Name,
					Values: item.Values
				});
			})(items[i]);
		}
		return results;
	}
	//

	//Write text filter
	filters.addTextFilterItem = function (filter) {
		var textBox = filter.find(".filterText");
		var value = textBox.val().trim();
		var itemsBox = filter.find(".filterTextItems");
		var template = $("#template_textfilter_item").html();
		//If the value is long enough and not a duplicate, add it
		if(value.length >= 3 && filters.readTextFilterItems(filter).indexOf(value) == -1){
			var item = $(template.replace(/{value}/g, value)).appendTo(itemsBox);
			textBox.val("");
			//Setup remove button functionality
			item.find(".removeButton").on("click", function () {
				filters.removeTextFilterItem(item);
			});
			//Update filters and return the new item
			filters.updateFilters();
			return item;
		}
		return null;
	}
	//

	//Read text filter
	filters.readTextFilterItems = function(filter){
		var items = filter.find(".filterTextItems .filterTextItem");
		var result = [];
		items.each(function(){
			result.push($(this).find(".value").html());
		});
		return result;
	}
	//

	//Remove text filter
	filters.removeTextFilterItem = function (item) {
		item.remove();
		filters.updateFilters();
	}
	//

	//Do a microsearch
	filters.doMicroSearch = function (filter, resetPaging) {
		if (resetPaging) {
			filter.attr("data-pageNumber", "1");
		}
		var microQuery = {
			Filters: [
				{ Name: "Keywords", Value: filter.find(".frameworkTextBox").val().trim() },
				{ Name: "HeaderId", value: parseInt(filter.find(".frameworkTopLevel option:selected").attr("value")) }
			],
			IncludeAllCodes: filter.attr("data-includeAllCodes") == "true",
			PageNumber: filter.attr("data-pageNumber"),
			PageSize: filter.attr("data-pageSize"),
			SearchType: filter.attr("data-microSearchType"),
			PageContext: "MainSiteSearch"
		};
		doAjax("Search", "DoMicroSearch", microQuery, filters.handleMicroSearchResults, null, { filter: filter });
	}
	//

	//Handle the results of a microsearch
	filters.handleMicroSearchResults = function (message, extra) {
		//Get variables
		var filter = extra.filter;
		var statusBox = filter.find(".frameworkStatusBox");
		var resultsBox = filter.find(".frameworkResultsBox");
		var pagingBox = filter.find(".frameworkPagingBox");
		var currentPage = parseInt(filter.attr("data-pageNumber"));
		var pageSize = parseInt(filter.attr("data-pageSize"));
		var totalPages = Math.ceil(message.extra / pageSize);
		var pageSkips = [1, 5, 10, 15, 20, 25, 50, 75, 100, totalPages];
		var itemTemplate = $("#template_frameworkfilter_item").html();
		var pagingTemplate = $("#template_frameworkfilter_pagingbutton").html();
		
		//Clear old results
		statusBox.html("Found " + message.extra + " Results");
		resultsBox.html("");
		pagingBox.html("");

		//Handle error
		if (!message.valid) {
			statusBox.html(message.status);
			return;
		}

		//Render new results with a closure
		for (var i in message.data) {
			(function (data) {
				var item = filters.renderMicroItem(resultsBox, data.Name, data.Selectors);
				item.on("click", function () {
					filters.addMicroFilter(filter, data.Name, data.Selectors);
				});
			})(message.data[i]);
		}

		//Render paging with a closure
		for (var i = 1; i <= totalPages; i++) {
			if (pageSkips.indexOf(i) > -1 || (i >= currentPage - 2 && i <= currentPage + 2)) {
				(function (page) {
					var pageButton = $(pagingTemplate.replace(/{Display}/g, page).replace(/{current}/g, currentPage == i ? "current" : "")).appendTo(pagingBox);
					pageButton.on("click", function () {
						filter.attr("data-pageNumber", page);
						filters.doMicroSearch(filter, false);
					});
				})(i);
			}
		}
	}
	//

	//Render a microsearch item
	filters.renderMicroItem = function (targetBox, name, selectors) {
		var itemTemplate = $("#template_frameworkfilter_item").html();
		var newItem = $(itemTemplate.replace(/{Selectors}/g, JSON.stringify(selectors)).replace(/{Display}/g, name)).appendTo(targetBox);
		return newItem;
	}
	//

	//Select a microsearch item
	filters.addMicroFilter = function (filter, name, selectors) {
		var selectedItemsBox = filter.find(".frameworkSelectedItems");
		var selectorsString = JSON.stringify(selectors);
		var found = false;
		//Prevent duplicates
		selectedItemsBox.find(".frameworkFilterItem").each(function () {
			if ($(this).find(".selectors").text().trim() == selectorsString) {
				found = true;
			}
		});
		if (found) {
			return;
		}
		//Add the item
		var selectedItem = filters.renderMicroItem(selectedItemsBox, name, selectors);
		selectedItem.on("click", function () {
			selectedItem.remove();
			filters.updateFilters();
		});
		//Update filters
		filters.updateFilters();
		return selectedItem;
	}
	//

	//Add a custom filter
	filters.addCustomFilter = function(name, values, tagTitle, tagText, onRemove){
		//Prevent duplicates
		var stringifiedValues = JSON.stringify(values);
		for(var i in filters.customFilters){
			if(JSON.stringify(filters.customFilters[i].Values) == stringifiedValues){
				return;
			}
		}
		//Add the filter
		filters.customFilters.push({
			Type: "CUSTOM",
			Name: name,
			Values: values,
			DisplayPrefix: tagTitle,
			Display: tagText,
			OnRemove: function() { if(onRemove){ onRemove(); } filters.removeCustomFilter(stringifiedValues); }
		});
		filters.updateFilters();
	}
	//

	//Remove a custom filter by its query values as stringified JSON
	filters.removeCustomFilter = function(stringifiedValues){
		var replacement = [];
		for(var i in filters.customFilters){
			if(JSON.stringify(filters.customFilters[i].Values) != stringifiedValues){
				replacement.push(filters.customFilters[i]);
			}
		}
		filters.customFilters = replacement;
		filters.updateFilters();
	}
	//

	//Clear all filters
	filters.clearAllFilters = function () {
		$("#searchSelectedTagsList .selectedTag .closeButton").trigger("click");
	}
	//
</script>
<script type="text/javascript">
	/* Map Methods */
	var map = {
		markerID: 0,
		markers: [],
		box: null,
		googleMap: null,
		defaultCenter: { lat: 37.0902, lng: -95.7129 },
		usingMapSearch: false,
		locationTimer: 0,
		locationPrevious: ""
	};

	//Initial setup
	function setupMapBox() {
		map.box = $("#mapBox #googleMap");
		map.googleMap = new google.maps.Map(map.box[0], { center: map.defaultCenter, zoom: 4 });
		map.wakeMap();
		global.window.on("viewModeChanged", function () {
			//map.wakeMap();
		});

		$("#btnMapSearch").on("click", function () {
			map.usingMapSearch = true;
			filters.updateFilters();
		});

		$("#btnCloseMap").on("click", function () {
			map.usingMapSearch = false;
			filters.updateFilters();
			$("#viewModes [data-viewmode=list]").trigger("click");
		});

		$("#txtLocationSearch").on("focus", function () {
			map.setLocationStatus("Enter a location...", true);
		}).on("keyup change", function () {
			map.resetLocationCountdown();
		});

		$("#btnCloseLocationSearchResults").on("click", function () {
			map.setLocationStatus(null, false);
		});
	}
	//

	//Wake up map after being hidden
	map.wakeMap = function () {
		map.moveMap(map.defaultCenter.lat, map.defaultCenter.lng, 4);
	}
	//

	//Move the map
	map.moveMap = function (latitude, longitude, zoom) {
		google.maps.event.trigger(map.googleMap, "resize");
		map.googleMap.setCenter({ lat: latitude, lng: longitude });
		if (zoom) {
			map.googleMap.setZoom(Math.floor(zoom));
		}
	}
	//
	
	//Add a map marker
	map.addMarker = function (resultID, latitude, longitude) {
		var marker = new google.maps.Marker({
			map: map.googleMap,
			position: { lat: latitude, lng: longitude },
			customInfo: { Id: map.markerID }
		});
		(function (markerID, resultID) {
			marker.addListener("click", function () {
				map.focusMapAndResult(markerID, resultID);
			});
		})(map.markerID, resultID);
		map.markers.push(marker);
		map.markerID++;
		return marker;
	}
	//

	//Clear map markers
	map.clearMarkers = function () {
		for (var i in map.markers) {
			map.markers[i].setMap(null);
		}
	}
	//

	//Focus the map and highlight a result
	map.focusMapAndResult = function (markerID, resultID) {
		$("#viewModes [data-viewmode='map']").trigger("click");
		for (var i in map.markers) {
			if (map.markers[i].customInfo.Id == markerID) {
				map.moveMap(map.markers[i].position.lat(), map.markers[i].position.lng(), 7);
			}
		}
		$(".result[data-resultID=" + resultID + "]").addClass("highlighted")[0].scrollIntoView();
		setTimeout(function () {
			$(".result[data-resultID=" + resultID + "]").removeClass("highlighted");
		}, 500);
	}
	//

	//Get map area
	map.getBounds = function () {
		return map.googleMap.getBounds().toJSON();
	}
	//

	//Reset countdown for location/geocoordinates search
	map.resetLocationCountdown = function () {
		clearTimeout(map.locationTimer);
		map.locationTimer = setTimeout(function () {
			map.doLocationSearch();
		}, 1000);
	}
	//

	//Do a location search
	map.doLocationSearch = function () {
		var txtBox = $("#txtLocationSearch");
		var value = txtBox.val().trim().replace(/"/g, "");
		//Prevent duplicate
		if (value == map.locationPrevious) {
			return;
		}
		map.locationPrevious = value;
		//Do the search
		map.setLocationStatus("Searching...", true);
		doAjax("Search", "FindLocations", { text: value }, map.handleLocationResults, null, null);
	}
	//

	//Handle location search results
	map.handleLocationResults = function (message, extra) {
		var resultsList = $("#locationSearchResultsList");
		var resultTemplate = $("#template_locationsearch_result").html();
		if (message.valid) {
			//Re-render results
			map.setLocationStatus("Select a result to focus the map", true);
			resultsList.html("");
			for (var i in message.data) {
				(function(item){
					var result = $(autoFillTemplate(resultTemplate, item)).appendTo(resultsList);
					result.on("click", function () {
						map.fitToBounds(item.Bounds.North, item.Bounds.East, item.Bounds.South, item.Bounds.West);
						map.setLocationStatus(null, false);
					});
				})(message.data[i]);
			}
		}
		else {
			map.setLocationStatus(message.status, true);
		}
	}
	//

	//Set location search status
	map.setLocationStatus = function (message, active) {
		if (message) {
			$("#locationSearchStatus").html(message);
		}
		$("#locationSearchResultsBox").attr("data-active", active ? true : false);
	}
	//

	//Focus the map on a set of boundaries
	map.fitToBounds = function(north, east, south, west){
		map.googleMap.fitBounds({
			north: north,
			east: east,
			south: south,
			west: west
		});
	}
	//
</script>
<script type="text/javascript">
	/* Registry interactions */
	//Delete an item
	function deleteResult(name, type, recordID){
		var result = $(".result." + type + "[data-recordID=" + recordID + "]");
		result.addClass("aboutToDelete");
		modal.confirm(
            "Confirm Delete",
            "Are you sure you want to delete <b>" + name + "</b>? This action cannot be undone!",
            function() {
            	switch(type){
            		case "credential":
            			doAjax("Search", "DeleteCredential", { id: recordID }, success_deleteResult, null, result);
            			return;
            		case "organization":
            			doAjax("Search", "DeleteOrganization", { id: recordID }, success_deleteResult, null, result);
            			return;
            		case "assessment":
            			doAjax("Search", "DeleteAssessment", { id: recordID }, success_deleteResult, null, result);
            			return;
            		case "learningopportunity":
            			doAjax("Search", "DeleteLearningOpportunity", { id: recordID }, success_deleteResult, null, result);
            			return;
            		default:
            			return;
            	}
            },
            function() {
            	result.removeClass("aboutToDelete");
            }
        );
	}
	//

	//Register an entity
	function registerEntity(name, type, recordID) {
		modal.confirm(
            "Register This Data",
            "Are you sure that you want to register <b>" + name + "</b>?",
            function () {
            	showSpinner();
            	var context = {
            		IsTopLevel: true,
            		Profile: { Id: recordID, RowId: "null", TypeName: type }
            	};
            	doAjax("Editor", "Register", context, success_Publish, null, true);
            },
            function() {}
        );
	}
	//

	//Handle successful publish
	function success_Publish(message, result){
		if(message.valid){
			consoleMessage.addSuccessMessage("Register was successful", "", 2000);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 10000);
		}
	}

	//Handle successful delete
	function success_deleteResult(message, result){
		if(message.valid){
			result.remove();
			//May need to remove map marker(s)
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 5000);
			result.removeClass("aboutToDelete");
		}
	}
	//
    
	//Show the spinner
	function showSpinner(){
		$("#waitWrapper").stop().fadeIn(250);
	}
	//

	//Hide the spinner
	function hideSpinner() {
		$("#waitWrapper").stop().fadeOut(250);
	}
	//

</script>

<style type="text/css">
	/* Big Stuff */
	#content { padding: 0; background-color: #FFF; transition: none; }
	.whiteGhost, .whiteGhost.closeButton, button.whiteGhost { background-color: transparent; color: #FFF; box-shadow: none; border-color: rgba(255,255,255,0); }
	button.whiteGhost * { transition: none; }
	.whiteGhost:hover, .whiteGhost:focus, .whiteGhost.current, .whiteGhost.active, .whiteGhost.selected { background-color: #FFF; color: #0F3E63; cursor: pointer; }
	.whiteGhost.borderedGhost { border: 1px solid rgba(255,255,255,0.7); }
	.whiteGhost.borderedGhost:hover, .whiteGhost.borderedGhost:focus { border-color: rgba(255,255,255,1); }

	/* Main Inputs */
	#searchMainInputs { display: -webkit-flex; display: flex; padding: 45px 5vw 25px 5vw; }
	#searchMainInputs .searchHeaderItem { width: calc(100% / 3); margin: 0 5px; position: relative; }
	#searchMainInputs .searchHeaderItem:first-child { width: calc(100% / 3); margin: 0 5px 0 0; position: relative; }
	#searchMainInputs .searchHeaderItem:last-child { width: calc(100% / 3); margin: 0 0 0 5px; position: relative; }
	#searchMainInputs .searchHeaderItem .searchHeaderItemTitle { height: 30px; font-size: 24px; font-weight: bold; color: #3D4443; }
	#searchMainInputs .searchHeaderItem .searchHeaderItemContent { height: 50px; }
	#searchMainInputs .searchHeaderItem .searchHeaderItemContent .fullHeight { height: 100%; }
	#searchMainInputs .searchHeaderItem .searchHeaderItemContent * { font-size: 20px; }
	#searchMainInputs .searchHeaderItem select, #searchMainInputs .searchHeaderItem input[type=text] { width: 100%; }
	#searchMainInputs .searchHeaderItem #searchButtons { display: -webkit-flex; display: flex; -webkit-align-content: stretch; align-content: stretch; margin: 0 -5px; }
	#searchMainInputs .searchHeaderItem #searchButtons button { -webkit-flex: 1 1 auto; flex: 1 1 auto; margin: 0 5px; }
	#searchMainInputs .searchHeaderItem #searchButtons #btnResetSearch { width: 50px; max-width: 50px; }
	#searchMainInputs .searchHeaderItem#searchKeywordBox #txtSearchKeyword { padding-right: 35px; }
	#searchMainInputs .searchHeaderItem#searchKeywordBox #btnClearKeywords { width: 26px; height: 26px; position: absolute; right: 10px; bottom: 12.5px; }
	#searchMainInputs .searchHeaderItem#searchKeywordBox #btnClearKeywords i { font-size: 16px; }

	/* Filters */
	#searchMainFilters { background-color: #0F3E63; color: #FFF; padding: 10px 5vw; display: none; }
	#searchMainFilters #mainFiltersHeader { width: 100%; position: relative; min-height: 40px; padding: 5px 0; }
	#searchMainFilters #mainFiltersHeader .label { font-size: 24px; text-transform: uppercase; font-weight: bold; }
	#searchMainFilters #mainFiltersHeader #btnCloseMainFilters { position: absolute; top: 5px; right: 5px; font-size: 20px; width: 30px; height: 30px; padding: 0; }
	#searchMainFilters #mainFiltersHeader #btnCloseMainFilters:hover, #searchMainFilters #mainFiltersHeader #btnCloseMainFilters:focus { background-color: #FFF; color: #0F3E63; }
	#searchMainFilters #mainFiltersContent { display: -webkit-flex; display: flex; }
	#searchMainFilters #filtersList { width: 32%; }
	#searchMainFilters #filtersList button { display: block; width: 100%; padding: 5px; opacity: 1; text-align: left; font-size: 20px; font-weight: bold; border: 1px solid rgba(255,255,255,0.5); border-width: 0 0 1px 0; border-radius: 0; }
	#searchMainFilters #filtersList button:hover, #searchMainFilters #filtersList button:focus, #searchMainFilters #filtersList button.activeFilter { background-color: #FFF; color: #0F3E63; box-shadow: none; } 
	#searchMainFilters #filtersList .filterList button:last-child { border-bottom: none; }
	#searchMainFilters #filters { width: 68%; padding: 0 10px; }
	#searchMainFilters .filterList:not(.activeFilter) { display: none; }
	#searchMainFilters .filter { padding: 0 10px; }
	#searchMainFilters .filter:not(.activeFilter) { display: none; }
	#searchMainFilters .filter .filterLabel { font-weight: bold; text-transform: uppercase; font-size: 20px; }
	#searchMainFilters .filter .filterDescription { padding: 10px 0; font-weight: lighter; }
	#searchMainFilters .filter .removeButton { height: 26px; width: 26px; padding: 0; border-radius: 50%; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems.columns { -moz-column-count: 2; column-count: 2; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label { display: inline-block; width: 100%; padding: 5px 5px 5px 30px; cursor: pointer; position: relative; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label * { transition: none; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label input[type=checkbox] { display: none; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label input[type=checkbox]:not(:checked) ~ .fa-check { display: none; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label .fa-check { position: absolute; top: 5px; left: 5px; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label .definition { font-size: 14px; font-weight: lighter; padding: 5px; font-style: italic; opacity: 0.8; }
	#searchMainFilters .filter[data-filtertype=code] .filterItems label[data-suppressed='true'] { display: none; }
	#searchMainFilters .filter[data-filtertype=text] .filterTextAddBox { display: -webkit-flex; display: flex; margin-bottom: 5px; }
	#searchMainFilters .filter[data-filtertype=text] .filterTextAddBox .filterText { -webkit-flex: 100% 0 1; flex: 100% 0 1; border-radius: 4px 0 0 4px; }
	#searchMainFilters .filter[data-filtertype=text] .filterTextAddBox .filterTextAddButton { flex: 100px 0 0; border-radius: 0 4px 4px 0; }
	#searchMainFilters .filter[data-filtertype=text] .filterTextItem { border: 1px solid rgba(255,255,255,0.6); border-radius: 4px; margin-bottom: 5px; padding: 5px 35px 5px 5px; position: relative; min-height: 40px; }
	#searchMainFilters .filter[data-filtertype=text] .filterTextItem .removeButton { position: absolute; top: 5px; right: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns { display: -webkit-flex; display: flex; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkColumn .label { font-weight: bold; padding: 5px 0; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn { -webkit-flex: 50% 0 0; flex: 50% 0 0; padding-right: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSelectedColumn { -webkit-flex: 50% 0 0; flex: 50% 0 0; padding-left: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkSelectBox { display: flex; margin-bottom: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkSelectBox .frameworkTopLevel { -webkit-flex: 100% 0 1; flex: 100% 0 1; width: 100%; border-radius: 4px 0 0 4px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkSelectBox .frameworkTopLevelSelectButton { -webkit-flex: 100px 0 0; flex: 100px 0 0; border-radius: 0 4px 4px 0; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkTextBox { display: block; width: 100%; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkStatusBox { padding: 5px; font-style: italic; font-weight: lighter; text-align: center; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkFilterItem { display: block; position: relative; width: 100%; padding: 5px 30px 5px 5px; margin-bottom: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkFilterItem .fa { position: absolute; top: 5px; right: 5px; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkFilterItem .fa-close { display: none; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSelectedColumn .frameworkFilterItem .fa-caret-right { display: none; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkPagingBox { padding: 5px; text-align: center; }
	#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns .frameworkSearchColumn .frameworkPagingBox .pagingButton { padding: 5px; min-width: 30px; margin: 2px; }

	/* Selected Tags */
	#searchSelectedTags { padding: 10px calc(50px + 5vw) 10px 5vw; position: relative; }
	#searchSelectedTags[data-totalTags='0'] { display: none; }
	#searchSelectedTags #btnClearAllTags { position: absolute; top: 10px; right: 5vw; height: 40px; width: 40px; }
	#searchSelectedTags .selectedTag { display: inline-block; background-color: #F2F4F4; color: #3D4443; padding: 10px 40px 10px 10px; margin: 5px; position: relative; min-height: 40px; }
	#searchSelectedTags .selectedTag .prefix { font-weight: bold; }
	#searchSelectedTags .selectedTag .closeButton { width: 26px; height: 26px; position: absolute; top: 6px; right: 5px; }

	/* Results Box */
	#searchResultsHeader { display: -webkit-flex; display: flex; padding: 10px 5vw; }
	#searchResultsHeader #searchStatus { -webkit-flex: 100% 1 1; flex: 100% 1 1; padding-right: 10px; font-size: 30px; font-weight: lighter; font-style: italic; color: #607171; }
	#searchResultsHeader #resultsSettings { display: -webkit-flex; display: flex; -webkit-flex: auto 1 0; flex: auto 1 0; }
	#searchResultsHeader #resultsSettings #ddlSortOrder { width: 200px; height: 40px; margin-right: 10px; }
	#searchResultsHeader #resultsSettings #viewModes { display: -webkit-flex; display: flex; }
	#searchResultsHeader #resultsSettings #viewModes button { height: 40px; width: 100px; }
	#searchResultsHeader #resultsSettings #viewModes button.selected { background-color: #F2F4F4; }
	#searchResultsHeader #resultsSettings #viewModes button[data-viewMode=list] { border-radius: 4px 0 0 4px; }
	#searchResultsHeader #resultsSettings #viewModes button[data-viewMode=map] { border-radius: 0 4px 4px 0; }
	#searchResultsContent { min-height: 100vh; position: relative; }
	#searchResultsContent[data-viewMode=list] { padding: 0 5vw; }
	#searchResultsContent[data-viewMode=list] #mapBox { z-index: -100; }
	#searchResultsContent[data-viewMode=map] { padding: 0 50% 0 5vw; }
	#searchResultsContent[data-viewMode=map] .result .resultDataBox .resultDescriptionBox .resultDescription { -moz-column-count: 1; column-count: 1; }
	#searchResultsContent #searchScrollStatus .searching, #searchResultsContent #searchScrollStatus .done { text-align: center; padding: 20px; font-size: 20px; font-style: italic; font-weight: lighter; opacity: 0.8; }
	#searchResultsContent[data-searchInProgress='true'] #searchScrollStatus .done { display: none; }
	#searchResultsContent[data-searchInProgress='false'] #searchScrollStatus .searching { display: none; }

	/* Search Results */
	.result { display: -webkit-flex; display: flex; padding: 10px 5px; border-top: 1px solid #CAD9DB; min-height: 200px; }
	.result:not(.credential) .credentialOnly { display: none; }
	.result:not(.organization) .organizationOnly { display: none; }
	.result.highlighted { background-color: rgba(20,200,40,0.7); }
	.result .resultImageBox { width: 200px; }
	.result .resultImageBox .resultImage { width: 100%; height: 150px; background-position: center center; background-size: contain; background-repeat: no-repeat; }
	.result.credential .resultImageBox .resultImage { position: relative; background-size: 85%; }
	.result.credential .resultImageBox .resultImage .credentialBadgeIcon { position: absolute; bottom: 0; right: 0; height: 50%; width: 50%; background-size: 100%; background-position: center center; background-repeat: no-repeat; }
	.result.credential .credentialBadgeIcon[data-hasbadge='false'] { display: none; }
	.result.credential .resultImageBox .credentialTypeLabel { padding: 5px; text-align: center; font-style: italic; font-size: 14px; color: #45A085; }
	.result.organization .resultImageBox .resultImage { border: 1px solid #CAD9DB; background-image: linear-gradient(#CCC, #EEE); }
	.result.assessment .resultImageBox { display: none; }
	.result.learningopportunity .resultImageBox { display: none; }
	.result .resultDataBox { -webkit-flex: 100% 1 1; flex: 100% 1 1; display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; padding: 0 10px; }
	.result .resultDataBox .resultHeader { position: relative; padding-right: 135px; min-height: 45px; }
	.result .resultDataBox .resultHeader .resultName { display: table; font-size: 24px; font-weight: bold; color: #607171; }
	.result .resultDataBox .resultHeader .resultOwner, .result .resultDataBox .resultHeader .specificLocation { display: inline-block; padding: 5px; color: #3D4443; font-style: italic; vertical-align: middle; }
	.result .resultDataBox .resultHeader .specificLocation[data-location='{Location}'] { display: none; }
	.result .resultDataBox .resultHeader .resultOwner[data-ownerID='0'] { display: none; }
	.result .resultDataBox .resultHeader .resultLocationsBox { display: inline-block; padding: 5px; }
	.result .resultDataBox .resultHeader .resultLocationsBox[data-showLocationsBox='false'] { display: none; }
	.result .resultDataBox .resultHeader .resultLocationsBox[data-showLocations='false'] .resultLocations { display: none; }
	.result .resultDataBox .resultHeader .resultLocationsBox[data-showLocations='true'] .btnAvailableAt { display: none; }
	.result .resultDataBox .resultHeader .resultLocationsBox .mapButton { color: #45A085; margin: 2px; }
	.result .resultDataBox .resultHeader .compareButton { position: absolute; top: 0; right: 0; width: 125px; height: 40px; }
    .result .resultDataBox .resultHeader .compareButton .fa { padding: 0 5px; }
    .result .resultDataBox .resultHeader .compareButton .status { display: none; }
    .result .resultDataBox .resultHeader .compareButton[data-compareInList=true] span.isInList { display: inline; }
    .result .resultDataBox .resultHeader .compareButton[data-compareInList=false] span.notInList { display: inline; }
    .result .resultDataBox .resultHeader .compareButton[data-compareInList=working] span.working { display: inline; }
	.result .resultDataBox .resultDescriptionBox { padding: 10px 0; max-height: 150px; min-height: 100px; overflow: hidden; position: relative; }
	.result .resultDataBox .resultDescriptionBox .resultDescription { line-height: 1.5em; -moz-column-count: 2; column-count: 2; margin-bottom: 10px; }
	.result .resultDataBox .resultDescriptionBox .resultDescriptionFade { position: absolute; bottom: 0; left: 0; width: 100%; height: 50px; background-image: linear-gradient(rgba(255,255,255,0),rgba(255,255,255,1)); z-index: 10; }
	.result .resultDataBox .editBox { text-align: right; margin-top: auto; }
	.result .resultDataBox .editBox .whiteButton { font-size: 12px; border-color: transparent; padding: 5px; opacity: 0.6; }
	.result .resultDataBox .editBox .whiteButton:focus, .result .resultDataBox .editBox .whiteButton:hover { border-color: #CAD9DB; opacity: 1; }
	.result .resultTagsBox .queryValues { display: none; }

	.result .resultTagsBox .tagContentBox:not(.selected) { display: none; }
	.result .resultTagsBox .tagContentBox { padding: 5px 0; }
	.result .resultTagsBox .tagItemButton { padding: 5px 10px; margin: 5px; }
	.result .resultTagsBox .tagContentBox .noQuery { display: inline-block; background-color: #F5F5F5; border-radius: 5px; margin: 2px; padding: 5px 10px; }
	.result .resultTagsBox .tagContentBox[data-name='competencies'] .tagItemButton { text-align: left; width: 100%; display: block; }
	.result .resultTagsBox .tagContentBox[data-name='competencies'] .tagItemButton .label { white-space: pre-line; }
    .result .resultTagsBox .tagSetButton { background-position: top 10px left 10px; background-size: 20px; background-repeat: no-repeat; min-width: 150px; padding: 12px 10px 12px 40px; text-align: left; margin: 3px; }
    .result .resultTagsBox .tagSetList { padding: 5px; }
    .result .resultTagsBox .tagSetList:not(.selected) { display: none; }
    .result .resultTagsBox .tagSetList .guidance { padding: 5px; font-style: italic; }
    .result .resultTagsBox .tagSetItem { padding: 5px; margin: 2px; }

	/* Map */
	#mapBox { display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; position: absolute; top: 0; right: 0; width: 50%; height: calc(100vh - 40px); background-color: #CCC; }
	#mapBox #mapHeader { background-color: #F5F5F5; min-height: 75px; padding: 5px 0; }
	#mapBox #mapHeader #mapGuidance { padding: 5px; font-size: 12px; text-align: center; }
	#mapBox #mapHeader #mapHeaderInputs { display: -webkit-flex; display: flex; padding: 5px; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox { -webkit-flex: 100% 1 1; flex: 100% 1 1; position: relative; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #txtLocationSearch { display: block; width: 100%; border-radius: 4px 0 0 4px; height: 30px; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox[data-active=false] { display: none; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox { position: absolute; top: 30px; width: 100%; padding: 5px; background-color: #FFF; z-index: 100; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #locationSearchStatus { font-style: italic; text-align: center; padding: 5px; font-weight: lighter; padding-right: 35px; min-height: 35px; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #btnCloseLocationSearchResults { position: absolute; top: 5px; right: 5px; width: 26px; height: 26px; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #locationSearchResultsList {  }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #locationSearchResultsList .locationSearchResult { display: block; width: 100%; border-radius: 0; padding: 5px; margin-bottom: 5px; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #locationSearchResultsList .locationSearchResult .title { font-weight: bold; }
	#mapBox #mapHeader #mapHeaderInputs #mapSearchBox #locationSearchResultsBox #locationSearchResultsList .locationSearchResult .location { font-size: 80%; font-style: italic; }
	#mapBox #mapHeader #mapHeaderInputs #btnMapSearch { -webkit-flex: 150px 0 0; flex: 150px 0 0; border-radius: 0 4px 4px 0; height: 30px; }
	#mapBox #mapHeader #mapHeaderInputs #btnCloseMap { -webkit-flex: 40px 0 0; flex: 40px 0 0; margin-left: 5px; height: 30px; }
	#mapBox #googleMap { -webkit-flex: auto 1 1; flex: auto 1 1; }
	#mapBox.sticky { position: fixed; top: 0; }
	#mapBox.sticky.bottom { position: absolute; top: auto; bottom: 0; }

	/* Miscellaneous */
	.ui-autocomplete { background-color: #FFF; list-style-type: none; border: 1px solid #CAD9DB; margin: 0; padding: 0; }
	.ui-autocomplete .ui-menu-item { padding: 5px; color: inherit; margin: 0; border: 0; }
	.ui-state-focus { border: none; background-color: transparent; font-weight: inherit; color: inherit; }
	.ui-autocomplete .ui-menu-item:hover, .ui-autocomplete .ui-menu-item:focus { background-color: #BADCA3; }
	#waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }
    #wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }
    #waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }
    #waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }


	/* Responsive */
	@@media(max-width: 1200px){
		#searchMainInputs { -webkit-flex-direction: column; flex-direction: column; padding: 25px 5vw 10px 5vw }
		#searchMainInputs .searchHeaderItem .searchHeaderItemContent { height: 40px; width: 100%; }
		#searchMainInputs .searchHeaderItem, #searchMainInputs .searchHeaderItem:first-child, #searchMainInputs .searchHeaderItem:last-child { display: -webkit-flex; display: flex; -webkit-align-items: baseline; align-items: baseline; width: 100%; margin: 5px 0; }
		#searchMainInputs .searchHeaderItem .searchHeaderItemTitle { width: 100px; margin-right: 10px; text-align: right; }
		#searchMainInputs .searchHeaderItem#searchKeywordBox #btnClearKeywords { bottom: 8px; }
		#searchResultsContent[data-viewMode=map] .result .resultImageBox { display: none; }
		.result .resultDataBox .resultDescriptionBox .resultDescription { -moz-column-count: 1; column-count: 1; }
		.result .resultDataBox .resultHeader { padding-right: 60px; }
		.result .resultDataBox .resultHeader .compareButton { width: 40px; padding: 0; }
		.result .resultDataBox .resultHeader .compareButton span { display: none; }
	}
	@@media(max-width: 900px){
		#searchMainFilters .filter[data-filtertype=code] .filterItems.columns { -moz-column-count: 1; column-count: 1; }
		#searchResultsHeader #resultsSettings #viewModes button { width: 40px; padding: 0; }
		#searchResultsHeader #resultsSettings #viewModes button span { display: none; }
		#searchMainFilters .filter[data-filtertype=framework] .frameworkColumns { display: block; }
		#mapBox #mapHeader #mapHeaderInputs #btnMapSearch { -webkit-flex: 40px 0 0; flex: 40px 0 0; }
		#mapBox #mapHeader #mapHeaderInputs #btnMapSearch .label { display: none; }
		.result .resultImageBox { width: 100px; }
		.result .resultImageBox .resultImage { height: 75px; }
	}
	@@media(max-width: 700px){
		#searchMainInputs .searchHeaderItem .searchHeaderItemContent * { font-size: 18px; }
		#searchMainInputs .searchHeaderItem#searchKeywordBox #btnClearKeywords i {  }
		#searchMainFilters #mainFiltersContent { display: block; }
		#searchMainFilters #filtersList { width: 100%; }
		#searchMainFilters #filters { width: 100%; }
		#searchResultsHeader { display: block; text-align: right; }
		#searchResultsHeader #resultsSettings { -webkit-justify-content: flex-end; justify-content: flex-end; }
		.result .resultImageBox { display: none; }
		#searchResultsContent[data-viewMode=map] { padding: 0 5vw 50vh 5vw; }
		#mapBox, #mapBox.sticky { position: fixed; top: 50%; left: 0; width: 100%; }
		#mapBox.sticky.bottom { position: absolute; top: auto; bottom: 0; }
	}
	@@media(max-width: 500px){
		#searchMainInputs .searchHeaderItem #searchButtons button .buttonText { display: none; }
	}
</style>
<style type="text/css">
	#searchMainInputs { background-image: url('@Url.Content( "~/Images/V2/Common/wallpaper_industries_green_30deg.png" )') }
	.result.credential [data-credentialType*=adge] { background-image: url('@Url.Content("~/images/V2/icons/flat_badge.png")'); }
    .result.credential [data-credentialType*=ertificate] { background-image: url('@Url.Content("~/images/V2/icons/flat_certificate.png")'); }
    .result.credential [data-credentialType*=ertification] { background-image: url('@Url.Content("~/images/V2/icons/flat_certification.png")'); }
    .result.credential [data-credentialType*=egree], .result.credential [data-credentialType*=master] { background-image: url('@Url.Content("~/images/V2/icons/flat_degree.png")'); }
    .result.credential [data-credentialType*=iploma], .result.credential [data-credentialType*=eneraleducationdev] { background-image: url('@Url.Content("~/images/V2/icons/flat_diploma.png")'); }
    .result.credential [data-credentialType*=icense] { background-image: url('@Url.Content("~/images/V2/icons/flat_license.png")'); }
    .result.credential [data-credentialType*=pprentice] { background-image: url('@Url.Content("~/images/V2/icons/flat_apprenticeship.png")'); }
    .result.credential [data-credentialType*=ilitary] { background-image: url('@Url.Content("~/images/V2/icons/flat_military.png")'); }
    .result.credential [data-credentialType*=icro] { background-image: url('@Url.Content("~/images/V2/icons/flat_micro.png")'); }
    .result.credential [data-credentialType*=uality] { background-image: url('@Url.Content("~/images/V2/icons/flat_quality.png")'); }
	.result.credential .resultImageBox .resultImage .credentialBadgeIcon { background-image: url('@Url.Content("~/images/V2/icons/flat_badge.png")'); }

	.tagSetButton[data-name=connections] { background-image: url('@Url.Content( "~/images/icons/cti_icon_connections.png" )'); }
	.tagSetButton[data-name*=own] { background-image: url('@Url.Content( "~/images/icons/cti_icon_connections.png" )'); }
	.tagSetButton[data-name*=quality] { background-image: url('@Url.Content( "~/images/icons/cti_icon_quality.png" )'); }
	.tagSetButton[data-name=level] { background-image: url('@Url.Content( "~/images/icons/cti_icon_levels.png" )'); }
	.tagSetButton[data-name=occupation] { background-image: url('@Url.Content( "~/images/icons/cti_icon_occupations.png" )'); }
	.tagSetButton[data-name=industry] { background-image: url('@Url.Content( "~/images/icons/cti_icon_industries.png" )'); }
	.tagSetButton[data-name=subjects] { background-image: url('@Url.Content( "~/images/icons/cti_icon_subjects.png" )'); }
	.tagSetButton[data-name=competencies] { background-image: url('@Url.Content( "~/images/icons/cti_icon_competencies.png" )'); }
	.tagSetButton[data-name=time] { background-image: url('@Url.Content( "~/images/icons/cti_icon_duration.png" )'); }
	.tagSetButton[data-name=cost] { background-image: url('@Url.Content( "~/images/icons/cti_icon_cost.png" )'); }
	.tagSetButton[data-name=organizationtype] { background-image: url('@Url.Content( "~/images/icons/cti_icon_interests.png" )'); }
	.tagSetButton[data-name=organizationsectortype] { background-image: url('@Url.Content( "~/images/icons/cti_icon_interests.png" )'); }

</style>

<div id="searchHeaderSection">
	<div id="searchMainInputs">
		<div class="searchHeaderItem" id="searchTypeBox">
			<div class="searchHeaderItemTitle">Search</div>
			<div class="searchHeaderItemContent">
				<select id="ddlSearchType" class="fullHeight">
					<option value="credential" @( searchType == "credential" ? "selected=\"selected\"": "" )>Credentials</option>
					<option value="organization" @( searchType == "organization" ? "selected=\"selected\"": "" )>Organizations</option>
					<option value="assessment" @( searchType == "assessment" ? "selected=\"selected\"": "" )>Assessments</option>
					<option value="learningopportunity" @( searchType == "learningopportunity" ? "selected=\"selected\"": "" )>Learning Opportunities</option>
				</select>
			</div>
		</div>
		<div class="searchHeaderItem" id="searchKeywordBox">
			<div class="searchHeaderItemTitle">For</div>
			<div class="searchHeaderItemContent">
				<input type="text" id="txtSearchKeyword" placeholder="Start typing to search..." class="fullHeight hasAutoComplete" data-autocompletecontext="mainsearch" />
				<button id="btnClearKeywords" class="closeButton"><i class="fa fa-close"></i></button>
			</div>
		</div>
		<div class="searchHeaderItem" id="searchButtonsBox">
			<div class="searchHeaderItemTitle"></div>
			<div class="searchHeaderItemContent" id="searchButtons">
				<button id="btnDoSearch" class="blueButton fullHeight" title="Search"><i class="fa fa-search"></i><span class="buttonText">Search</span></button>
				<button id="btnToggleFilters" class="greenButton fullHeight" title="Filters"><i class="fa fa-plus"></i><span class="buttonText">Filters</span></button>
				<button id="btnResetSearch" class="redButton fullHeight" title="Reset"><i class="fa fa-refresh"></i></button>
			</div>
		</div>
	</div>
	<div id="searchMainFilters">
		<div id="mainFiltersHeader">
			<div class="label">Add Filters</div>
			<button class="closeButton whiteGhost borderedGhost" id="btnCloseMainFilters"><i class="fa fa-close"></i></button>
		</div>
		<div id="mainFiltersContent">
			<div id="filtersList">
				@* Credential *@
				<div class="filterList" data-searchType="credential">
					@RenderFilterListItem( "credential", "CredentialTypes", "Credential Types" )
					@RenderFilterListItem( "credential", "AudienceLevelTypes", "Audience Level Types" )
					@RenderFilterListItem( "credential", "CredentialConnections", "Credential Connections" )
					@RenderFilterListItem( "credential", "Competencies", "Competencies" )
					@RenderFilterListItem( "credential", "Subjects", "Subject Areas" )
					@RenderFilterListItem( "credential", "Occupations", "Occupations" )
					@RenderFilterListItem( "credential", "Industries", "Industries" )
					@RenderFilterListItem( "credential", "QualityAssurance", "Quality Assurance" )
					@RenderFilterListItem( "credential", "Reports", "Reports", isUserSiteStaff )
				</div>

				@* Organization *@
				<div class="filterList" data-searchType="organization">
					@RenderFilterListItem( "organization", "OrganizationTypes", "Organization Types" )
					@RenderFilterListItem( "organization", "Industries", "Industries" )
					@RenderFilterListItem( "organization", "ServiceTypes", "Service Types" )
					@RenderFilterListItem( "organization", "SectorTypes", "Sector Types" )
					@RenderFilterListItem( "organization", "QualityAssurance", "Quality Assurance" )
					@RenderFilterListItem( "organization", "Reports", "Reports", isUserSiteStaff )
				</div>

				@* Assessment *@
				<div class="filterList" data-searchType="assessment">
					@RenderFilterListItem( "assessment", "Competencies", "Competencies" )
					@RenderFilterListItem( "assessment", "Subjects", "Subject Areas" )
					@RenderFilterListItem( "assessment", "AssessmentMethodTypes", "Assessment Method Types" )
					@RenderFilterListItem( "assessment", "AssessmentUseTypes", "Assessment Use Types" )
					@RenderFilterListItem( "assessment", "ScoringMethodTypes", "Scoring Method Types" )
					@RenderFilterListItem( "assessment", "DeliveryMethodTypes", "Delivery Method Types" )
					@RenderFilterListItem( "assessment", "InstructionalProgramClassifications", "Instructional Program Classification" )
					@RenderFilterListItem( "assessment", "QualityAssurance", "Quality Assurance" )
					@RenderFilterListItem( "assessment", "Reports", "Reports", isUserSiteStaff )
				</div>

				@* Learning Opportunity *@
				<div class="filterList" data-searchType="learningopportunity">
					@RenderFilterListItem( "learningopportunity", "Competencies", "Competencies" )
					@RenderFilterListItem( "learningopportunity", "Subjects", "Subject Areas" )
					@RenderFilterListItem( "learningopportunity", "InstructionalProgramClassifications", "Instructional Program Classification" )
					@RenderFilterListItem( "learningopportunity", "LearningMethodTypes", "Learning Method Types" )
					@RenderFilterListItem( "learningopportunity", "DeliveryMethodTypes", "Delivery Method Types" )
					@RenderFilterListItem( "learningopportunity", "QualityAssurance", "Quality Assurance" )
					@RenderFilterListItem( "learningopportunity", "Reports", "Reports", isUserSiteStaff )
				</div>

			</div>
			<div id="filters">
				@* Credential *@
				@RenderCodeFilter( "credential", "CredentialTypes", "", "Select one or more types of credentials to look for.", "Credential Type", enumServices.GetCredentialType( workIT.Models.Common.EnumerationType.MULTI_SELECT, true ), true, false, new List<string>() { "ceterms:QualityAssuranceCredential", "ceterms:DigitalBadge", "ceterms:OpenBadge" }, new Dictionary<string, List<string>>() { { "ceterms:Badge", new List<string>() { "ceterms:DigitalBadge", "ceterms:OpenBadge" } } } )
				@RenderCodeFilter( "credential", "AudienceLevelTypes", "", "Select the educational levels that best describe the credentials you're looking for.", "Audience Level Type", enumServices.GetAudienceLevel( workIT.Models.Common.EnumerationType.MULTI_SELECT, false ) )
				@RenderCodeFilter( "credential", "CredentialConnections", "", "Search for credentials with the following types of connections to other credentials:", "Credential Connection", enumServices.GetCredentialsConditionProfile( workIT.Models.Common.EnumerationType.MULTI_SELECT, true ), true, true )
				@RenderTextFilter( "credential", "Competencies", "Competencies", "Enter a keyword or short phrase to show results with matching competencies.", "Competency" )
				@RenderTextFilter( "credential", "Subjects", "Subject Areas", "Enter a keyword or short phrase to show results with matching subjects.", "Subject" )
				@RenderFrameworkFilter( "credential", "Occupations", "OccupationSearch", "", "Use the fields below to find and select one or more occupations that you're interested in to display credentials best suited to those occupations.", "Occupation", "Find Occupations", "Selected Occupations", EnumerationServices.SOC_Categories_Enumeration( false ), "Select an Occupation Category" )
				@RenderFrameworkFilter( "credential", "Industries", "IndustrySearch", "", "Use the fields below to find and select one or more industries that you're interested in to display credentials in those industries.", "Industry", "Find Industries", "Selected Industries", EnumerationServices.NAICS_CategoriesInUse_Enumeration( 1 ), "Select an Industry Category" )
				@RenderCodeFilter( "credential", "QualityAssurance", "", "Select one or more types of quality assurance to display credentials that have received those types of assurance.", "Quality Assurance", enumServices.GetCredentialAgentQAActions( EnumerationType.MULTI_SELECT, "Credential", false ) )
				@RenderCodeFilter( "credential", "Reports", "", "Select a custom report type.", "Report", enumServices.GetEnumeration( "CredentialReports", EnumerationType.SINGLE_SELECT, false ), true )

				@* Organization *@
				@RenderCodeFilter( "organization", "OrganizationTypes", "", "Select one or more types of organization to display.", "Organization Type", enumServices.GetOrganizationType( workIT.Models.Common.EnumerationType.MULTI_SELECT ), true )
				@RenderFrameworkFilter( "organization", "Industries", "IndustrySearch", "", "Use the fields below to find and select one or more industries that you're interested in to display organizations in those industries.", "Industry", "Find Industries", "Selected Industries", EnumerationServices.NAICS_CategoriesInUse_Enumeration( 2 ), "Select an Industry Category" )
				@RenderCodeFilter( "organization", "ServiceTypes", "", "Select one or more services offered by an organization.", "Service Type", enumServices.GetOrganizationServices( EnumerationType.MULTI_SELECT, false ), true )
				@RenderCodeFilter( "organization", "SectorTypes", "", "Select one or more sectors in which the organization operates.", "Sector Type", enumServices.GetEnumeration( "orgSectorType", EnumerationType.SINGLE_SELECT, false ) )
				@RenderCodeFilter( "organization", "QualityAssurance", "", "Select one or more types of quality assurance to display organizations that have received those types of assurance.", "Quality Assurance", enumServices.GetCredentialAgentQAActions( EnumerationType.MULTI_SELECT, "Organization", false ) )
				@RenderCodeFilter( "organization", "Reports", "", "Select a custom report type.", "Report", enumServices.GetEnumeration( "OrganizationReports", EnumerationType.SINGLE_SELECT, false ), true )

				@* Assessment *@
				@RenderTextFilter( "assessment", "Competencies", "Competencies", "Enter a keyword or short phrase to show results with matching competencies.", "Competency" )
				@RenderTextFilter( "assessment", "Subjects", "Subject Areas", "Enter a keyword or short phrase to show results with matching subjects.", "Subject" )
				@RenderCodeFilter( "assessment", "AssessmentMethodTypes", "", "Select one or more methods of assessment to display assessments that use those methods.", "Assessment Method Type", enumServices.GetEnumeration( "assessmentMethodType", EnumerationType.CUSTOM, false, false ) )
				@RenderCodeFilter( "assessment", "AssessmentUseTypes", "", "Select one or more assessment uses.", "Assessment Use Type", enumServices.GetEnumeration( "assessmentUse", EnumerationType.MULTI_SELECT, false, false ) )
				@RenderCodeFilter( "assessment", "ScoringMethodTypes", "", "Select one or more types of assessment scoring methods.", "Scoring Method Type", enumServices.GetEnumerationForRadioButtons( "scoringMethod", -1, false ) )
				@*@RenderCodeFilter( "assessment", "DeliveryMethodTypes", "", "Select one or more assessment delivery methods.", "Delivery Method", deliveryMethods )*@
				@RenderFrameworkFilter( "assessment", "InstructionalProgramClassifications", "CIPSearch", "", "Use the fields below to find and select one or more classifications of instructional programs that you're interested in to display assessments that match those classifications.", "Instructional Program Classification", "Find Classifications", "Selected Classifications", EnumerationServices.CIPS_CategoriesInUse_Enumeration( 3 ), "Select an Instructional Program Classification Category" )
				@RenderCodeFilter( "assessment", "QualityAssurance", "", "Select one or more types of quality assurance to display assessments that have received those types of assurance.", "Quality Assurance", enumServices.GetCredentialAgentQAActions( EnumerationType.MULTI_SELECT, "Assessment", false ) )
				@RenderCodeFilter( "assessment", "Reports", "", "Select a custom report type.", "Report", enumServices.GetEnumeration( "AssessmentReports", EnumerationType.SINGLE_SELECT, false ), true )

				@* Learning Opportunity *@
				@RenderTextFilter( "learningopportunity", "Competencies", "Competencies", "Enter a keyword or short phrase to show results with matching competencies.", "Competency" )
				@RenderTextFilter( "learningopportunity", "Subjects", "Subject Areas", "Enter a keyword or short phrase to show results with matching subjects.", "Subject" )
				@RenderFrameworkFilter( "learningopportunity", "InstructionalProgramClassifications", "CIPSearch", "", "Use the fields below to find and select one or more classifications of instructional programs that you're interested in to display learning opportunities that match those classifications.", "Instructional Program Classification", "Find Classifications", "Selected Classifications", EnumerationServices.CIPS_CategoriesInUse_Enumeration( 7 ), "Select an INstructional Program Classification Category" )
				@RenderCodeFilter( "learningopportunity", "LearningMethodTypes", "", "Select one or more types of learning method.", "Learning Method Type", enumServices.GetEnumeration( "learningMethodType", EnumerationType.MULTI_SELECT, true ) )
				@*@RenderCodeFilter( "learningopportunity", "DeliveryMethodTypes", "", "Select one or more learning opportunity delivery methods.", "Delivery Method", deliveryMethods )*@
				@RenderCodeFilter( "learningopportunity", "QualityAssurance", "", "Select one or more types of quality assurance to display assessments that have received those types of assurance.", "Quality Assurance", enumServices.GetCredentialAgentQAActions( EnumerationType.MULTI_SELECT, "LearningOpportunity", false ) )
				@RenderCodeFilter( "learningopportunity", "Reports", "", "Select a custom report type.", "Report", enumServices.GetEnumeration( "LOPPReports", EnumerationType.SINGLE_SELECT, false ), true )
			</div>
		</div>
	</div>
	<div id="searchSelectedTags" data-totalTags="0">
		<div id="searchSelectedTagsList"></div>
		<button class="redButton" id="btnClearAllTags" title="Clear Filters"><i class="fa fa-close"></i></button>
	</div>
</div>
<div id="searchResultsSection">
	<div id="searchResultsHeader">
		<div id="searchStatus">Ready to Search</div>
		<div id="resultsSettings">
			<select id="ddlSortOrder">
				<option value="alpha">Sort A-Z</option>
				<option value="newest">Sort by Most Recent</option>
			</select>
			<div id="viewModes">
				<button class="whiteButton @( viewMode == "list" ? "selected" : "" )" data-viewMode="list"><i class="fa fa-fw fa-list"></i><span class="label"> List</span></button>
				<button class="whiteButton @( viewMode == "map" ? "selected" : "" )" data-viewMode="map"><i class="fa fa-fw fa-map-marker"></i><span class="label"> Map</span></button>
			</div>
		</div>
	</div>
	<div id="searchResultsContent" data-viewMode="@viewMode" data-searchInProgress="false">
		<div id="searchResultsBox">
			<div id="searchResultsList"></div>
			<div id="searchScrollStatus">
				<div class="searching">Search in progress...</div>
				<div class="done">No more results to display</div>
			</div>
		</div>
		<div id="mapBox">
			<div id="mapHeader">
				<div id="mapGuidance">Drag and resize the map to frame the area to search, or search for a location to reposition the map.</div>
				<div id="mapHeaderInputs">
					<div id="mapSearchBox">
						<input type="text" id="txtLocationSearch" placeholder="Find a Place..." />
						<div id="locationSearchResultsBox" data-active="false">
							<div id="locationSearchStatus"></div>
							<button class="closeButton" id="btnCloseLocationSearchResults"><i class="fa fa-close"></i></button>
							<div id="locationSearchResultsList"></div>
						</div>
					</div>
					<button id="btnMapSearch" title="Search Map Area" class="blueButton"><i class="fa fa-map-o"></i><span class="label"> Search Area</span></button>
					<button id="btnCloseMap" class="redButton" title="Close Map"><i class="fa fa-close"></i></button>
				</div>
			</div>
			<div id="googleMap"></div>
		</div>
	</div>
</div>
<div id="waitWrapper">
    <div id="wait"><i id="waitSpinner" class="fa fa-spin fa-spinner"></i><div id="waitTitle">Working...</div></div>
</div>

@*@Html.Partial( "~/Views/V2/Compare/_CompareBar.cshtml", "" )*@
<script src="https://maps.googleapis.com/maps/api/js?key=@googleMapsKey&callback=setupMapBox"></script>

<div id="templates" style="display:none;">
	@* Credential Result *@
	<script type="text/template" id="template_searchresult">
		<div class="result {SearchType}" data-resultID="{RecordId}">
			<div class="resultImageBox">
				<div class="resultImage" data-resultImageUrl="{ResultImageUrl}" data-credentialType="{TypeSchema}">
					<div class="credentialBadgeIcon credentialOnly" data-hasBadge="{HasBadge}" title="This credential includes a virtual badge as proof of completion."></div>
				</div>
				<div class="credentialTypeLabel credentialOnly">{Type}</div>
				<div class="credentialTypeLabel credentialOnly" data-hasBadge="{HasBadge}">+ Badge Issued</div>
			</div>
			<div class="resultDataBox">
				<div class="resultHeader">
					<a class="resultName" href="@Url.Content( "~/" ){SearchType}/{RecordId}/{UrlTitle}" target="detailWindow">{Name}</a>
					<a class="resultOwner" data-ownerID="{OwnerId}" href="@Url.Content( "~/organization/" ){OwnerId}" target="detailWindow">{Owner}</a>
					<div class="specificLocation organizationOnly" data-location="{Location}">{Location}</div>
					<div class="resultLocationsBox" data-showLocationsBox="false" data-showLocations="false">
						<button class="whiteButton mapButton btnAvailableAt"><i class="fa fa-map-marker"></i><span class="label"></span></button>
						<div class="resultLocations"></div>
					</div>
					<button class="actionButton compareButton" data-compareinlist="false" data-id="{RecordId}" onclick="compare.toggleCompareItem({RecordId}, '{SearchType}', '{Name}', this);">
						<span class="status isInList"><span class="label">Remove </span><i class="fa fa-close" aria-hidden="true"></i></span>
						<span class="status notInList"><span class="label">Compare </span><i class="fa fa-copy" aria-hidden="true"></i></span>
						<span class="status working"><i class="fa fa-spin fa-spinner" aria-hidden="true"></i></span>
					</button>
				</div>
				<div class="resultDescriptionBox">
					<div class="resultDescription">{Description}</div>
					<div class="resultDescriptionFade"></div>
				</div>
				<div class="resultTagsBox">
					<data class="resultTagButtons"></data>
					<data class="resultTagContent"></data>
				</div>
				<div class="editBox" data-canEdit="{CanEditRecord}">
					@*<a class="editLink linkButton whiteButton" target="editWindow" title="Edit" href="/editor/{SearchType}/{RecordId}"><i class="fa fa-pencil"></i> Edit</a>*@
@if ( isUserSiteStaff )
{
                    <button class="deleteButton whiteButton" title="Delete" onclick="deleteResult('{Name}', '{SearchType}', {RecordId});"><i class="fa fa-close"></i> Delete</button>
                    <button class="linkButton whiteButton" title="Register" onclick="registerEntity('{Name}', '{SearchType}', {RecordId});"><i class="fa fa-cloud-upload"></i> Register</button>
}
				</div>
			</div>
		</div>
	</script>

	@* Gray Tag Box *@
	<script type="text/template" id="template_tag">
        <button class="grayButton tagSetButton" data-RecordId="{RecordId}" data-IsAjaxQuery="{IsAjaxQuery}" data-AjaxQueryName="{AjaxQueryName}" data-Name="{Name}" data-SearchQueryType="{SearchQueryType}" data-CategoryName="{CategoryName}">
			<span class="label">{Display}</span>
			<div class="queryValues">{AjaxQueryValues}</div>
		</button>
	</script>

	@* Tag Item *@
	<script type="text/template" id="template_tagitem">
		<button class="whiteButton tagItemButton">
			<span class="label">{Display}</span>
			<div class="queryValues">{QueryValues}</div>
		</button>
	</script>

    @* Map Marker *@
    <script type="text/template" id="template_mapmarker_button">
        <button class="whiteButton mapButton" onclick="map.focusMapAndResult({MarkerId}, {RecordId})"><i class="fa fa-map-marker"></i></button>
    </script>

	@* Text Filter Item *@
	<script type="text/template" id="template_textfilter_item">
		<div class="filterTextItem">
			<div class="value">{value}</div>
			<button class="removeButton whiteGhost borderedGhost"><i class="fa fa-close"></i></button>
		</div>
	</script>

	@* Framework Filter Item *@
	<script type="text/template" id="template_frameworkfilter_item">
		<button class="frameworkFilterItem whiteGhost">
			<div class="selectors" style="display:none">{Selectors}</div>
			<div class="display">{Display}</div>
			<div class="add"><i class="fa fa-caret-right"></i></div>
			<div class="remove"><i class="fa fa-close"></i></div>
		</button>
	</script>

	@* Framework Paging Button *@
	<script type="text/template" id="template_frameworkfilter_pagingbutton">
		<button class="pagingButton whiteGhost borderedGhost {current}">{Display}</button>
	</script>

	@* Selected Filter *@
	<script type="text/template" id="template_selectedtag">
		<div class="selectedTag">
			<span class="prefix">{DisplayPrefix}:</span>
			<span class="display">{Display}</span>
			<button class="closeButton"><i class="fa fa-close"></i></button>
		</div>
	</script>

	@* Map Search Result *@
	<script type="text/template" id="template_locationsearch_result">
		<button class="locationSearchResult">
			<div class="title">{TitleFormatted}</div>
			<div class="location">{LocationFormatted}</div>
		</button>
	</script>
</div>

@* Template: TagV2 Button *@
<script type="text/template" id="template_tagButton">
    <button class="grayButton tagSetButton" data-resultID="{ResultId}" data-IsAjaxQuery="{IsAjaxQuery}" data-AjaxQueryName="{AjaxQueryName}" data-Name="{Name}" data-SearchQueryType="{SearchQueryType}" data-CategoryName="{CategoryName}">
		<span class="label">{Display}</span>
		<div class="queryValues">{AjaxQueryValues}</div>
	</button>
</script>

@* Template: TagV2 Item *@
<script type="text/template" id="template_tagItem">
	<button class="whiteButton tagItemButton">
		<span class="label">{Display}</span>
		<div class="queryValues">{QueryValues}</div>
	</button>
</script>
