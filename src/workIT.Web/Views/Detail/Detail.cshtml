@using workIT.Models.Common;
@using workIT.Models.ProfileModels;
@using workIT.Services;
@using workIT.Models;
@model workIT.Models.Common.BaseObject
@{
	/**/

	//Data about this page's entity
	var data = new Entity() { Source = Model };
	data.CredentialRegistryId = data.Source.CredentialRegistryId ?? "";
	data.Ctid = data.Source.CTID ?? "";
	ViewBag.Title = "Details for " + data.Source.Name;

	var isUserSiteStaff = AccountServices.IsUserSiteStaff();

	//Location/Map Helpers
	var mapData = new MapData( data.Source.Addresses );
	Dictionary<string, RegistryImport> FrameworkPayloads = new Dictionary<string, RegistryImport>();
	//Raw metadata
	data.RawMetadataImport = workIT.Factories.ImportManager.GetByCtid( data.Ctid );

	//Type-specific stuff
	switch ( Model.GetType().Name )
	{
		case "Credential":
			data.Credential = ( Credential ) Model;
			data.Type = DataTypes.CREDENTIAL;
			data.TypeString = "credential";
			data.TypeTitle = "Credential";
			data.TypeSpecific = data.Credential.CredentialType;
			data.RoleCodes = new EnumerationServices().GetCredentialAllAgentRoles( EnumerationType.CUSTOM );
			// data.RawMetadata = new JsonLDServices().GetProfileV2( data.Credential, new Models.JsonV2.Credential(), data.RoleCodes.Items );
			data.Roles = SetupRoles( data.Credential.OrganizationRole );
			GetAllChildren( data.MergedRequirements, data.MergedRecommendations, data.Connections, data.Credential, null, null );
			data.AllCompetencies = GetAllCompetencies( data.MergedRequirements );
			data.IconUrl = string.IsNullOrWhiteSpace( data.Credential.ImageUrl ) ? "" : data.Credential.ImageUrl;
			//data.Connections = ConnectionData.Process( data.Credential.CredentialConnections, data.Connections, data.Credential.CommonConditions );
			data.Connections = ConnectionData.Process( data.Credential.CredentialConnections, data.Connections, new List<ConditionManifest>() );
			data.Connections.Corequisite = data.Credential.Corequisite;
			//Are roles missing? Should all be added here?
			//data.Connections.Recommends = data.Credential.Recommends;
			data.DirectAndManifestCosts = data.Credential.EstimatedCost.ToList();
			data.DirectCostManifests = data.Credential.CommonCosts.ToList();
			data.TargetLearningOpportunity = data.Credential.TargetLearningOpportunity.ToList();
			data.TargetAssessment = data.Credential.TargetAssessment.ToList();
			FrameworkPayloads = data.Credential.FrameworkPayloads;
			break;

		case "Organization":
			data.Organization = ( Organization ) Model;
			data.Type = DataTypes.ORGANIZATION;
			data.TypeString = "organization";
			data.TypeTitle = "Organization";
			data.RoleCodes = new EnumerationServices().GetAllAgentReverseRoles( EnumerationType.CUSTOM );
			if ( data.Organization.AgentType.Items.Where( m => m.SchemaName == "orgType:QualityAssurance" ).Count() > 0 )
			{
				data.TypeSpecific = "Quality Assurance Organization";
				// data.RawMetadata = new JsonLDServices().GetProfileV2( data.Organization, new Models.JsonV2.QACredentialOrganization(), data.RoleCodes.Items );
				data.IconUrl = string.IsNullOrWhiteSpace( data.Organization.ImageUrl ) ? "" : data.Organization.ImageUrl;
			}
			else
			{
				data.TypeSpecific = "Credentialing Organization";
				// data.RawMetadata = new JsonLDServices().GetProfileV2( data.Organization, new Models.JsonV2.CredentialOrganization(), data.RoleCodes.Items );
				data.IconUrl = string.IsNullOrWhiteSpace( data.Organization.ImageUrl ) ? "" : data.Organization.ImageUrl;
			}
			data.Roles = SetupRoles( data.Organization.OrganizationRole_Recipient );
			data.Roles.Owner = data.Roles.Owner.Concat( data.Organization.ParentOrganizations.Where( m => m != null && m.Id > 0 ) ).ToList();  //Needs more data
																																			   //19-01-24 may temporarily only retrieve 'n' records, and have a link to a search
			data.RolesPerformed = SetupRoles( data.Organization.OrganizationRole_Actor );
			data.RolesPerformed.QADirectActualCount = data.RolesPerformed.QADirect.Count();
			if ( data.Organization.ActualActorRoleCount > 0 && data.RolesPerformed.QADirect.Count() < data.Organization.ActualActorRoleCount )
			{
				data.RolesPerformed.QADirectActualCount = data.Organization.ActualActorRoleCount;
			}
			break;

		case "AssessmentProfile":
			data.Assessment = ( AssessmentProfile ) Model;
			data.Type = DataTypes.ASSESSMENT;
			data.TypeString = "assessment";
			data.TypeTitle = "Assessment";
			data.TypeSpecific = "Assessment";
			data.RoleCodes = new EnumerationServices().GetAssessmentAgentRoles( EnumerationType.CUSTOM );
			//data.RawMetadata = new JsonLDServices().GetProfileV2( data.Assessment, new Models.JsonV2.AssessmentProfile(), data.RoleCodes.Items );
			data.Roles = SetupRoles( data.Assessment.OrganizationRole );
			GetAllChildren( data.MergedRequirements, data.MergedRecommendations, data.Connections, null, data.Assessment, null );
			data.AllCompetencies = GetAllCompetencies( data.MergedRequirements );
			data.IconUrl = "";
			data.Assessment.IsPartOfConditionProfile.ForEach( m => m.TargetCredential.Add( m.ParentCredential ) );
			//data.Connections.IsRequiredFor = data.Assessment.IsPartOfConditionProfile;
			data.Connections = ConnectionData.Process( data.Assessment.AssessmentConnections, data.Connections, data.Assessment.CommonConditions );
			data.Connections.EntryCondition = data.Assessment.EntryCondition;
			data.Connections.Corequisite = data.Assessment.Corequisite;
			data.DirectAndManifestCosts = data.Assessment.EstimatedCost.Concat( data.Assessment.CommonCosts.SelectMany( m => m.EstimatedCosts ) ).ToList();
			data.DirectCostManifests = data.Assessment.CommonCosts.ToList();
			FrameworkPayloads = data.Assessment.FrameworkPayloads;
			break;

		case "LearningOpportunityProfile":
			data.LearningOpportunity = ( LearningOpportunityProfile ) Model;
			data.Type = DataTypes.LEARNINGOPPORTUNITY;
			data.TypeString = "learningopportunity";
			data.TypeTitle = "Learning Opportunity";
			data.TypeSpecific = "Learning Opportunity";
			data.RoleCodes = new EnumerationServices().GetLearningOppAgentRoles( EnumerationType.CUSTOM );
			//data.RawMetadata = new JsonLDServices().GetProfileV2( data.LearningOpportunity, new Models.JsonV2.LearningOpportunityProfile(), data.RoleCodes.Items );
			data.Roles = SetupRoles( data.LearningOpportunity.OrganizationRole );
			GetAllChildren( data.MergedRequirements, data.MergedRecommendations, data.Connections, null, null, data.LearningOpportunity );
			data.AllCompetencies = GetAllCompetencies( data.MergedRequirements );
			data.IconUrl = "";
			data.LearningOpportunity.IsPartOfConditionProfile.ForEach( m => m.TargetCredential.Add( m.ParentCredential ) );
			//data.Connections.IsRequiredFor = data.LearningOpportunity.IsPartOfConditionProfile;
			data.Connections = ConnectionData.Process( data.LearningOpportunity.LearningOppConnections, data.Connections, data.LearningOpportunity.CommonConditions );
			data.Connections.EntryCondition = data.LearningOpportunity.EntryCondition;
			data.Connections.Corequisite = data.LearningOpportunity.Corequisite;
			data.DirectAndManifestCosts = data.LearningOpportunity.EstimatedCost.ToList();
			data.DirectCostManifests = data.LearningOpportunity.CommonCosts.ToList();
			FrameworkPayloads = data.LearningOpportunity.FrameworkPayloads;
			break;

		default:
			break;
	}

	//Don't hurt partner SEO
	if ( !string.IsNullOrWhiteSpace( ( string ) data.Source.SubjectWebpage ) )
	{
		//ViewBag.CanonicalUrl = ( string ) data.Source.SubjectWebpage; //Not sure if this is needed or appropriate?
	}
	var allCompetencies = data.AllCompetencies.RequiresByFramework.Concat( data.AllCompetencies.AssessesByFramework ).Concat( data.AllCompetencies.TeachesByFramework ).ToList();
	var allFrameWorks = new Dictionary<string, List<string>>();
	foreach ( var frameWork in allCompetencies )
	{
		if ( !string.IsNullOrWhiteSpace( frameWork.CaSSViewerUrl ) && !allFrameWorks.ContainsKey( frameWork.CaSSViewerUrl ?? "" ) )
		{
			allFrameWorks.Add( frameWork.CaSSViewerUrl, frameWork.Items.Select( m => m.TargetNode ).ToList() );
		}
	}
}
@functions
{
	public enum DataTypes { ENTITY, CREDENTIAL, ORGANIZATION, ASSESSMENT, LEARNINGOPPORTUNITY }
	public enum CompetencyTypes { REQUIRES, TEACHES, ASSESSES }
	public string targetWindowBase = "";// "win" + DateTime.Now.ToString( "hhmmss" ) + "_"; //Changed to be more aggressive
	public string credentialPublisherSite = workIT.Utilities.UtilityManager.GetAppKeyValue( "credentialPublisherSite" );
	// public string registryResourceUrl = ServiceHelper.GetAppKeyValue( "credRegistryResourceUrl" );

	public class Entity
	{
		public Entity()
		{
			Type = DataTypes.ENTITY;
			TypeString = "entity";
			TypeTitle = "Entity";
			Source = new BaseObject();
			Credential = new Credential();
			Organization = new Organization();
			Assessment = new AssessmentProfile();
			LearningOpportunity = new LearningOpportunityProfile();
			RawMetadata = new Dictionary<string, object>();
			RawMetadataImport = new RegistryImport();
			CredentialRegistryId = "";
			Roles = new RoleWrapper();
			RolesPerformed = new RoleWrapper();
			IconUrl = "";
			RoleCodes = new Enumeration();
			MergedRequirements = new MergedConditions();
			MergedRecommendations = new MergedConditions();
			AllCompetencies = new CompetencyWrapper();
			Connections = new ConnectionData();
			DirectAndManifestCosts = new List<CostProfile>();
		}

		public DataTypes Type { get; set; }
		public string TypeString { get; set; }
		public string TypeTitle { get; set; }
		public string TypeSpecific { get; set; }
		public dynamic Source { get; set; }
		public Credential Credential { get; set; }
		public Organization Organization { get; set; }
		public AssessmentProfile Assessment { get; set; }
		public LearningOpportunityProfile LearningOpportunity { get; set; }
		public Dictionary<string, object> RawMetadata { get; set; }
		public RegistryImport RawMetadataImport { get; set; }
		public string CredentialRegistryId { get; set; }
		public string Ctid { get; set; }
		public Organization Owner { get { return ( Roles.Owner.FirstOrDefault() ?? new OrganizationRoleProfile() ).ActingAgent ?? new Organization(); } }
		public RoleWrapper Roles { get; set; }
		public RoleWrapper RolesPerformed { get; set; }
		public string IconUrl { get; set; }
		public Enumeration RoleCodes { get; set; }
		public MergedConditions MergedRequirements { get; set; }
		public MergedConditions MergedRecommendations { get; set; }
		public CompetencyWrapper AllCompetencies { get; set; }
		public ConnectionData Connections { get; set; }
		public List<CostProfile> DirectAndManifestCosts { get; set; }
		public List<CostManifest> DirectCostManifests = new List<CostManifest>();
		public List<LearningOpportunityProfile> TargetLearningOpportunity = new List<LearningOpportunityProfile>();
		public List<AssessmentProfile> TargetAssessment = new List<AssessmentProfile>();
	}
	//

	public class MapData
	{
		public MapData( List<Address> addresses )
		{
			Addresses = addresses ?? new List<Address>();
			HasMap = addresses.Count() > 0;
			CenterLatitude = 37.0902;
			CenterLatitude = -95.7129;
			BoundsNorth = 52.72295530280713;
			BoundsEast = -60.16114218749999;
			BoundsSouth = 17.43446294571891;
			BoundsWest = -131.2646578125;
			if ( HasMap )
			{
				MapKey = new ThirdPartyApiServices().GetGoogleMapsApiKey();
				DetermineMapCenter();
			}
		}
		public bool HasMap { get; set; }
		public string MapKey { get; set; }
		public List<Address> Addresses { get; set; }
		public double CenterLatitude { get; set; }
		public double CenterLongitude { get; set; }
		public double BoundsNorth { get; set; }
		public double BoundsEast { get; set; }
		public double BoundsSouth { get; set; }
		public double BoundsWest { get; set; }
		public void DetermineMapCenter()
		{
			var validAddresses = Addresses.Where( m => m.Latitude != 0 && m.Longitude != 0 ).ToList();
			if ( validAddresses.Count() > 0 )
			{
				var lats = validAddresses.Select( m => m.Latitude ).ToList();
				var lons = validAddresses.Select( m => m.Longitude ).ToList();
				BoundsNorth = lats.Max();
				BoundsEast = lons.Max();
				BoundsSouth = lats.Min();
				BoundsWest = lons.Min();
				CenterLatitude = ( BoundsNorth + BoundsSouth ) / 2;
				CenterLatitude = ( BoundsWest + BoundsEast ) / 2;
			}
		}
	}
	//

	public class MergedConditions : ConditionProfile
	{
		public MergedConditions()
		{
			TopLevelCredentials = new List<Credential>();
			TopLevelAssessments = new List<AssessmentProfile>();
			TopLevelLearningOpportunities = new List<LearningOpportunityProfile>();
		}

		public List<Credential> CredentialsSansSelf( int id )
		{
			return TargetCredential.Where( m => m.Id != id ).ToList();
		}
		public List<AssessmentProfile> AssessmentsSansSelf( int id )
		{
			return TargetAssessment.Where( m => m.Id != id ).ToList();
		}
		public List<LearningOpportunityProfile> LearningOpportunitiesSansSelf( int id )
		{
			return TargetLearningOpportunity.Where( m => m.Id != id ).ToList();
		}

		public List<Credential> TopLevelCredentials { get; set; }
		public List<AssessmentProfile> TopLevelAssessments { get; set; }
		public List<LearningOpportunityProfile> TopLevelLearningOpportunities { get; set; }
	}
	//

	public class CompetencyWrapper
	{
		public CompetencyWrapper()
		{
			Requires = new List<CredentialAlignmentObjectProfile>();
			Teaches = new List<CredentialAlignmentObjectProfile>();
			Assesses = new List<CredentialAlignmentObjectProfile>();
			RequiresByFramework = new List<CredentialAlignmentObjectFrameworkProfile>();
			AssessesByFramework = new List<CredentialAlignmentObjectFrameworkProfile>();
			TeachesByFramework = new List<CredentialAlignmentObjectFrameworkProfile>();
		}
		public List<CredentialAlignmentObjectProfile> Requires { get; set; }
		public List<CredentialAlignmentObjectProfile> Teaches { get; set; }
		public List<CredentialAlignmentObjectProfile> Assesses { get; set; }
		public List<CredentialAlignmentObjectProfile> Concatenated { get { return Requires.Concat( Teaches ).Concat( Assesses ).ToList(); } }
		public int Total { get { return Concatenated.Count(); } }

		public List<CredentialAlignmentObjectFrameworkProfile> RequiresByFramework { get; set; }
		public List<CredentialAlignmentObjectFrameworkProfile> AssessesByFramework { get; set; }
		public List<CredentialAlignmentObjectFrameworkProfile> TeachesByFramework { get; set; }
		public List<CredentialAlignmentObjectFrameworkProfile> ConcatenatedFrameworks { get { return RequiresByFramework.Concat( TeachesByFramework ).Concat( AssessesByFramework ).ToList(); } }
		// Will be checked later
		public List<CredentialAlignmentObjectItem> ConcatenatedCompetenciesFromFrameworks { get { return ConcatenatedFrameworks.SelectMany( m => m.Items ).ToList(); } }
		public int TotalFrameworks { get { return ConcatenatedFrameworks.Count(); } }
		public int TotalCompetenciesWithinFrameworks { get { return ConcatenatedCompetenciesFromFrameworks.Count(); } }
	}
	//

	public class RoleWrapper
	{
		public RoleWrapper()
		{
			Owner = new List<OrganizationRoleProfile>();
			NonQA = new List<OrganizationRoleProfile>();
			QADirect = new List<OrganizationRoleProfile>();
			QAFromOwner = new List<OrganizationRoleProfile>();
		}
		public List<OrganizationRoleProfile> Owner { get; set; }
		public List<OrganizationRoleProfile> NonQA { get; set; }
		public List<OrganizationRoleProfile> QADirect { get; set; }
		public int QADirectActualCount { get; set; }
		public List<OrganizationRoleProfile> QAFromOwner { get; set; }
		public List<OrganizationRoleProfile> QAMerged
		{
			get
			{
				var QA = new List<OrganizationRoleProfile>();
				//foreach ( var org in QADirect.Concat( QAFromOwner ).ToList() )
				foreach ( var org in QADirect )
				{
					var match = QA.Where( m => m.ActingAgent.Id == org.ActingAgent.Id ).FirstOrDefault();
					if ( match == null )
					{
						QA.Add( org );
					}
					else
					{
						foreach ( var role in org.AgentRole.Items.Where( m => m.IsQAValue ).ToList() )
						{
							if ( match.AgentRole.Items.Where( m => m.CodeId == role.CodeId ).Count() == 0 )
							{
								match.AgentRole.Items.Add( role );
							}
						}
					}
				}
				return QA;
			}
		}
	}
	//

	public class ConnectionData
	{
		public ConnectionData()
		{
			foreach ( var item in this.GetType().GetProperties().Where( m => m.PropertyType == typeof( List<ConditionProfile> ) ) )
			{
				item.SetValue( this, new List<ConditionProfile>() );
			}
		}
		public static ConnectionData Process( List<ConditionProfile> connections, ConnectionData existing, List<ConditionManifest> commonConditions )
		{
			var result = new ConnectionData();
			connections = connections ?? new List<ConditionProfile>();
			existing = existing ?? new ConnectionData();
			//Handle common conditions
			var manifests = ConditionManifestExpanded.ExpandConditionManifestList( commonConditions ?? new List<ConditionManifest>() );
			//Handle condition profiles
			var conditions = ConditionManifestExpanded.DisambiguateConditionProfiles( connections );
			result.Requires = existing.Requires
				.Concat( conditions.Requires )
				.Concat( manifests.SelectMany( m => m.Requires ) )
				.ToList();
			result.Recommends = existing.Recommends
				.Concat( conditions.Recommends )
				.Concat( manifests.SelectMany( m => m.Recommends ) )
				.ToList();
			result.PreparationFrom = existing.PreparationFrom
				.Concat( conditions.PreparationFrom )
				.Concat( manifests.SelectMany( m => m.PreparationFrom ) )
				.ToList();
			result.AdvancedStandingFrom = existing.AdvancedStandingFrom
				.Concat( conditions.AdvancedStandingFrom )
				.Concat( manifests.SelectMany( m => m.AdvancedStandingFrom ) )
				.ToList();
			result.IsRequiredFor = existing.IsRequiredFor
				.Concat( conditions.IsRequiredFor )
				.Concat( manifests.SelectMany( m => m.IsRequiredFor ) )
				.ToList();
			result.IsRecommendedFor = existing.IsRecommendedFor
				.Concat( conditions.IsRecommendedFor )
				.Concat( manifests.SelectMany( m => m.IsRecommendedFor ) )
				.ToList();
			result.IsAdvancedStandingFor = existing.IsAdvancedStandingFor
				.Concat( conditions.IsAdvancedStandingFor )
				.Concat( manifests.SelectMany( m => m.IsAdvancedStandingFor ) )
				.ToList();
			result.IsPreparationFor = existing.IsPreparationFor
				.Concat( conditions.IsPreparationFor )
				.Concat( manifests.SelectMany( m => m.IsPreparationFor ) )
				.ToList();
			result.Corequisite = existing.Corequisite
				.Concat( conditions.Corequisite )
				.Concat( manifests.SelectMany( m => m.Corequisite ) )
				.ToList();
			result.EntryCondition = existing.EntryCondition
				.Concat( conditions.EntryCondition )
				.Concat( manifests.SelectMany( m => m.EntryCondition ) )
				.ToList();
			result.Renewal = existing.Renewal
				.Concat( conditions.Renewal )
				.Concat( manifests.SelectMany( m => m.Renewal ) )
				.ToList();

			return result;
		}
		public List<ConditionProfile> Requires { get; set; }
		public List<ConditionProfile> Recommends { get; set; }
		public List<ConditionProfile> PreparationFrom { get; set; }
		public List<ConditionProfile> AdvancedStandingFrom { get; set; }
		public List<ConditionProfile> IsRequiredFor { get; set; }
		public List<ConditionProfile> IsRecommendedFor { get; set; }
		public List<ConditionProfile> IsAdvancedStandingFor { get; set; }
		public List<ConditionProfile> IsPreparationFor { get; set; }
		public List<ConditionProfile> Corequisite { get; set; }
		public List<ConditionProfile> EntryCondition { get; set; }
		public List<ConditionProfile> Renewal { get; set; }
	}
	//

	public string DetermineSimpleCredentialType( string credentialTypeSchema )
	{
		switch ( ( credentialTypeSchema ?? "" ).ToLower().Replace( "ceterms:", "" ) )
		{
			case "badge":
			case "digitalbadge":
			case "openbadge":
				return "badge";
			case "certificate":
			case "apprenticeshipcertificate":
			case "journeymancertificate":
			case "mastercertificate":
				return "certificate";
			case "certification":
				return "certification";
			case "degree":
			case "associatedegree":
			case "bachelordegree":
			case "masterdegree":
			case "doctoraldegree":
			case "professionaldoctorate":
			case "researchdoctorate":
				return "degree";
			case "diploma":
			case "generaleducationdevelopment":
			case "secondaryschooldiploma":
				return "diploma";
			case "license":
				return "license";
			case "microcredential":
				return "microcredential";
			case "qualityassurancecredential":
				return "quality";
			default:
				return "credential";
		}
	}


	public bool HasText( string text )
	{
		return !string.IsNullOrWhiteSpace( text );
	}
	public bool HasText( List<string> list )
	{
		return ( list != null && list.Count > 0 );
	}
	public string Count( string text, int count )
	{
		try
		{
			var plural = count != 1;
			return text.Replace( "{#}", "<span class=\"count\">" + count + "</span>" ).Replace( "{s}", plural ? "s" : "" ).Replace( "{es}", plural ? "es" : "" ).Replace( "{ies}", plural ? "ies" : "y" );
		}
		catch
		{
			return text.Replace( "{#}", "multiple" ).Replace( "{s}", "s" ).Replace( "{es}", "es" ).Replace( "{ies}", "ies" );
		}
	}
	//

	public RoleWrapper SetupRoles( List<OrganizationRoleProfile> roleSetList, List<int> loadedAgentIDs = null )
	{
		var wrapper = new RoleWrapper();
		loadedAgentIDs = loadedAgentIDs ?? new List<int>(); //Prevent the same org from being loaded twice, and prevent recursive loops

		foreach ( var roleSet in roleSetList )
		{
			//If any role is owner, keep all roles and move on
			if ( roleSet.AgentRole.Items.Where( m => m.SchemaName.Contains( "ownedBy" ) || m.SchemaName.Contains( "creator" ) ).Count() > 0 )
			{
				wrapper.Owner.Add( roleSet );

				//Add inherited QA
				if ( ( roleSet.ActingAgent.OrganizationRole_Recipient == null || roleSet.ActingAgent.OrganizationRole_Recipient.Count() == 0 ) && !loadedAgentIDs.Contains( roleSet.ActingAgent.Id ) )
				{
					roleSet.ActingAgent = OrganizationServices.GetForSummaryWithRoles( roleSet.ActingAgent.Id );
					loadedAgentIDs.Add( roleSet.ActingAgent.Id );
				}
				var inheritedRoles = SetupRoles( roleSet.ActingAgent.OrganizationRole_Recipient, loadedAgentIDs );
				wrapper.QAFromOwner = inheritedRoles.QADirect;
			}
			//Otherwise, add the agent as a QA and/or non-QA
			else
			{
				//Unlikely that an agent would be both QA and non-QA, but we have to enable it
				var qaRoles = roleSet.AgentRole.Items.Where( m => m.IsQAValue ).ToList();
				var normalRoles = roleSet.AgentRole.Items.Where( m => !m.IsQAValue ).ToList();
				//Only store the roles that are relevant
				//if ( qaRoles.Count() > 0 && wrapper.QADirect.Where( m => m.ActingAgentUid == roleSet.ActingAgentUid ).Count() == 0 )
				if ( qaRoles.Count() > 0 )
				{
					wrapper.QADirect.Add( new OrganizationRoleProfile()
					{
						ActingAgentUid = roleSet.ActingAgentUid,
						AgentRole = new Enumeration() { Items = qaRoles },
						ActingAgent = roleSet.ActingAgent,
						TargetCredential = roleSet.TargetCredential,
						TargetOrganization = roleSet.TargetOrganization,
						TargetAssessment = roleSet.TargetAssessment,
						TargetLearningOpportunity = roleSet.TargetLearningOpportunity,
						SourceEntityType = roleSet.SourceEntityType,
						SourceEntityStateId = roleSet.SourceEntityStateId

					} );
				}
				if ( normalRoles.Count() > 0 && wrapper.NonQA.Where( m => m.ActingAgentUid == roleSet.ActingAgentUid ).Count() == 0 )
				{
					wrapper.NonQA.Add( new OrganizationRoleProfile()
					{
						ActingAgentUid = roleSet.ActingAgentUid,
						AgentRole = new Enumeration() { Items = normalRoles },
						ActingAgent = roleSet.ActingAgent,
						TargetCredential = roleSet.TargetCredential,
						TargetOrganization = roleSet.TargetOrganization,
						TargetAssessment = roleSet.TargetAssessment,
						TargetLearningOpportunity = roleSet.TargetLearningOpportunity
					} );
				}
			}
		}

		return wrapper;
	}
	//

	public void GetAllChildren( MergedConditions requirements, MergedConditions recommendations, ConnectionData connections, Credential credential, AssessmentProfile assessment, LearningOpportunityProfile learningOpportunity )
	{
		credential = credential ?? new Credential();
		assessment = assessment ?? new AssessmentProfile();
		learningOpportunity = learningOpportunity ?? new LearningOpportunityProfile();

		//Recursive bubbling - wish this could be simpler
		var allRequiredAssessments = new List<AssessmentProfile>() { assessment }
			.Concat( credential.Requires.SelectMany( m => m.TargetAssessment ) )
			.Concat( assessment.Requires.SelectMany( m => m.TargetAssessment ) )
			.Concat( learningOpportunity.Requires.SelectMany( m => m.TargetAssessment ) )
			.ToList();
		var allRequiredLearningOpps = new List<LearningOpportunityProfile>() { learningOpportunity }
			.Concat( credential.Requires.SelectMany( m => m.TargetLearningOpportunity ) )
			.Concat( assessment.Requires.SelectMany( m => m.TargetLearningOpportunity ) )
			.ToList();
		var gatheredLearningOpps = new List<LearningOpportunityProfile>();
		GetChildLearningOpps( allRequiredLearningOpps, gatheredLearningOpps );
		var allRequiredCredentials = new List<Credential>() //{ credential } //Don't use this here instead of the GetChild method, it doesn't work
			.Concat( assessment.Requires.SelectMany( m => m.TargetCredential ) )
			.Concat( learningOpportunity.Requires.SelectMany( m => m.TargetCredential ) )
			.ToList();
		GetChildCredentials( new List<Credential>() { credential }, allRequiredCredentials, allRequiredAssessments, gatheredLearningOpps );

		requirements.TopLevelCredentials = credential.Requires.SelectMany( m => m.TargetCredential ).Concat( assessment.Requires.SelectMany( m => m.TargetCredential ) ).Concat( learningOpportunity.Requires.SelectMany( m => m.TargetCredential ) ).ToList();
		requirements.TopLevelAssessments = credential.Requires.SelectMany( m => m.TargetAssessment ).Concat( assessment.Requires.SelectMany( m => m.TargetAssessment ) ).Concat( learningOpportunity.Requires.SelectMany( m => m.TargetAssessment ) ).ToList();
		requirements.TopLevelLearningOpportunities = credential.Requires.SelectMany( m => m.TargetLearningOpportunity ).Concat( assessment.Requires.SelectMany( m => m.TargetLearningOpportunity ) ).Concat( learningOpportunity.Requires.SelectMany( m => m.TargetLearningOpportunity ) ).ToList();

		requirements.TargetAssessment = allRequiredAssessments;
		requirements.TargetLearningOpportunity = gatheredLearningOpps;
		requirements.TargetCredential = allRequiredCredentials;

		//Don't bother recursive bubbling recommendations
		recommendations.TargetAssessment = new List<AssessmentProfile>() { assessment }
			.Concat( credential.Recommends.SelectMany( m => m.TargetAssessment ) )
			.Concat( assessment.Recommends.SelectMany( m => m.TargetAssessment ) )
			.Concat( learningOpportunity.Recommends.SelectMany( m => m.TargetAssessment ) )
			.ToList();
		recommendations.TargetLearningOpportunity = new List<LearningOpportunityProfile>() { learningOpportunity }
			.Concat( credential.Recommends.SelectMany( m => m.TargetLearningOpportunity ) )
			.Concat( assessment.Recommends.SelectMany( m => m.TargetLearningOpportunity ) )
			.Concat( learningOpportunity.Recommends.SelectMany( m => m.TargetLearningOpportunity ) )
			.ToList();
		recommendations.TargetCredential = new List<Credential>() { credential }
			.Concat( assessment.Recommends.SelectMany( m => m.TargetCredential ) )
			.Concat( learningOpportunity.Recommends.SelectMany( m => m.TargetCredential ) )
			.Concat( learningOpportunity.Recommends.SelectMany( m => m.TargetCredential ) )
			.ToList();

		connections.Requires = credential.Requires.Concat( assessment.Requires ).Concat( learningOpportunity.Requires ).ToList();
		connections.Recommends = credential.Recommends.Concat( assessment.Recommends ).Concat( learningOpportunity.Recommends ).ToList();
	}
	//

	public CompetencyWrapper GetAllCompetencies( ConditionProfile container )
	{
		var wrapper = new CompetencyWrapper();

		//Data by framework is reliably populated
		//.Concat( container.TargetAssessment.SelectMany( m => m.RequiresCompetenciesFrameworks ) )
		wrapper.RequiresByFramework = container.TargetCredential.SelectMany( m => m.Requires ).SelectMany( m => m.RequiresCompetenciesFrameworks )
			.Concat( container.TargetLearningOpportunity.SelectMany( m => m.RequiresCompetenciesFrameworks ) )
			.Where( m => m != null )
			.ToList();
		wrapper.AssessesByFramework = container.TargetAssessment.SelectMany( m => m.AssessesCompetenciesFrameworks ).Where( m => m != null ).ToList();
		wrapper.TeachesByFramework = container.TargetLearningOpportunity.SelectMany( m => m.TeachesCompetenciesFrameworks ).Where( m => m != null ).ToList();

		//Data by competency is not reliably populated, so, instead get it from the frameworks
		wrapper.Requires = CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( wrapper.RequiresByFramework );
		wrapper.Assesses = CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( wrapper.AssessesByFramework );
		wrapper.Teaches = CredentialAlignmentObjectFrameworkProfile.FlattenAlignmentObjects( wrapper.TeachesByFramework );

		return wrapper;
	}
	//

	public void GetChildLearningOpps( List<LearningOpportunityProfile> learningOpportunities, List<LearningOpportunityProfile> runningTotal )
	{
		foreach ( var lopp in learningOpportunities )
		{
			if ( runningTotal.Where( m => m.Id == lopp.Id ).Count() == 0 )
			{
				runningTotal.Add( lopp );
				GetChildLearningOpps( lopp.HasPart, runningTotal );
			}
		}
	}
	//

	public void GetChildCredentials( List<Credential> credentials, List<Credential> runningCredTotal, List<AssessmentProfile> runningAssessmentTotal, List<LearningOpportunityProfile> runningLoppTotal )
	{
		foreach ( var cred in credentials )
		{
			if ( runningCredTotal.Where( m => m.Id == cred.Id ).Count() == 0 )
			{
				runningCredTotal.Add( cred );
				//GetChildCredentials( cred.EmbeddedCredentials, runningCredTotal, runningAssessmentTotal, runningLoppTotal );
				GetChildCredentials( cred.Requires.SelectMany( m => m.TargetCredential ).ToList(), runningCredTotal, runningAssessmentTotal, runningLoppTotal );

				foreach ( var assessment in cred.Requires.SelectMany( m => m.TargetAssessment ) )
				{
					if ( runningAssessmentTotal.Where( m => m.Id == assessment.Id ).Count() == 0 )
					{
						runningAssessmentTotal.Add( assessment );
					}
				}

				foreach ( var lopp in cred.Requires.SelectMany( m => m.TargetLearningOpportunity ) )
				{
					if ( runningLoppTotal.Where( m => m.Id == lopp.Id ).Count() == 0 )
					{
						runningLoppTotal.Add( lopp );
					}
				}
			}
		}
	}
	//

	public string PickText( List<string> choices )
	{
		return choices.FirstOrDefault( m => HasText( m ) );
	}
	//

	public string DetermineOrganizationImageUrl( Organization org, string overrideDefaultImage = "" )
	{
		try
		{
			return !string.IsNullOrWhiteSpace( org.ImageUrl ) ? org.ImageUrl :
				!string.IsNullOrWhiteSpace( overrideDefaultImage ) ? overrideDefaultImage : "";
		}
		catch
		{
			return string.IsNullOrWhiteSpace( overrideDefaultImage ) ? "" : overrideDefaultImage;
		}
	}
	//
} @*end functions*@

@helper RenderSection( string sectionClass, string sectionHeader, List<HelperResult> content )
{
	/**/

	if ( content.Count() > 0 && content.Where( m => HasText( m.ToHtmlString() ) ).Count() > 0 )
	{
		<div class="section @sectionClass">
			@if ( HasText( sectionHeader ) )
			{
				<h3 class="sectionHeader">@Html.Raw( sectionHeader )</h3>
			}
			@foreach ( var item in content )
			{
				@item
			}
		</div>
	}
}
@helper RenderTag( string tag, string id, string cssClass, string content )
{
	/**/

	if ( HasText( content ) )
	{
		@Html.Raw( "<" + tag + " id=\"" + id + "\" class=\"" + cssClass + "\">" )
		@Html.Raw( content )
		@Html.Raw( "</" + tag + ">" )
	}
}

@helper RenderText( string cssClass, string prefix, string content, bool isPreformatted = false, int maxLength = -1, bool renderConditionMet = true )
{
	/**/

	var text = ( content ?? "" ).Trim();
	if ( HasText( text ) && renderConditionMet )
	{
		if ( maxLength >= 0 && text.Length > maxLength )
		{
			if ( text.IndexOf( "<" ) < maxLength && text.IndexOf( "</" ) > maxLength )
			{
				text = text.Substring( 0, text.IndexOf( "</" ) + 4 ) + "...";
			}
			else
			{
				text = text.Substring( 0, maxLength ) + "...";
			}
		}
		<div class="text @cssClass @( isPreformatted ? "preformatted" : "" )">
			@if ( HasText( prefix ) )
			{
				<b class="prefix">@prefix:</b>
			}
			<span class="textContent">@Html.Raw( text )</span>
		</div>
	}
}
@helper RenderSectionHeader( string content )
{
	/**/

	if ( HasText( content ) )
	{
		<h3>@Html.Raw( content )</h3>
	}
}
@helper RenderExternalLinkButton( string buttonText, string url )
{
	/**/

	if ( HasText( url ) )
	{
		<a class="linkButton greenButton bigButton externalLink" href="@url" target="externalLinkWindow">@Html.Raw( buttonText ) <i class="fa fa-external-link"></i></a>
	}
}
@helper RenderExternalLinkButtons( string buttonText, List<string> list )
{
	/**/

	if ( HasText( list ) )
	{
		foreach ( var url in list )
		{
			<a class="linkButton greenButton bigButton externalLink" href="@url" target="externalLinkWindow">@Html.Raw( buttonText ) <i class="fa fa-external-link"></i></a>
		}
	}
}
@helper RenderIcon( string url, string cssClass )
{
	/**/

	if ( HasText( url ) )
	{
		<img class="@cssClass @( url.ToLower().Contains( "v2/icons/flat_" ) ? "" : "gradientBackground" )" src="@url" />
	}
}
@helper RenderDurationItem( DurationItem item, bool includeName = false )
{
	/**/
	if ( item != null && item.HasValue )
	{
		<div class="duration card">
			@if ( includeName )
			{
				@RenderText( "cardTitle", "", "Renewal Frequency" );
			}
			<div class="cardContent">
				<div class="durationLength">
					@RenderText( "", "Estimated", @item.Print(), false, -1, true )
				</div>
				<div class="durationText">@*@item.Print()*@</div>
			</div>
		</div>
	}

}
@helper RenderDurationProfileList( List<DurationProfile> items, bool includeName = false )
{
	/**/

	if ( items != null && items.Count() > 0 && items.Where( m => m.MinimumDuration.HasValue || m.MaximumDuration.HasValue || m.ExactDuration.HasValue || !string.IsNullOrEmpty( m.Description ) ).Count() > 0 )
	{
		<div class="durationList cardList">
			@foreach ( var item in items.Where( m => m.MinimumDuration.HasValue || m.MaximumDuration.HasValue || m.ExactDuration.HasValue || !string.IsNullOrEmpty( m.Description ) ).ToList() )
			{
				<div class="duration card">
					@if ( includeName )
					{
						@RenderText( "cardTitle", "", item.ProfileName );
					}
					<div class="cardContent">
						<div class="durationLength">
							@RenderText( "", "Minimum", item.MinimumDuration.Print(), false, -1, item.MinimumDuration.HasValue )
							@RenderText( "", "Maximum", item.MaximumDuration.Print(), false, -1, item.MaximumDuration.HasValue )
							@RenderText( "", "Estimated", item.ExactDuration.Print(), false, -1, item.ExactDuration.HasValue )
						</div>
						<div class="durationText">@item.Description</div>
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderDurationProfileListWithNames( List<dynamic> source )
{
	/**/

	try
	{
		if ( source != null && source.Count() > 0 )
		{
			foreach ( var item in source )
			{
				List<DurationProfile> durations = item.EstimatedDuration;
				durations.ForEach( m => m.ProfileName = item.Name );
				@RenderDurationProfileList( durations, true );
			}
		}

	}
	catch { }
}
@helper RenderEnumeration( string cssClass, string typeCode, string header, Enumeration enumeration = null, List<TextValueProfile> tvp = null, bool formatAsSearchLink = true, List<string> textItems = null, string textItem = null )
{
	/**/

	enumeration = enumeration ?? new Enumeration();
	tvp = tvp ?? new List<TextValueProfile>();
	var addedWords = new List<string>();
	textItems = textItems ?? new List<string>();
	if ( enumeration.Items.Where( m => m != null ).Count() > 0 || tvp.Count() > 0 || textItems.Count() > 0 || textItem != null )
	{
		<div class="enumeration @cssClass">
			@RenderText( "enumerationHeader", "", header )
			@foreach ( var item in enumeration.Items.Where( m => m != null ).ToList() )
			{
				var text = HasText( item.ItemSummary ) ? item.ItemSummary : HasText( item.Name ) ? item.Name : item.Description;
				if ( string.IsNullOrEmpty( text ) )
				{
					continue;
				}
				if ( item.IsIndirectAssertion )
				{
					if ( item.IsDirectAssertion )
					{
						text += "  <span  title=\"The Credentialing Organization and the Quality Assurance Organization both make this assertion.\" aria-hidden='true' class='far fa-check-circle'></span>";
					}
					else
					{
						//text += " <span  title=\"The Credentialing Organization makes this assertion.\" aria-hidden='true' class='far fa-check-circle'></span>";
					}
				}
				else if ( item.IsDirectAssertion )
				{
					//text += " <span title=\"The Quality Assurance organization makes this assertion.\" aria-hidden='true' class='fas fa-check-circle'></span>";
				}

				var searchtext = HasText( item.Name ) ? item.Name : item.Description;

				if ( formatAsSearchLink )
				{
					<a class="linkButton grayButton" href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&keywords=@text">@Html.Raw( text )</a>
				}
				else
				{
					<p class="grayButton" style="border-radius: 4px;">@Html.Raw( text )</p>
				}


			}
			@foreach ( var item in tvp.Where( m => m != null ).ToList() )
			{
				var text = HasText( item.TextValue ) ? item.TextValue : item.TextTitle;
				if ( !addedWords.Contains( text.ToLower() ) )
				{
					addedWords.Add( text.ToLower() );
					if ( formatAsSearchLink )
					{
						<a class="linkButton grayButton" href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&keywords=@text">@text</a>
					}
					else
					{
						<p>@text</p>
					}
				}
			}
			@foreach ( var item in textItems )
			{
				<p class="linkButton grayButton">@item</p>
			}
			@if ( textItem != null )
			{
				<p class="linkButton grayButton">@textItem</p>
			}
		</div>
	}
}
@helper RenderItemList( string title, string cssClass, List<TextValueProfile> tvp )
{
	tvp = tvp ?? new List<TextValueProfile>();
	if ( tvp.Count() > 0 )
	{
		<div class="itemList @cssClass">
			@if ( HasText( title ) )
			{
				<div class="itemHeader">@Html.Raw( title )</div>
			}
			<ul>
				@foreach ( var item in tvp )
				{
					var text = HasText( item.TextValue ) ? item.TextValue : item.TextTitle;
					<li>@text</li>
				}
			</ul>
		</div>
	}
}
@helper RenderAddressList( List<Address> addresses, bool asButtons )
{
	if ( addresses != null && addresses.Count() > 0 )
	{
		foreach ( var address in addresses )
		{
			if ( asButtons )
			{
				<button class="addressButton bigButton whiteButton" data-addressID="@address.Id" data-latitude="@address.Latitude" data-longitude="@address.Longitude">
					@address.DisplayAddress()
				</button>
			}
			else
			{
				<div class="address">
					@address.DisplayAddress()
				</div>
			}
		}
	}
}
@helper RenderSocialMediaIcons( List<TextValueProfile> links )
{
	if ( links != null && links.Count() > 0 )
	{
		var icons = new Dictionary<string, string>()
{
{ "facebook", "facebook-square" },
{ "flickr", "flickr" },
{ "google", "google-plus-square" },
{ "instagram", "instagram" },
{ "linkedin", "linkedin-square" },
{ "pinterest", "pinterest-square" },
{ "youtube", "youtube-square" },
{ "twitter", "twitter-square" },
};

<div class="socialMediaLinkList">
	@foreach ( var link in links )
	{
		var icon = "share-alt-square";
		var linkText = ( link.TextValue ?? "" ).ToLower();
		var fontPrefix = "fa";
		try
		{
			icon = icons.FirstOrDefault( m => linkText.Contains( m.Key ) ).Value ?? icon;
			fontPrefix = "fab";
		}
		catch { }
		<a class="socialMediaLink" title="@linkText" href="@linkText" target="externalLinkWindow"><i class="@fontPrefix fa-@icon"></i></a>
	}
</div>
}
}
@helper RenderContactPointList( List<ContactPoint> contacts )
{
	if ( contacts != null && contacts.Count() > 0 )
	{
		//Discuss with mike on which properties to be used in the contact point
		var validContacts = contacts.Where( m => m.PhoneNumber.Count() > 0 || m.Email.Count() > 0 || m.SocialMedia.Count() > 0 ).ToList();
		if ( validContacts.Count() > 0 )
		{
			<div class="cardList contactPointList">
				@foreach ( var item in validContacts )
				{
					<div class="card contactPoint compactItem">
						@RenderText( "cardTitle", "", item.Name )
						<div class="cardContent">
							@RenderText( "", "Type", item.ContactType )

							@foreach ( var aspect in item.PhoneNumber )
							{
								@RenderText( "", aspect.CodeSchema == "other" ? aspect.TextTitle : aspect.CodeTitle + ( string.IsNullOrWhiteSpace( aspect.TextTitle ) ? "" : " (" + aspect.TextTitle + ")" ), aspect.TextValue )
							}
							@foreach ( var aspect in item.Email )
							{
								@RenderText( "", "", "<a href=\"mailto:" + aspect.TextValue + "\">" + aspect.TextValue + "</a>", false, -1, HasText( aspect.TextValue ) )
							}
							@RenderSocialMediaIcons( item.SocialMedia )
						</div>
					</div>
				}
			</div>
		}
	}
}
@helper RenderJurisdictionAssertionList( string title, List<JurisdictionProfile> jurisdictions, string mainRegionText, string exceptionRegionText )
{
	/**/

	if ( jurisdictions != null && jurisdictions.Count() > 0 )
	{
		<div class="cardList jurisdictionAssertionList">
			@foreach ( var jurisdiction in jurisdictions.Where( m => m != null && m.Id > 0 && m.JurisdictionAssertion != null && m.JurisdictionAssertion.Items != null && m.JurisdictionAssertion.Items.Where( n => n != null ).Count() > 0 ).ToList() )
			{
				<div class="card jurisdictionAssertion">
					<div class="cardTitle">Assertions</div>
					<div class="cardContent">
						@RenderText( "", "Globally Applicable", "This jurisdiction is global.", false, -1, ( jurisdiction.IsGlobalJurisdiction ?? false ) )

						@RenderEnumeration( "", "", "", jurisdiction.JurisdictionAssertion )
						@if ( jurisdiction.MainJurisdiction != null && jurisdiction.MainJurisdiction.Id > 0 )
						{
							<div class="header">@mainRegionText</div>
							<ul class="jurisdictionList">
								<li>
									<a href="@jurisdiction.MainJurisdiction.GeoURI" target="externalLinkWindow">@jurisdiction.MainJurisdiction.Name</a>
								</li>
							</ul>
						}
						@if ( jurisdiction.JurisdictionException != null && jurisdiction.JurisdictionException.Where( m => m != null ).Count() > 0 )
						{
							<div class="header">@exceptionRegionText</div>
							<ul class="jurisdictionList">
								@foreach ( var item in jurisdiction.JurisdictionException.Where( m => m != null ).ToList() )
								{
									<li>
										<a href="@item.GeoURI" target="externalLinkWindow">@item.Name</a>
									</li>
								}
							</ul>
						}
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderJurisdictionList( string title, List<JurisdictionProfile> jurisdictions, string mainRegionText, string exceptionRegionText )
{
	/**/

	if ( jurisdictions != null && jurisdictions.Count() > 0 )
	{
		var allowed = jurisdictions.Select( m => m.MainJurisdiction ).Where( m => m.Id > 0 ).ToList();
		var exceptions = jurisdictions.SelectMany( m => m.JurisdictionException ).Where( m => m.Id > 0 ).ToList();
		var displayedMains = new List<int>();
		var displayedExceptions = new List<int>();
		if ( allowed.Count() > 0 || exceptions.Count() > 0 )
		{
			<div class="card jurisdictionList">
				<div class="cardContent">
					@RenderText( "", "Globally Applicable", "This jurisdiction is global.", false, -1, jurisdictions.Where( m => ( m.IsGlobalJurisdiction ?? false ) ).Count() > 0 )
					@if ( allowed.Count() > 0 )
					{
						<div class="header">@mainRegionText</div>
						<ul class="jurisdictionList">
							@foreach ( var item in allowed )
							{
								if ( !displayedMains.Contains( item.GeoNamesId ) )
								{
									<li>
										<a href="@item.GeoURI" target="externalLinkWindow">@item.Name</a>
									</li>
									displayedMains.Add( item.GeoNamesId );
								}
							}
						</ul>
					}
					@if ( exceptions.Count() > 0 )
					{
						<div class="header">@exceptionRegionText</div>
						<ul class="jurisdictionList">
							@foreach ( var item in exceptions )
							{
								if ( !displayedExceptions.Contains( item.GeoNamesId ) )
								{
									<li>
										<a href="@item.GeoURI" target="externalLinkWindow">@item.Name</a>
									</li>
									displayedExceptions.Add( item.GeoNamesId );
								}
							}
						</ul>
					}
				</div>
			</div>
		}
	}
}
@helper RenderOrganizationCard( OrganizationRoleProfile roles, string overrideDefaultImage = "" )
{
	/**/

	if ( roles != null && roles.ActingAgent.Id > 0 )
	{
		@RenderOrganizationCard( roles.ActingAgent, roles.AgentRole, overrideDefaultImage )
	}
}
@helper RenderOrganizationCard( Organization org, Enumeration roles, string overrideDefaultImage = "" )
{
	/**/

	if ( org != null && org.Id > 0 )
	{
		if ( org.EntityStateId == 3 )
		{
			@RenderCard( org.Name, Url.Content( "~/detail/organization/" + org.Id ), "", 0, RenderText( "cardText", "", org.Description, false, 300 ).ToHtmlString(), new List<HelperResult>() {
RenderEnumeration( "", "organization", "", roles, null, false ),
RenderEnumeration( "", "organization", "", org.AgentType ),
RenderEnumeration( "", "organization", "", org.AgentSectorType ),
RenderEnumeration( "", "organization", "", null, org.Keyword ), },
		   DetermineOrganizationImageUrl( org, overrideDefaultImage ), "organization" )
		}
		else if ( org.EntityStateId == 2 )
		{
			@RenderCard( org.Name, org.SubjectWebpage, "", 0, RenderText( "cardText", "", org.Description, false, 300 ).ToHtmlString(), new List<HelperResult>() {
RenderEnumeration( "", "organization", "", roles, null, false ),
RenderEnumeration( "", "organization", "", null, org.Keyword ), },
DetermineOrganizationImageUrl( org, overrideDefaultImage ), "organization"
																																	 )
		}
		else
		{
			//in case EntityStateId is not available:
			@RenderCard(
																																		 org.Name,
																																		 Url.Content( "~/detail/organization/" + org.Id ),
																																		 "",
																																		 0,
																																		 RenderText( "cardText", "", org.Description, false, 300 ).ToHtmlString(),
																																		 new List<HelperResult>()
																																		 {
RenderEnumeration( "", "organization", "", roles, null, false ),
RenderEnumeration( "", "organization", "", org.AgentType ),
RenderEnumeration( "", "organization", "", org.AgentSectorType ),
RenderEnumeration( "", "organization", "", null, org.Keyword ),
																																		 },
																																		 string.IsNullOrWhiteSpace( org.ImageUrl ) ? "" : org.ImageUrl,
																																		 "organization"
																																	 )

		}

	}
}
@helper RenderOrganizationCardList( List<OrganizationRoleProfile> roles, string overrideDefaultImage = "" )
{
	/**/

	if ( roles != null && roles.Count() > 0 && roles.Where( m => m != null ).Count() > 0 )
	{
		<div class="cardList organizationCardList">
			@foreach ( var orgRole in roles )
			{
				@RenderOrganizationCard( orgRole, overrideDefaultImage )
			}
		</div>
	}
}
@helper RenderOverlayButton( string overlayID, string countableTitle, int total, string cssClass = "" )
{
	/**/

	if ( total > 0 )
	{
		<button class="bigButton blueButton overlayButton @cssClass" data-overlayID="@overlayID">@Html.Raw( Count( countableTitle, total ) ) <i class="fa fa-arrows-alt"></i></button>
	}
}
@helper RenderOverlayWindow( string overlayID, string countableTitle, int total, HelperResult html, string cssClass = "", int actualTotal = 0 )
{

	if ( overlayID == "ownsCredentials" )
	{

	}
	if ( total > 0 && html != null && html.ToHtmlString().Length > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		if ( actualTotal > total )
		{
			countTitle = string.Format( "{0} of {1}", total, actualTotal );
		}
		<button class="bigButton blueButton overlayButton @cssClass" data-overlayID="@overlayID"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-arrows-alt"></i></button>
		<div class="overlayWindow card" data-overlayID="@overlayID">
			<div class="overlayTitle cardTitle">
				<span class="totalCount">@countTitle</span> @Html.Raw( title )
				<button class="redButton closeButton overlayCloseButton"><i class="fas fa-times"></i></button>
			</div>
			<div class="overlayContent cardContent">
				@html
			</div>
		</div>
	}
}

@helper RenderLinkWindowCred( string category, int id, string countableTitle, string typeCode, int total, List<int> values )
{
	//var total = list.Count();
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		//var listRoles = string.Join( ",", list.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct() );
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}


@helper RenderLinkWindowAsmnt( string category, int id, string countableTitle, string typeCode, int total, List<int> values )
{
	//var total = list.Count();
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		//var listRoles = string.Join( ",", list.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct() );
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}

@helper RenderLinkWindowLopp( string category, int id, string countableTitle, string typeCode, int total, List<int> values )
{
	//var total = list.Count();
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		//var listRoles = string.Join( ",", list.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct() );
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}


@helper RenderQALinkWindowCred( string category, int id, string countableTitle, string typeCode, int total, int values)
{
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}

@helper RenderQALinkWindowOrg( string category, int id, string countableTitle, string typeCode, int total, int values)
{
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}

@helper RenderQALinkWindowAsmnt( string category, int id, string countableTitle, string typeCode, int total, int values)
{
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}

@helper RenderQALinkWindowLopp( string category, int id, string countableTitle, string typeCode, int total, int values)
{
	if ( total > 0 )
	{
		var title = Count( countableTitle, total );
		string countTitle = total.ToString();
		<a href="@Url.Content("~/search")?autosearch=true&searchType=@typeCode&custom={n:'qualityassurance',aid: @id,rid:[@string.Join(",", values)],p:'@category',r:'', d: '@countableTitle.Replace("{#}", total.ToString())'}" target="OrgRelatedSearch" class="linkButton detailButton bigButton externalLink overlayButton"><span class="totalCount">@total</span> @Html.Raw( title ) <i class="fa fa-search"></i></a>
	}
}
@helper RenderCompetencyFrameworkList( List<CredentialAlignmentObjectFrameworkProfile> frameworks, CompetencyTypes type )
{
	if ( frameworks != null && frameworks.Count() > 0 && frameworks.SelectMany( m => m.Items.Where( n => n.TargetNodeName != null ) ).Count() > 0 )
	{
		<div class="cardList competencyFrameworkList">
			@foreach ( var framework in frameworks.Where( m => m.Items.Count() > 0 ).ToList() )
			{
				var frameworkName = PickText( new List<string>() { framework.FrameworkName, framework.ProfileName, framework.ProfileSummary } );
				<div class="card competencyFramework">
					@if ( HasText( framework.SourceUrl ) )
					{
						<div class="cardTitle">
							<a class="linkButton greenButton bigButton externalLink" href="@framework.SourceUrl" target="externalLinkWindow">@frameworkName</a>
						</div>
					}
					else
					{
						<div class="cardTitle">@frameworkName</div>
					}
					<div class="cardContent">
						@foreach ( var competency in framework.Items )
						{
							var name = PickText( new List<string>() { competency.TargetNodeName, competency.ProfileName } );
							var description = PickText( new List<string>() { competency.Description, competency.TargetNodeDescription } );
							if ( name == description )
							{
								description = "";
							}
							<div class="competency @( HasText( name ) ? "hasName" : "" ) @( HasText(description) ? "hasDescription" : "" )">
								<div class="competencyName">@name</div>
								<div class="competencyDescription">@description</div>
								@*@RenderExternalLinkButton( "View", competency.TargetNode )*@
							</div>
						}
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderCompetencyFrameworkViewer( List<CredentialAlignmentObjectFrameworkProfile> frameworks, CompetencyTypes type )
{
	if ( frameworks != null && frameworks.Count() > 0 && frameworks.Where( m => m.Items.Where( n => n != null ).Count() > 0 ).Count() > 0 )
	{
		<div class="cardList competencyFrameworkViewer">

			<div class="frameworkButtonBox">
				@foreach ( var framework in frameworks.Where( m => m.Items.Count() > 0 ).ToList() )
				{
					var frameworkName = PickText( new List<string>() { framework.FrameworkName, framework.ProfileName, framework.ProfileSummary } );
					<button class="frameworkButton" data-frameworkUrl="@(HasText( framework.CaSSViewerUrl ) ? framework.CaSSViewerUrl: frameworkName)">@frameworkName</button>
				}
			</div>

			@foreach ( var framework in frameworks.Where( m => m.Items.Count() > 0 ).ToList() )
			{
				var frameworkName = PickText( new List<string>() { framework.FrameworkName, framework.ProfileName, framework.ProfileSummary } );

				if ( HasText( framework.CaSSViewerUrl ) )
				{
					<div class="card competencyFramework frameworkIframe" data-frameworkUrl="@framework.CaSSViewerUrl">

						<div class="competencyFramework" data-rendered="false" data-ctid="@framework.FrameworkCtid" data-uri="@( ( framework.FrameworkUri ?? "" ).Replace( "/resources/", "/graph/" ) )">
							<div class="frameworkName">Competency Framework Loading <i class="fas fa-spin fa-spinner"></i></div>
							<div class="descriptionBox">
								<div class="frameworkDescription"></div>
								<div class="frameworkLinks">
									<a class="linkButton greenButton detailsLink" href="" target="_blank"></a>
									<a class="linkButton greenButton frameworkSource" href="" target="_blank"></a>
								</div>
							</div>
							<div class="cardSubTitle">Competencies</div>
							<div class="frameworkCompetencies"></div>
						</div>

						@*
							<div class="cardTitle" style="display:none">@frameworkName</div>
							<div class="cardContent">
								<iframe class="frameworkIframe" data-frameworkUrl="@framework.CaSSViewerUrl" src="@framework.CaSSViewerUrl" height="800"></iframe>
							</div>
						*@
					</div>
				}
				else
				{
					<div class="card competencyFramework frameworkIframe" data-frameworkUrl="@frameworkName">
						@if ( HasText( framework.FrameworkUri ) )
						{
							<div class="cardTitle">
								<a class="linkButton greenButton bigButton externalLink" href="@framework.FrameworkUri" target="externalLinkWindow">@frameworkName</a>
							</div>
						}
						else
						{
							<div class="cardTitle">@frameworkName</div>
						}
						<div class="cardContent">
							@foreach ( var competency in framework.Items )
							{
								var name = PickText( new List<string>() { competency.TargetNodeName, competency.ProfileName } );
								var description = PickText( new List<string>() { competency.Description, competency.TargetNodeDescription } );
								if ( name == description )
								{
									description = "";
								}
								<div class="competency @( HasText( name ) ? "hasName" : "" ) @( HasText(description) ? "hasDescription" : "" )">
									<div class="competencyName">@name</div>
									<div class="competencyDescription">@description</div>
								</div>
							}
						</div>
					</div>
				}

			}
		</div>
	}

}

@helper RenderCard( string title, HelperResult resourceDescription, HelperResult resourceLinkButton, string cssClass )
{
	/**/

	var hasText = resourceDescription != null && HasText( resourceDescription.ToHtmlString() );
	var hasLink = resourceLinkButton != null && HasText( resourceLinkButton.ToHtmlString() );
	if ( hasText || hasLink )
	{
		<div class="card withURL @cssClass @( hasText ? "hasText" : "" ) @( hasLink ? "hasLink" : "" )">
			<div class="cardTitle">@title</div>
			<div class="cardContent">
				@resourceDescription
				@resourceLinkButton
			</div>
		</div>
	}
}
@helper RenderCard( string title, string titleURL, string ownerName, int ownerID, string text, List<HelperResult> tags, string imageURL, string cssClass, bool renderConditionMet = true )
{
	/**/

	if ( renderConditionMet )
	{
		<div class="card @cssClass @( HasText( imageURL ) ? "withImage" : "" )">
			<div class="cardTitle">
				@if ( HasText( titleURL ) )
				{
					<a href="@titleURL">@title</a>
				}
				else
				{
					@title
				}
			</div>
			<div class="cardContent">
				<div class="cardText">
					@if ( ownerID > 0 )
					{
						<a href="@Url.Content("~/organization/" + ownerID )">@ownerName</a>
					}
					@Html.Raw( text )
					<div class="tags">
						@foreach ( var tag in tags )
						{
							@tag
						}
					</div>
				</div>
				@if ( HasText( imageURL ) )
				{
					<div class="cardImage">
						<img class="gradientBackground" src="@imageURL" />
					</div>
				}
			</div>
		</div>
	}
}
@helper RenderCredentialCardList( List<Credential> credentials )
{
	/**/
	if ( credentials != null && credentials.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList credentialList">
			@foreach ( var cred in credentials.Where( m => m != null && m.Id > 0 ).OrderBy( m => m.Name ).ToList() )
			{
				try
				{
					cred.CredentialTypeSchema = cred.CredentialTypeEnum.Items.FirstOrDefault().SchemaName;
				}
				catch { }
				cred.OwningOrganization = cred.OwningOrganization ?? new Organization();
				if ( cred.EntityStateId == 3 )
				{
					@RenderCard( cred.Name, Url.Content( "~/detail/credential/" + cred.Id ), cred.OwningOrganization.Name, cred.OwningOrganization.Id, RenderText( "", "", cred.Description, false, 500 ).ToHtmlString(),
								 new List<HelperResult>() {
						  //RenderText( "", "credentialtype" , role.TargetCredential.CredentialTypeSchema),
						  //RenderEnumeration( "", "credential", "", null, null, false, null, role.SourceEntityType ),
						  RenderEnumeration( "", "credential", "", cred.CredentialTypeEnum, null ),
						  RenderEnumeration( "", "credential", "", cred.OwnerRoles, null, false ),
						  RenderEnumeration( "", "credential", "", cred.AudienceLevelType, null ),
						  RenderEnumeration( "", "credential", "", cred.AssessmentDeliveryType, null ),
						  RenderEnumeration( "", "credential", "", cred.LearningDeliveryType, null ),
						  RenderEnumeration( "", "credential", "", cred.InstructionalProgramType, null ),
								 },
						  string.IsNullOrWhiteSpace( cred.ImageUrl ) ? "" : cred.ImageUrl, "credential", cred != null && cred.Id > 0 )
				}
				else if ( cred.EntityStateId == 2 )
				{
					@RenderCard(
																																						  cred.Name,
																																						  cred.SubjectWebpage,
																																						  "",
																																						  0,
																																						  RenderText( "", "", cred.Description, false, 500 ).ToHtmlString(),
																																						  new List<HelperResult>()
																																						  {
RenderEnumeration( "", "credential", "", cred.CredentialTypeEnum, null ),
																																						  },
																																						  string.IsNullOrWhiteSpace( cred.ImageUrl ) ? "" : cred.ImageUrl,
																																						  "credential"
																																					  )
				}
			}
		</div>
	}
}
@helper RenderAssessmentCardList( List<AssessmentProfile> assessments )
{
	/**/

	if ( assessments != null && assessments.Where( m => m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList credentialList">
			@foreach ( var asmt in assessments )
			{
				asmt.OwningOrganization = asmt.OwningOrganization ?? new Organization();
				if ( asmt.EntityStateId == 2 )
				{
					@RenderCard(
																																					 asmt.Name,
																																					 asmt.SubjectWebpage,
																																					 "",
																																					 0,
																																					 RenderText( "", "", asmt.Description, false, 500 ).ToHtmlString(),
																																					 new List<HelperResult>()
																																					 {
																																					 },
																																					 "",
																																					 "assessment"
																																				 )
				}
				else
				{
					@RenderCard(
																																				 asmt.Name,
																																				 Url.Content( "~/assessment/" + asmt.Id ),
																																				 asmt.OwningOrganization.Name,
																																				 asmt.OwningOrganization.Id,
																																				 RenderText( "", "", asmt.Description, false, 500 ).ToHtmlString(),
																																				 new List<HelperResult>()
																																				 {
RenderEnumeration( "", "assessment", "", asmt.AssessmentMethodType, null ),
RenderEnumeration( "", "assessment", "", asmt.AssessmentUseType, null ),
RenderEnumeration( "", "assessment", "", asmt.DeliveryType, null ),
RenderEnumeration( "", "assessment", "", asmt.InstructionalProgramType, null ),
RenderEnumeration( "", "assessment", "", null, asmt.Subject ),
RenderEnumeration( "", "assessment", "", null, asmt.Keyword ),
																																				 },
																																				 "",
																																				 "assessment"
																																			 )
				}

			}
		</div>
	}
}
@helper RenderLearningOpportunityCardList( List<LearningOpportunityProfile> learningOpportunities )
{
	/**/

	if ( learningOpportunities != null && learningOpportunities.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList credentialList">
			@foreach ( var lopp in learningOpportunities.Where( m => m != null && m.Id > 0 ).ToList() )
			{
				lopp.OwningOrganization = lopp.OwningOrganization ?? new Organization();
				if ( lopp.EntityStateId == 3 )
				{
					@RenderCard(
																																										   lopp.Name,
																																										   Url.Content( "~/learningopportunity/" + lopp.Id ),
																																										   lopp.OwningOrganization.Name,
																																										   lopp.OwningOrganization.Id,
																																										   RenderText( "", "", lopp.Description, false, 500 ).ToHtmlString(),
																																										   new List<HelperResult>()
																																										   {
RenderEnumeration( "", "learningopportunity", "", lopp.LearningMethodType, null ),
RenderEnumeration( "", "learningopportunity", "", lopp.DeliveryType, null ),
RenderEnumeration( "", "learningopportunity", "", lopp.InstructionalProgramType, null ),
RenderEnumeration( "", "assessment", "", null, lopp.Subject ),
RenderEnumeration( "", "assessment", "", null, lopp.Keyword ),
																																										   },
																																										   "",
																																										   "learningopportunity"
																																									   )
				}
				else if ( lopp.EntityStateId == 2 )
				{
					//    titleUrl = lopp.SubjectWebpage;
					@RenderCard( lopp.Name, lopp.SubjectWebpage, "", 0, RenderText( "", "", lopp.Description, false, 500 ).ToHtmlString(),
					new List<HelperResult>(){
		  RenderEnumeration( "", "learningopportunity", "", lopp.LearningMethodType, null ),}, "", "learningopportunity"
					)
				}
			}|


		</div>
	}
}
@helper RenderConditionProfileList( List<ConditionProfile> conditionProfiles, string typeCode )
{
	/**/

	if ( conditionProfiles != null && conditionProfiles.Where( m => m.IsWorthDisplaying ).Count() > 0 )
	{
		<div class="cardList conditionProfileList">
			@foreach ( var profile in conditionProfiles.Where( m => m.IsWorthDisplaying ).ToList() )
			{
				var name = PickText( new List<string>() { profile.Name, profile.ProfileName } );
				<div class="card conditionProfile">
					<div class="cardTitle">@name</div>
					<div class="cardContent">
						@RenderText( "", "Description", profile.Description, true )
						@RenderText( "", "Experience", profile.Experience, true )
						@RenderText( "", "Years of Experience", profile.YearsOfExperience + " years", false, -1, profile.YearsOfExperience > 0 )
						@RenderText( "", "Minimum Age", profile.MinimumAge.ToString(), false, -1, profile.MinimumAge > 0 )
						@RenderExternalLinkButton( "More Information", profile.SubjectWebpage )
						@RenderItemList( "Conditions", "", profile.Condition )
						@RenderEnumeration( "", typeCode, "Audience Level", profile.AudienceLevel )
						@RenderEnumeration( "", typeCode, "Audience Type", profile.ApplicableAudienceType )
						@RenderText( "", "Credit Hour Type", profile.CreditHourType )
						@RenderText( "", "Credit Hour Value", profile.CreditHourValue.ToString(), false, -1, profile.CreditHourValue > 0 )
						@RenderEnumeration( "", typeCode, "Credit Unit Type", profile.CreditUnitType )
						@RenderText( "", "Credit Unit Type Description", profile.CreditUnitTypeDescription, true, -1 )
						@RenderText( "", "Credit Unit Value", profile.CreditUnitValue.ToString(), false, -1, profile.CreditUnitValue > 0 )
						@RenderText( "", "Weight", profile.Weight.ToString(), false, -1, profile.Weight > 0 )
						@RenderJurisdictionList( "Residency", profile.ResidentOf, "This information applies to residents of:", "This information does not apply to residents of:" )
						@RenderJurisdictionList( "Jurisdiction", profile.ResidentOf, "This information applies in:", "This information does not apply in:" )
						@RenderCostProfileList( profile.EstimatedCost )
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderFullConditionProfileList( List<ConditionProfile> conditionProfiles, string typeCode, bool showCredentials, bool showAssessments, bool showLearningOpportunities, bool showOtherProfiles = false, bool showAllRegardless = false )
{
	/**/

	if ( conditionProfiles != null && conditionProfiles.Count() > 0 )
	{
		var desiredProfiles = conditionProfiles.Where( m =>
			( showCredentials && m.TargetCredential.Count() > 0 ) ||
			( showAssessments && m.TargetAssessment.Count() > 0 ) ||
			( showLearningOpportunities && m.TargetLearningOpportunity.Count() > 0 )
			).ToList();

		if ( showOtherProfiles )
		{
			desiredProfiles = conditionProfiles.Where( m => m.TargetCredential.Count() == 0 && m.TargetAssessment.Count() == 0 && m.TargetLearningOpportunity.Count() == 0 && m.IsWorthDisplaying == true ).ToList();
		}

		if ( showAllRegardless )
		{
			desiredProfiles = conditionProfiles.Where( m => m != null && m.Id > 0 ).ToList();
		}

		if ( desiredProfiles.Count() > 0 )
		{
			<div class="cardList conditionProfileList">
				@foreach ( var profile in desiredProfiles.OrderByDescending( m => m.IsWorthDisplaying ).ToList() )
				{
					if ( !profile.IsWorthDisplaying )
					{
						if ( showCredentials )
						{
							@RenderCredentialCardList( profile.TargetCredential )
						}
						if ( showAssessments )
						{
							@RenderAssessmentCardList( profile.TargetAssessment )
						}
						if ( showLearningOpportunities )
						{
							@RenderLearningOpportunityCardList( profile.TargetLearningOpportunity )
						}
					}
					else
					{
						<div class="card conditionProfile">
							<div class="cardContent">
								@if ( showCredentials )
								{
									@RenderText( "cardTitle", "", "Credentials", false, -1, profile.TargetCredential.Count() > 0 )
									@RenderCredentialCardList( profile.TargetCredential )
								}
								@if ( showAssessments )
								{
									@RenderText( "cardTitle", "", "Assessments", false, -1, profile.TargetAssessment.Count() > 0 )
									@RenderAssessmentCardList( profile.TargetAssessment )
								}
								@if ( showLearningOpportunities )
								{
									@RenderText( "cardTitle", "", "Learning Opportunities", false, -1, profile.TargetLearningOpportunity.Count() > 0 )
									@RenderLearningOpportunityCardList( profile.TargetLearningOpportunity )
								}
								@if ( profile.IsWorthDisplaying )
								{
									<div class="@( showOtherProfiles ? "cardTitle" : "cardSubTitle" )">Conditions</div>
									@RenderText( "", "Description", profile.Description, true )
									@RenderText( "", "Experience", profile.Experience, true )
									@RenderText( "", "Years of Experience", profile.YearsOfExperience + " years", false, -1, profile.YearsOfExperience > 0 )
									@RenderText( "", "Minimum Age", profile.MinimumAge.ToString(), false, -1, profile.MinimumAge > 0 )
									@RenderExternalLinkButton( "More Information", profile.SubjectWebpage )
									@RenderItemList( "Conditions", "", profile.Condition )
									@RenderEnumeration( "", typeCode, "Audience Level", profile.AudienceLevel )
									@RenderEnumeration( "", typeCode, "Audience Type", profile.ApplicableAudienceType )
									@RenderText( "", "Credit Hour Type", profile.CreditHourType )
									@RenderText( "", "Credit Hour Value", profile.CreditHourValue.ToString(), false, -1, profile.CreditHourValue > 0 )
									@RenderEnumeration( "", typeCode, "Credit Unit Type", profile.CreditUnitType )
									@RenderText( "", "Credit Unit Type Description", profile.CreditUnitTypeDescription, true, -1 )
									@RenderText( "", "Credit Unit Value", profile.CreditUnitValue.ToString(), false, -1, profile.CreditUnitValue > 0 )
									@RenderText( "", "Weight", profile.Weight.ToString(), false, -1, profile.Weight > 0 )
									@RenderJurisdictionList( "Residency", profile.ResidentOf, "This information applies to residents of:", "This information does not apply to residents of:" )
									@RenderJurisdictionList( "Jurisdiction", profile.ResidentOf, "This information applies in:", "This information does not apply in:" )
									@RenderCostProfileList( profile.EstimatedCosts )
								}
								@if ( profile.AlternativeCondition.Count() > 0 )
								{
									@RenderText( "cardSubTitle", "", "Related Conditions:" )
									@RenderFullConditionProfileList( profile.AlternativeCondition, typeCode, true, true, true, true, true )
								}
							</div>
						</div>
					}
				}
			</div>
		}
	}
}
@helper RenderCosts( Entity data )
{
	/**/

	if ( data.DirectCostManifests.Any() || data.DirectAndManifestCosts.Any() )
	{
		@RenderCostManifestList( data.DirectCostManifests.ToList() )
		@RenderCostProfileList( data.DirectAndManifestCosts.ToList() )
	}

}
@helper RenderTargetAssessment( List<AssessmentProfile> list )
{
	/**/

	if ( list != null && list.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		foreach ( var ast in list )
		{
			if ( ast.CommonCosts.Any() || ast.EstimatedCost.Any() )
			{
				@*<div class="cardList costManifestList">*@
				<div class="card costManifest">
					<div class="cardHeaderTitle">@ast.Name</div>
					@RenderCostManifestList( ast.CommonCosts.ToList() )
					@RenderCostProfileList( ast.EstimatedCost.ToList() )
				</div>
			}
		}
	}
}
@helper RenderTargetLearningOpportunity( List<LearningOpportunityProfile> list )
{
	/**/

	if ( list != null && list.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		foreach ( var lop in list )
		{
			if ( lop.CommonCosts.Any() || lop.EstimatedCost.Any() || lop.HasPart.Any() )
			{
				<div class="cardList costManifestList">
					<div class="card costManifest">
						<div class="cardHeaderTitle">@lop.Name</div>
						@RenderCostManifestList( lop.CommonCosts.ToList() )
						@RenderCostProfileList( lop.EstimatedCost.ToList() )
					</div>
				</div>@RenderTargetLearningOpportunity( lop.HasPart.ToList() )
			}
		}
	}
}
@helper RenderCostProfileList( List<CostProfile> costProfiles )
{
	/**/

	if ( costProfiles != null && costProfiles.Where( m => m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList costProfileList">
			@foreach ( var costProfile in costProfiles.Where( m => m.Id > 0 ).ToList() )
			{
				costProfile.Items = costProfile.Items ?? new List<CostProfileItem>();
				costProfile.Items = costProfile.Items.Where( m => m != null && m.Id > 0 ).ToList();
				<div class="card costProfile">
					<div class="cardTitle">@costProfile.ProfileName</div>
					<div class="cardContent">
						<div class="costProfileDetails">
							<div class="costProfileText">
								@RenderText( "costProfileSummary", "Summary", costProfile.Description, true )
								@RenderText( "costProfileEffective", "Effective", "<b>" + costProfile.StartDate + "</b> to <b>" + costProfile.EndDate + "</b>", false, -1, HasText( costProfile.StartDate ) && HasText( costProfile.EndDate ) )
								@RenderText( "costProfileEffective", "Effective As Of", costProfile.StartDate, false, -1, HasText( costProfile.StartDate ) && !HasText( costProfile.EndDate ) )
								@RenderText( "costProfileEffective", "Effective Until", costProfile.EndDate, false, -1, !HasText( costProfile.StartDate ) && HasText( costProfile.EndDate ) )
								@RenderItemList( "Conditions", "", costProfile.Condition )
							</div>
							@RenderExternalLinkButton( "More Information", costProfile.CostDetails )
						</div>
						@RenderText( "cardSubTitle", "", "Details", false, -1, costProfile.Items.Count() > 0 )
						<div class="cardList costItemList">
							@foreach ( var item in costProfile.Items )
							{
								<div class="card costItem">
									<div class="cardContent">
										@RenderText( "costItemPrice", "", costProfile.CurrencySymbol + item.Price )
										<div class="costDataWrapper">
											<div class="costItemData">
												@RenderText( "costItemType", "", ( item.DirectCostType.Items.FirstOrDefault() ?? new EnumeratedItem() ).Name )
												@RenderText( "costItemPattern", "Payment(s)", item.PaymentPattern, true, -1 )
											</div>
											<div class="costItemConstraints">
												@RenderText( "costItemConstraintsHeader", "", "Applies To:" )
												@RenderEnumeration( "", "", "", item.ResidencyType )
												@RenderEnumeration( "", "", "", item.ApplicableAudienceType )
												@RenderText( "costItemConstraintsNone", "", "Everyone", false, -1, item.ResidencyType.Items.Count() == 0 && item.ApplicableAudienceType.Items.Count() == 0 )
											</div>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderProcessProfileList( List<ProcessProfile> processList )
{
	/**/

	if ( processList != null && processList.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList processList">
			@foreach ( var process in processList.Where( m => m != null && m.Id > 0 ).ToList() )
			{
				<div class="card process">
					<div class="cardHeaderTitle">@process.ProcessProfileType</div>
					<div class="cardContent">
						@RenderText( "", "Description", process.Description, true )
						@RenderText( "", "Frequency", process.ProcessFrequency )
						@RenderText( "", "Effective As Of", process.DateEffective )
						@RenderText( "", "Scoring Method", process.ScoringMethodDescription, true )
						@RenderText( "", "Verification Method", process.VerificationMethodDescription, true )
						@RenderCard( "Method", RenderText( "", "", process.ProcessMethodDescription, true ), RenderExternalLinkButton( "More Info", process.ProcessMethod ), "" )
						@RenderCard( "Standards", RenderText( "", "", process.ProcessStandardsDescription, true ), RenderExternalLinkButton( "More Info", process.ProcessStandards ), "" )
						@RenderCard( "Scoring Method Example", RenderText( "", "", process.ScoringMethodExampleDescription, true ), RenderExternalLinkButton( "More Info", process.ScoringMethodExample ), "" )
						@RenderEnumeration( "", "", "External Input Type", process.ExternalInput )
						@RenderJurisdictionList( "", process.Jurisdiction, "This process information applies in", "This process information does not apply in" )
						@RenderText( "cardSubTitle", "Credentials", "This process applies to the credential(s) listed below:", false, -1, process.TargetCredential.Count() > 0 )
						@RenderCredentialCardList( process.TargetCredential )
						@RenderText( "cardSubTitle", "Assessments", "This process applies to the assessment(s) listed below:", false, -1, process.TargetAssessment.Count() > 0 )
						@RenderAssessmentCardList( process.TargetAssessment )
						@RenderText( "cardSubTitle", "Learning Opportunities", "This process applies to the learning opportunity(ies) listed below:", false, -1, process.TargetLearningOpportunity.Count() > 0 )
						@RenderLearningOpportunityCardList( process.TargetLearningOpportunity )
						@RenderExternalLinkButton( "More Information", process.SubjectWebpage )
						@RenderText( "", "", "Process Provided By", false, -1, process.ProcessingAgent != null && process.ProcessingAgent.Id > 0 )
						@RenderOrganizationCard( process.ProcessingAgent, null )
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderRevocationProfileList( List<RevocationProfile> revocationList )
{
	/**/

	if ( revocationList != null && revocationList.Count() > 0 )
	{
		<div class="cardList revocationList">
			@foreach ( var revocation in revocationList )
			{
				<div class="card revocationProfile">
					<div class="cardTitle">@revocation.ProfileName</div>
					<div class="cardContent">
						@RenderText( "", "Description", revocation.Description, true )
						@RenderText( "", "Effective As Of", revocation.DateEffective )
						@RenderCard( "Criteria", null, RenderExternalLinkButton( "More Info", revocation.RevocationCriteriaUrl ), "" )
						@RenderJurisdictionList( "", revocation.Jurisdiction, "This revocation information applies in", "This revocation information does not apply in" )
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderRegistryData( RegistryImport rawMetadata )
{
	/**/

	var envelopeBase = workIT.Utilities.UtilityManager.GetAppKeyValue( "credentialRegistryGet" );
	var resourceBase = workIT.Utilities.UtilityManager.GetAppKeyValue( "credentialRegistryResource" );

	//https://cass.credentialengine.org/cass-editor/index.html?server=https://cass.credentialengine.org/&ceasnDataFields=true&origin=https://credentialengine.org&css=https://credentialengine.org/publisher/Style/CassStyles&frameworkId=https://cass.credentialengine.org/api/data/6beada08995d6d51f87536cc8afb38c4
	if ( rawMetadata != null )
	{
		<div class="cardList registryDataList">
			<div class="card rawMetadata registryIDs">
				<div class="cardTitle">Registry Information</div>
				<div class="cardContent">
					<div><b>CTID:</b> @rawMetadata.Ctid</div>
					<div><b>Envelope:</b> <a href="@string.Format( envelopeBase, rawMetadata.EnvelopeId )" target="externalLinkWindow">@rawMetadata.EnvelopeId</a></div>
					<div><b>Resource:</b> <a href="@string.Format( resourceBase, rawMetadata.Ctid )" target="externalLinkWindow">View in Registry</a></div>

					<div class="cardSubTitle">Raw Metadata</div>
					<div class="rawMetadataContent">@Html.Raw( rawMetadata.Payload )</div>

				</div>
			</div>
			@*
				<script type="application/ld+json">
					@Html.Raw( rawMetadata.Payload )
				</script>
			*@
		</div>
	}
}
@helper RenderRegistryCompetencyData( RegistryImport rawMetadata )
{
	/**/

	var envelopeBase = workIT.Utilities.UtilityManager.GetAppKeyValue( "credentialRegistryGet" );
	var resourceBase = workIT.Utilities.UtilityManager.GetAppKeyValue( "credentialRegistryResource" );
	if ( rawMetadata != null )
	{
		<div class="cardList registryDataList">
			<div class="card rawMetadata registryIDs">
				<div class="cardTitle">Registry Information</div>
				<div class="cardContent">
					<div><b>CTID:</b> @rawMetadata.Ctid</div>
					<div><b>Envelope:</b> <a href="@string.Format( envelopeBase, rawMetadata.EnvelopeId )" target="externalLinkWindow">@rawMetadata.EnvelopeId</a></div>
					<div><b>Resource:</b> <a href="@string.Format( resourceBase, rawMetadata.Ctid )" target="externalLinkWindow">View in Registry</a></div>

					<div class="cardSubTitle">Raw Metadata</div>
					<div class="rawMetadataContent">@Html.Raw( rawMetadata.Payload )</div>

				</div>
			</div>
			@*
				<script type="application/ld+json">
					@Html.Raw( rawMetadata.Payload )
				</script>
			*@
		</div>
	}
}
@helper RenderVerificationServiceList( List<VerificationServiceProfile> verificationList )
{
	/**/

	if ( verificationList != null && verificationList.Where( m => m != null && m.Id > 0 ).Count() > 0 )
	{
		<div class="cardList verificationList">
			@foreach ( var verification in verificationList.Where( m => m != null && m.Id > 0 ) )
			{
				<div class="card verification">
					@*<div class="cardTitle">@verification.ProfileName</div>*@
					<div class="cardContent">
						@RenderText( "", "Description", verification.Description, true )
						@RenderExternalLinkButton( "More Information", verification.SubjectWebpage )
						@RenderText( "", "Effective As Of", verification.DateEffective )

						@RenderText( "", "Authorization", verification.HolderMustAuthorize == null ? "" : ( bool ) verification.HolderMustAuthorize ? "The holder of the credential must authorize this service." : "This service does not require authorization.", false, -1, verification.Id > 0 )

						@*@RenderText( "", "Authorization", "The holder of the credential must authorize this service", false, -1, verification.HolderMustAuthorize )*@
						@RenderEnumeration( "", "", "Verification Claim Type", verification.ClaimType )

						@RenderText( "cardHeader", "", "Applicable Credential(s)", false, -1, verification.TargetCredential != null && verification.TargetCredential.Count() > 0 )
						@RenderCredentialCardList( verification.TargetCredential )

						@RenderText( "cardHeader", "", "Verification Service Costs", false, -1, verification.EstimatedCost != null && verification.EstimatedCost.Count() > 0 )
						@RenderCostProfileList( verification.EstimatedCost )

						@RenderExternalLinkButton( "Verification Service", verification.VerificationServiceUrl )
						@RenderExternalLinkButton( "Verification Directory", verification.VerificationDirectory )
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderTargetCardList( List<OrganizationRoleProfile> performedRoles, string guidance = "" )
{
	/**/

	if ( performedRoles != null && performedRoles.Count() > 0 )
	{
		if ( HasText( guidance ) )
		{
			<div class="textContent">
				@guidance
			</div>
		}
		try
		{
			foreach ( var role in performedRoles )
			{
				try
				{
					if ( role.TargetCredential.EntityStateId == 3 )
					{
						@RenderCard( role.TargetCredential.Name, Url.Content( "~/detail/credential/" + role.TargetCredential.Id ), role.TargetCredential.OwningOrganization.Name, role.TargetCredential.OwningOrganization.Id, RenderText( "", "", role.TargetCredential.Description, false, 500 ).ToHtmlString(),
								   new List<HelperResult>() {
							//RenderText( "", "credentialtype" , role.TargetCredential.CredentialTypeSchema),
							//RenderEnumeration( "", "credential", "", null, null, false, null, role.SourceEntityType ),
							RenderEnumeration( "", "credential", "", role.TargetCredential.CredentialTypeEnum, null ),
							RenderEnumeration( "", "credential", "", role.TargetCredential.AudienceLevelType, null ),
							RenderEnumeration( "", "", "", role.AgentRole, null ), },
								   string.IsNullOrWhiteSpace( role.TargetCredential.ImageUrl ) ? "" : role.TargetCredential.ImageUrl, "credential", role.TargetCredential != null && role.TargetCredential.Id > 0 )
					}
					else if ( role.TargetCredential.EntityStateId == 2 )
					{
						@RenderCard( role.TargetCredential.Name, role.TargetCredential.SubjectWebpage, "", 0, RenderText( "", "", role.TargetCredential.Description, false, 500 ).ToHtmlString(), new List<HelperResult>() {
						RenderEnumeration( "", "credential", "", role.TargetCredential.CredentialTypeEnum, null ),
						RenderEnumeration( "", "", "", role.AgentRole, null ),}, "", "credential" )
					}
				}
				catch { }
				try
				{
					if ( role.TargetAssessment.EntityStateId == 3 )
					{
						@RenderCard( role.TargetAssessment.Name, Url.Content( "~/assessment/" + role.TargetAssessment.Id ), role.TargetAssessment.OwningOrganization.Name, role.TargetAssessment.OwningOrganization.Id, RenderText( "", "", role.TargetAssessment.Description, false, 500 ).ToHtmlString(),
								   new List<HelperResult>() {
					RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
					RenderEnumeration( "", "assessment", "", role.TargetAssessment.AudienceType, null ),
					RenderEnumeration( "", "", "", role.AgentRole, null ),
								  }, "", "assessment", role.TargetAssessment != null && role.TargetAssessment.Id > 0 )
					}
					else if ( role.TargetAssessment.EntityStateId == 2 )
					{
						@RenderCard( role.TargetAssessment.Name, role.TargetAssessment.SubjectWebpage, "", 0, RenderText( "", "", role.TargetAssessment.Description, false, 500 ).ToHtmlString(),
															   new List<HelperResult>() {
										RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
										RenderEnumeration( "", "", "", role.AgentRole, null ),
															  }, "", "assessment", role.TargetAssessment != null && role.TargetAssessment.Id > 0 )
					}
				}
				catch { }
				try
				{
					if ( role.TargetLearningOpportunity.EntityStateId == 3 )
					{
						@RenderCard( role.TargetLearningOpportunity.Name, Url.Content( "~/learningopportunity/" + role.TargetLearningOpportunity.Id ), role.TargetLearningOpportunity.OwningOrganization.Name, role.TargetLearningOpportunity.OwningOrganization.Id, RenderText( "", "", role.TargetLearningOpportunity.Description, false, 500 ).ToHtmlString(),
									new List<HelperResult>() {
						RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
						RenderEnumeration( "", "", "", role.AgentRole, null ),
								}, "", "learningopportunity", role.TargetLearningOpportunity != null && role.TargetLearningOpportunity.Id > 0 )
					}
					else if ( role.TargetLearningOpportunity.EntityStateId == 2 )
					{
						@RenderCard( role.TargetLearningOpportunity.Name, role.TargetLearningOpportunity.SubjectWebpage, "", 0, RenderText( "", "", role.TargetLearningOpportunity.Description, false, 500 ).ToHtmlString(),
													   new List<HelperResult>() {
						RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
						RenderEnumeration( "", "", "", role.AgentRole, null ),
												   }, "", "learningopportunity", role.TargetLearningOpportunity != null && role.TargetLearningOpportunity.Id > 0 )
					}
					@*else
						{
							 @RenderCard( role.TargetLearningOpportunity.Name, Url.Content( "~/learningopportunity/" + role.TargetLearningOpportunity.Id ), role.TargetLearningOpportunity.OwningOrganization.Name, role.TargetLearningOpportunity.OwningOrganization.Id, RenderText( "", "", role.TargetLearningOpportunity.Description, false, 500 ).ToHtmlString(),
																  new List<HelperResult>() {
								RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
								RenderEnumeration( "", "", "", role.AgentRole, null ),
															  }, "", "learningopportunity", role.TargetLearningOpportunity != null && role.TargetLearningOpportunity.Id > 0 )
						}*@
				}
				catch { }
				try
				{
					if ( role.TargetOrganization.EntityStateId == 3 )
					{
						@RenderCard( role.TargetOrganization.Name, Url.Content( "~/organization/" + role.TargetOrganization.Id ), "", 0, RenderText( "", "", role.TargetOrganization.Description, false, 500 ).ToHtmlString(),
								   new List<HelperResult>() {
								RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
								RenderEnumeration( "", "", "", role.AgentRole, null ),
								   }, string.IsNullOrWhiteSpace( role.TargetOrganization.ImageUrl ) ? "" : role.TargetOrganization.ImageUrl, "organization", role.TargetOrganization != null && role.TargetOrganization.Id > 0 )
					}
					else if ( role.TargetOrganization.EntityStateId == 2 )
					{
						@RenderCard( role.TargetOrganization.Name, role.TargetOrganization.SubjectWebpage, "", 0, RenderText( "", "", role.TargetOrganization.Description, false, 500 ).ToHtmlString(),
								   new List<HelperResult>() {
								RenderEnumeration( "", "", "", null, null, false, null, role.SourceEntityType ),
								 RenderEnumeration( "", "", "", role.AgentRole, null ),
								   }, "", "organization", role.TargetOrganization != null && role.TargetOrganization.Id > 0 )
					}

				}
				catch { }
			}
		}
		catch { }
	}
}
@helper RenderFinancialAssistanceList( List<FinancialAlignmentObject> items )
{
	if ( items != null && items.Count() > 0 )
	{
		var validItems = items.Where( m => m != null && m.Id > 0 ).ToList();
		var groups = items.GroupBy( m => m.Framework ).ToList();
		<div class="cardList financialAssistanceList">
			@foreach ( var group in groups )
			{
				var framework = ( group.FirstOrDefault( m => !string.IsNullOrWhiteSpace( m.Framework ) ) ?? new FinancialAlignmentObject() { Framework = "" } ).Framework;
				var frameworkName = ( group.FirstOrDefault( m => !string.IsNullOrWhiteSpace( m.Framework ) ) ?? new FinancialAlignmentObject() { FrameworkName = "Unknown Source" } ).FrameworkName;
				<div class="card financialAssistance">
					@if ( !string.IsNullOrWhiteSpace( framework ) )
					{
						<div class="cardTitle">
							<a href="@framework" target="externalLinkWindow">@frameworkName</a>
						</div>
					}
					else
					{
						<div class="cardTitle">@frameworkName</div>
					}
					<div class="cardContent">
						@foreach ( var item in group )
						{
							@RenderText( "cardSubTitle", "Name", item.TargetNodeName )
							@RenderText( "", "Description", item.TargetNodeDescription )
							@RenderText( "", "Type", item.AlignmentType )
							@RenderText( "", "Date", item.AlignmentDate )
							@RenderText( "", "Code", item.CodedNotation )
							@RenderExternalLinkButton( "More Information", item.TargetNode )
						}
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderConditionManifestList( List<ConditionManifestExpanded> items )
{
	if ( items != null && items.Count() > 0 )
	{
		<div class="cardList conditionManifestList">
			@foreach ( var manifest in items )
			{
				<div class="card conditionManifest">
					<div class="cardTitle">@manifest.Name</div>
					<div class="cardContent">
						@RenderText( "", "Description", manifest.Description )
						@*@RenderText( "", "CTID", manifest.CTID )*@
						@RenderExternalLinkButton( "More Information", manifest.SubjectWebpage )
						@RenderText( "cardSubTitle", "", "Requires", false, -1, manifest.Requires.Count() > 0 )
						@RenderFullConditionProfileList( manifest.Requires, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Recommends", false, -1, manifest.Recommends.Count() > 0 )
						@RenderFullConditionProfileList( manifest.Recommends, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Advanced Standing From", false, -1, manifest.AdvancedStandingFrom.Count() > 0 )
						@RenderFullConditionProfileList( manifest.AdvancedStandingFrom, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Preparation From", false, -1, manifest.PreparationFrom.Count() > 0 )
						@RenderFullConditionProfileList( manifest.PreparationFrom, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Is Required For", false, -1, manifest.IsRequiredFor.Count() > 0 )
						@RenderFullConditionProfileList( manifest.IsRequiredFor, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Is Recommended For", false, -1, manifest.IsRecommendedFor.Count() > 0 )
						@RenderFullConditionProfileList( manifest.IsRecommendedFor, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Is Advanced Standing For", false, -1, manifest.IsAdvancedStandingFor.Count() > 0 )
						@RenderFullConditionProfileList( manifest.IsAdvancedStandingFor, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Is Preparation For", false, -1, manifest.IsPreparationFor.Count() > 0 )
						@RenderFullConditionProfileList( manifest.IsPreparationFor, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Corequisite", false, -1, manifest.Corequisite.Count() > 0 )
						@RenderFullConditionProfileList( manifest.Corequisite, "organization", true, true, true, true, true )
						@RenderText( "cardSubTitle", "", "Entry Conditions", false, -1, manifest.EntryCondition.Count() > 0 )
						@RenderFullConditionProfileList( manifest.EntryCondition, "organization", true, true, true, true, true )
					</div>
				</div>
			}
		</div>
	}
}
@helper RenderCostManifestList( List<CostManifest> items )
{
	if ( items != null && items.Count() > 0 )
	{
		<div class="cardList costManifestList">
			@foreach ( var manifest in items )
			{
				<div class="card costManifest">
					<div class="cardTitle">@manifest.Name</div>
					<div class="cardContent">
						@RenderText( "", "Description", manifest.Description )
						@RenderExternalLinkButton( "More Information", manifest.CostDetails )
						@RenderText( "cardSubTitle", "", "Costs", false, -1, manifest.EstimatedCosts.Count() > 0 )
						@RenderCostProfileList( manifest.EstimatedCosts )
					</div>
				</div>
			}
		</div>
	}
}
@Html.Partial( "~/Views/Detail/_CompetencyFrameworkSharedV2.cshtml" )

<script type="application/ld+json">
	{
	"@@context": "http://schema.org/",
	"@@type": "WebPage",
	"@@id": "@Request.RawUrl",
	"about": {
	"@@type": "WebPage",
	"@@id": "@(( string ) data.Source.SubjectWebpage)"
	},
	"significantLink": "@(( string ) data.Source.SubjectWebpage)",
	"relatedLink": "@(( string ) data.Source.SubjectWebpage)"
	}
</script>
<script type="text/javascript">
    /* Setup Functions */
    $(document).ready(function () {
        setupOverlays();
        setupStickyBanner();
        setupFrameWorkButton();
        //setupCompetencyHighlights();
        $("#homePageSection").css("display", "");
        $('#btnHome').on("click", function () {
            window.location = '\\';
        });

        if (window == window.top) {
            $("#widgetHomeButton").css("display", "none");
        } else {
            $("#reimportButton").css("display", "none");
            $("#reindexButton").css("display", "none");
        }
		setupCompetencyFrameworks();
    });
    var allCompetencies = @Html.Raw( Newtonsoft.Json.JsonConvert.SerializeObject( allFrameWorks ) );


    //highlighting competencies
    function setupCompetencyHighlights() {
            //Get a list of framework iframes
        var frameworkFrames = $(".frameworkIframe");

            //Create a handler for message events
        //$(window).on("message", function (msg) {
        setTimeout(function () {
            frameworkFrames.each(function () {
                var frame = $(this);
                //Get the identifier that ties the iframe to the competencies in bucket 1
                var identifier = frame.attr("data-frameworkUrl");

                //Find the competency set that matches that identifier
                var matchedCompetencies = allCompetencies[identifier];

                //Send the postMessage to the iframe
                if (frame.length > 0) {
                    frame[0].contentWindow.postMessage({
                        "message": "highlightedCompetencies",
                        "competencies": matchedCompetencies
                    }, "*");
                }
            })

                  //Find the iframe that the message came from – this will need some debugging
                  //Note that the jQuery .filter() function works a little differently from the native javascript .filter() function
                  //var frame = frameworkFrames.filter(function(index, element) { return element.contentWindow == msg.originalEvent.source });

            }, 10000)
      }

	//Setup FrameWork Button
	function setupFrameWorkButton() {
		var frameworkButtons = $(".frameworkButton");
		var frameworkIframeworks = $(".frameworkIframe");
		frameworkButtons.on("click", function () {

            var frameworkUrl = $(this).attr("data-frameworkUrl");
            frameworkIframeworks.hide();
            frameworkIframeworks.filter("[data-frameworkUrl='" + frameworkUrl + "']").show();
       });
       frameworkButtons.first().trigger("click");

       @*document.getElementById("iframe").contentWindow.postMessage({
	"message": "highlightedCompetencies",
	"competencies": ["@iframeId of competency", "@iframeId of competency", "@iframeId of competency"]
}, window.location.origin);*@


	}


	//Setup Competency Frameworks
	function setupCompetencyFrameworks(){
		var uris = [];
		var boxesToRender = $(".competencyFramework[data-rendered='false']");
		boxesToRender.each(function () {
			var box = $(this);
			uris.push(box.attr("data-uri"));
		});

		CompetencyFrameworks.getAllFrameworkData([], uris, {
			Frameworks: function() {
				console.log("Loaded Frameworks");
				//Render the Framework
				boxesToRender.each(function() {
					var FrameworkBox = $(this);
					var FrameworkData = CompetencyFrameworks.Frameworks.filter(function(m){ return CompetencyFrameworks.URItoCTID(m["@@id"]) == CompetencyFrameworks.URItoCTID(FrameworkBox.attr("data-uri")); })[0];
					CompetencyFrameworks.writeFramework(FrameworkData.Framework, FrameworkBox);
					FrameworkBox.find(".detailsLink").attr("href", "@Url.Content( "~/competencyframework/" )" + FrameworkData.Framework["ceterms:ctid"]).html("Details");

					//Render the Competencies
					FrameworkData.Framework["ceasn:hasTopChild"].forEach(function(topChildURI){
						var topChild = FrameworkData.Competencies.filter(function (m) { return m["@@id"] == topChildURI })[0];
						CompetencyFrameworks.renderCompetencyTree(topChild, FrameworkBox.find(".frameworkCompetencies"), null, function (competencyData, Rendered) {
							competencyData.Rendered = Rendered;
						});
					});

				});
			}
		});
	}
	//

    //Setup Overlay Windows
    function setupOverlays() {
        $(".overlayButton").each(function () {
            var button = $(this);
            var windowID = button.attr("data-overlayID");
            var relatedWindow = $(".overlayWindow[data-overlayID=" + windowID + "]");

			button.on("click", function (e) {
				if (relatedWindow.hasClass("visible")) {
					hideOverlays();
				}
				else {
					showOverlay(windowID);
				}
			});
		});

		$("html").not(".overlayWindow, .overlayButton").on("click", function () {
			hideOverlays();
		});

		$(".overlayWindow, .overlayButton").on("click", function (e) {
			e.stopPropagation();
		});

		$(".overlayWindow .overlayCloseButton").on("click", function () {
			hideOverlays();
		});
	}
	//

	//Setup sticky banner
	function setupStickyBanner() {
		var win = $(window);
		var siteHeader = $("#mainSiteHeader");
		var banner = $("#banner");
		var columns = $("#columns");
		win.on("scroll", function () {
			var top = win.scrollTop();
			var width = win.width();
			if (top > siteHeader.outerHeight() && width > 700) {
				banner.addClass("fixed");
				columns.css("margin-top", banner.outerHeight());
			}
			else {
				banner.removeClass("fixed");
				columns.css("margin-top", "0");
			}
		});
	}
	//
</script>
<script type="text/javascript">
	/* Page Functions */

	//Show an overlay window
	function showOverlay(overlayID){
		hideOverlays();
		$(".overlayWindow[data-overlayID=" + overlayID + "]").addClass("visible");
	}

	//Hide all overlay windows
	function hideOverlays(){
		$(".overlayWindow").removeClass("visible");
	}

	function reimportEntity(id, type, ctid,  credentialRegistryId) {
		modal.confirm(
            "Re-import This Data",
            "Are you sure that you want to re-import this @data.TypeString?",
            function () {
            	var context = {
            		Id: @Model.Id, Ctid: ctid, CredentialRegistryId: credentialRegistryId, TypeName: type
            	};
            	doAjax("Import", "Reimport", context, success_Reimport, null, true);
            },
            function() {}
        );
	}
	//
	function success_Reimport(message, result){
		if(message.valid){
			consoleMessage.addSuccessMessage("Reimport was successful. Refresh page", "", 2000);
		}
		else {
			consoleMessage.addErrorMessage(message.status, "", 10000);
		}
	}

	function reindexEntity(id, type, ctid,  credentialRegistryId) {
	    modal.confirm(
            "Re-index This Data",
            "Are you sure that you want to re-index this @data.TypeString?",
            function () {
                var context = {
                    Id: @Model.Id, Ctid: ctid, CredentialRegistryId: credentialRegistryId, TypeName: type
                };
                doAjax("Import", "Reindex", context, success_Reindex, null, true);
            },
            function() {}
        );
	}
	//
    function success_Reindex(message, result){
	    if(message.valid){
	        consoleMessage.addSuccessMessage("Reindex was successful. Check the search", "", 2000);
	    }
	    else {
	        consoleMessage.addErrorMessage(message.status, "", 10000);
	    }
	}
	//AJAX caller
	function doAjax(controller, method, data, success, passThrough, useSpinner) {
		//Show spinner if appropriate
		if(useSpinner){
			showSpinner();
		}

		$.ajax({
			url: "@Url.Content( "~/" )" + controller + "/" + method,
			async: true,
			headers: { "Accept": "application/json", "Content-type": "application/json; charset=utf-8" },
			dataType: "json",
			type: "POST",
			data: JSON.stringify(data),
			success: function (message) {
				console.log("Response: ", message);
				if (typeof (success) == "function") {
					success(message, passThrough);
				}
			}
		}).always(function() {
			hideSpinner();
		});
	}
	//
	/* AJAX Functions */

	function showSpinner(){
		$("#waitWrapper").stop().fadeIn(250);
	}
	//

	function hideSpinner() {
		$("#waitWrapper").stop().fadeOut(250);
	}
	//
</script>
<script type="text/javascript">
	/* Map Functions */
	var googleMap = {};
	var mapCenter = { lat: @mapData.CenterLatitude, lng: @mapData.CenterLongitude };
	var mapBounds = { north: @mapData.BoundsNorth, east: @mapData.BoundsEast, south: @mapData.BoundsSouth, west: @mapData.BoundsWest };
	var mapMarkerID = 0;
	var markerList = [];

	function setupMap() {
		//Create Map
		var mapBox = $("#mainMapBox");
		googleMap = new google.maps.Map(mapBox[0], { center: mapCenter, zoom: 4 });
		googleMap.fitBounds(mapBounds);

		//Initialize buttons
		$(".addressButton").each(function () {
			var button = $(this);
			//Decorate button
			button.append("<i class=\"markerIcon fa fa-map-marker \"></i>");

			//Add map functions
			try {
				var lat = parseFloat(button.attr("data-latitude"));
				var lon = parseFloat(button.attr("data-longitude"));
				var newMarker = addMarker(googleMap, button, lat, lon);
				button.attr("data-markerID", newMarker.markerID);
				button.on("click", function () {
					focusMapOnMarker(googleMap, parseInt(button.attr("data-markerID")));
				});
			}
			catch (e) { }
		});

		if(markerList.length == 1){
			setTimeout(function() {
				googleMap.setZoom(14);
			}, 100);
			setTimeout(function() {
				googleMap.setZoom(14);
			}, 1000);
		}
	}
	//

	function addMarker(map, button, lat, lon) {
		//Create marker
		var marker = new google.maps.Marker({
			map: map,
			position: { lat: lat, lng: lon },
			markerID: mapMarkerID
		});

		//Add functionality
		marker.addListener("click", function () {
			focusMapOnMarker(map, marker.markerID);
		});
		mapMarkerID++;
		markerList.push(marker);
		return marker;
	}
	//

	function focusMapOnMarker(map, markerID) {
		for (var i in markerList) {
			//Find marker by ID
			if (markerList[i].markerID == markerID) {
				//Focus on map marker and highlight address button
				map.setCenter(markerList[i].position);
				$(".addressButton[data-markerID=" + markerID + "]").addClass("highlight");
				setTimeout(function () {
					$(".addressButton[data-markerID=" + markerID + "]").removeClass("highlight");
				}, 1000);
			}
		}
	}
	//
</script>
<script type="text/javascript">
	$(document).ready(function () {
		$(".jsonLDButton").on("click", function (e) {
			e.stopPropagation();
			$('[data-overlayid=' + $(this).attr("data-target") + ']')[0].click();
		});
	});
</script>
<script type="text/javascript">
/* handle highlighting cass competencies */
	function setupHighlighting() {
		@*if (@data.AllCompetencies.Requires.Count() > 0) {
			var frameworks = @data.AllCompetencies.RequiresByFramework;
			//if (frameworks != null && frameworks.Count() > 0 && frameworks.Where(m => m.Items.Where(n => n != null).Count() > 0 && HasText(m.CaSSViewerUrl)).Count() > 0) {

			//	for (var framework in frameworks) {
			//		var ctid = framework.FrameworkCtid;
			//		//may need to ensure the id is unique, i.e. that ctid is not used elsewhere
			//		document.getElementById(ctid).contentWindow.postMessage({
			//			"message": "highlightedCompetencies",
			//			"competencies": framework.Items.Select(m => m.TargetNode).ToList()
			//		}, window.location.origin);
			//	}
			//}
		}*@


		@*if (@data.AllCompetencies.Assesses.Count() > 0) {

		}

		if (@data.AllCompetencies.Teaches.Count() > 0) {

		}*@
	}
</script>
<style type="text/css">
	/* Big Stuff */
	#detailContent { margin: -5px -5vw 0 -5vw; padding: 0; }
	#waitWrapper { position: fixed; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0,0,0,0.5); z-index: 999999; transition: none; display: none; }
	#wait { width: 200px; margin: calc(50vh - 200px) auto; text-align: center; color: #FFF; }
	#waitSpinner { width: 100%; display: block; font-size: 100px; line-height: 100px; }
	#waitTitle { font-size: 26px; padding: 20px 5px 20px 20px; }
	.bigButton { display: block; padding: 10px; width: 100%; margin: 0 0 10px 0; max-height: 42px; }
	ul { margin: 0 0 10px 0; padding: 0 0 0 20px; }
	.compactItem { margin-bottom: 10px; border-left: 5px solid #F5F5F5; padding-left: 5px; }
	.compactItem .compactItemHeader { font-weight: bold; background-color: #F5F5F5; margin-left: -5px; padding: 2px 5px; }
	.text { margin-bottom: 5px; position: relative; }
	.text.preformatted .textContent { display: block; white-space: pre-wrap; text-align: justify; }
	.text.hasLink { padding-right: 160px; }
	.text.hasLink .linkButton { position: absolute; top: 0; right: 0; width: 150px; height: 40px; }
	.enumeration { margin-bottom: 5px; }
	.enumeration .enumerationHeader { font-weight: bold; }
	.enumeration .grayButton { display: inline-block; padding: 5px 10px; margin: 2px; }
	.enumeration.keyword p { padding: 2px; }
	.itemList { }
	.itemList .itemHeader { font-weight: bold; }
	/* Banner */
	#detailContent #banner { background-color: #0F3E63; color: #FFF; padding: 15px 1vw; display: -webkit-flex; display: flex; }
	#detailContent #banner h1 { font-size: 28px; color: #FFF; margin: 0; padding: 5px 5px 10px 5px; }
	#detailContent #banner #owner, #detailContent #banner #entityType { display: table; padding: 2px 10px; color: #FFF; }
	#detailContent #banner #bannerNames { flex-basis: auto; flex-grow: 1; padding-right: 10px; }
	#detailContent #banner #bannerButtons { flex-basis: 150px; }
	#detailContent #banner #bannerButtons .actionButton { display: block; padding: 2px 5px; width: 100%; margin-bottom: 1px; }
	#detailContent #banner #entityType { font-style: italic; }
	#detailContent #banner.fixed { position: fixed; top: 0; left: 0; right: 0; z-index: 100; }
	#detailContent #banner .badgeIssued { padding: 5px; font-style: italic; }
	@@media ( max-width: 700px ) {
		#detailContent #banner.fixed { position: static; }
	}
	/* Columns */
	#detailContent #columns { display: -webkit-flex; display: flex; padding-bottom: 50px; }
	#detailContent #columns .column { -webkit-flex: 33.33333% 1 0; flex: 33.33333% 1 0; max-width: calc(100% / 3); padding: 0 5px; }
	#detailContent #columns .column:first-child { padding-left: 1vw; }
	#detailContent #columns .column:last-child { padding-right: 1vw; }
	#detailContent #columns .column .columnHeader { margin: 0 -5px 10px -5px; padding: 5px 10px; background-color: #F5F5F5; color: #3D4443; font-size: 28px; }
	/* Sections */
	.section { margin-bottom: 15px; padding: 0 5px; }
	.section .sectionHeader { padding: 5px 0 5px 0; }
	/* Cards */
	.card { border: 1px solid #CAD9DB; background-color: #FCFCFC; padding: 5px; margin-bottom: 10px; }
	.card .cardHeaderTitle { margin: -5px -5px 5px -5px; background-color: #8fb9ac; color: #FFF; font-weight: bold; padding: 5px; }
	.card .cardTitle { margin: -5px -5px 5px -5px; background-color: #CAD9DB; font-weight: bold; padding: 5px; }
	.card.withImage .cardContent { display: -webkit-flex; display: flex; }
	.card.withImage .cardContent .cardText { -webkit-flex: auto; flex: auto; padding-right: 5px; }
	.card.withImage .cardContent .cardImage { -webkit-flex: 100px 0 0; flex: 100px 0 0; }
	.card .cardImage img { max-width: 100%; max-height: 200px; }
	.card .cardSubTitle { font-weight: bold; background-color: #DDD; padding: 5px; margin: 0 -5px 5px -5px; }
	.card .cardHeader { font-weight: bold; }
	.card.withURL.hasText.hasLink .cardContent { display: -webkit-flex; display: flex; }
	.card.withURL.hasText.hasLink .cardContent .text { -webkit-flex: auto; flex: auto; }
	.card.withURL.hasText.hasLink .cardContent .linkButton { -webkit-flex: 25% 0 0; flex: 25% 0 0; margin-left: 10px; }
	.card .tags .enumeration { display: inline; }
	/* Map */
	#mainMapBox { height: 50vh; min-height: 300px; margin-bottom: 10px; max-height: 530px; }
	.addressButton { position: relative; padding-left: 50px; }
	.addressButton .markerIcon { margin: 0; font-size: 30px; position: absolute; top: 5px; left: 10px; color: #45A085; }
	.addressButton.highlight { background-color: #E0DB80; }
	/* Profile Overlays */
	.overlayButton { position: relative; padding: 10px 50px; text-align: center; }
	.overlayButton .fa { position: absolute; right: 5px; top: 5px; font-size: 30px; }
	.overlayButton .totalCount { position: absolute; left: 5px; top: 2px; font-size: 30px; }
	.overlayWindow { position: fixed; top: 5vh; left: 10vw; right: 10vw; bottom: 10vh; border: 1px solid #CCC; background-color: #F5F5F5; z-index: 10000; box-shadow: 0 0 50px rgba(0,0,0,0.3); display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; }
	.overlayWindow:not(.visible) { display: none; }
	.overlayWindow .overlayTitle { font-size: 20px; padding: 10px; min-height: 45px; }
	.overlayWindow .overlayTitle * { font-size: inherit; }
	.overlayWindow .overlayTitle .overlayCloseButton { position: absolute; right: 6px; top: 6px; height: 30px; width: 30px; font-size: 18px; }
	.overlayWindow .overlayTitle .totalCount { background-color: #BAC9CB; padding: 10px; margin: -10px 10px -10px -10px; min-width: 45px; text-align: center; display: inline-block; height: 100%; min-height: 45px; }
	.overlayWindow .overlayContent { overflow-y: auto; margin: -5px; padding: 5px; }
	/* Competencies */
	.competency { position: relative; padding: 5px; border-bottom: 1px solid rgba(0,0,0,0.05); }
	.competency:last-child { border: none; }
	.competency .linkButton { padding: 5px; position: absolute; right: 0; top: 0; height: 30px; width: 80px; }
	.competency.hasName.hasDescription .competencyName { margin-bottom: 5px; }
	.competency.hasName.hasDescription .competencyDescription { padding-left: 25px; white-space: pre-line; }
	.frameworkName { margin: -5px -5px 5px -5px; background-color: #CAD9DB; font-weight: bold; padding: 5px; }
	.frameworkDescription { padding: 10px; }
	.frameworkTabs { padding: 5px 0; }
	.competency .competencyChildren { padding-left: 25px; }
	.competency .competencyTitle { display: flex; align-items: baseline; }
	.competency .competencyTitle .competencyTag { padding: 1px 5px; background-color: rgba(0,0,0,0.05); font-weight: lighter; margin: 1px 2px; }
	.competency .competencyTitle .competencyTag:empty { display: none; }

	.competencyFramework .fa-spinner { text-align: center; font-size: 20px; padding: 10px; display: block; }
	.frameworkButtonBox { padding: 5px; }
	.frameworkButtonBox .frameworkButton { padding: 5px 10px; margin: 1px 2px; }
	.frameworkLinks { display: flex; margin-bottom: 10px; }
	.frameworkLinks a { margin: 1px 2.5px; padding: 2.5px 5px; }
	.competencyComment { font-weight: lighter; }

	/* Costs */
	.costProfile { margin-bottom: 25px; }
	.costProfile .cardTitle { font-size: 18px; }
	.costProfile .costProfileDetails { -webkit-display: flex; display: flex; }
	.costProfile .costProfileDetails .costProfileText { -webkit-flex: auto 1 1; flex: auto 1 1; padding-right: 10px; }
	.costProfile .costProfileDetails .externalLink { -webkit-flex: 175px 0 0; flex: 175px 0 0; height: 40px; }
	.costProfile .costProfileSummary { padding: 10px 5px; }
	.costProfile .costProfileEffective { padding: 10px 5px; }
	.costItem .cardContent { display: -webkit-flex; display: flex; align-items: center; }
	.costItem .cardContent .costDataWrapper { display: -webkit-flex; display: flex; align-items: center; -webkit-flex: 100% 1 1; flex: 100% 1 1; }
	.costItem .costItemPrice { -webkit-flex: 150px 0 0; flex: 150px 0 0; padding-right: 10px; }
	.costItem .costItemPrice * { font-size: 28px; font-weight: bold; }
	.costItem .costItemData { -webkit-flex: auto 1 1; flex: auto 1 1; padding: 0 10px 0 0; }
	.costItem .costItemData .costItemType { font-weight: bold; }
	.costItem .costItemConstraints { width: 50%; }
	.costItem .costItemConstraints .costItemConstraintsHeader { font-weight: bold; }
	.costItem .costItemConstraints .enumeration { display: inline; }
	.costItem .costItemConstraints .costItemConstraintsNone { padding: 10px; text-align: center; font-style: italic; }
	.overlayButton[data-overlayid='registryData'] { display: none; }
	.overlayButton[data-overlayid*='FrameworkData'] { display: none; }
	.registryButtonBox { padding: 2px; display: inline-block; vertical-align: top; max-width: 200px; margin-right: 5px; background-color: #CAD9DB; margin-bottom: 5px; font-style: oblique; }
	.registryButtonBox span { font-size: small; padding: 0 5px; }
	.jsonLDButton, .jsonLDButton:hover, .jsonLDButton:focus { padding: 0; border: none; box-shadow: none; width: 64px; height: 64px; float: left; margin-right: 5px; }
	@@media ( max-width: 1000px ) {
		.costItem .cardContent .costDataWrapper { -webkit-flex-wrap: wrap; flex-wrap: wrap; }
		.costItem .costItemData { flex: 100% 0 0; }
		.costItem .costItemConstraints { flex: 100% 0 0; }
	}
	@@media ( max-width: 700px ) {
		.costItem .cardContent { -webkit-flex-wrap: wrap; flex-wrap: wrap; }
		.costItem .costItemPrice { -webkit-flex: 100% 0 0; flex: 100% 0 0; }
		.costItem .cardContent .costDataWrapper { -webkit-flex: 100% 0 0; flex: 100% 0 0; }
		.costProfile .costProfileDetails { -webkit-flex-wrap: wrap; flex-wrap: wrap; }
		.costProfile .costProfileDetails .costProfileText, .costProfile .costProfileDetails .externalLink { -webkit-flex: 100% 0 0; flex: 100% 0 0; }
		.card.withURL.hasText.hasLink .cardContent { -webkit-flex-wrap: wrap; flex-wrap: wrap; }
		.card.withURL.hasText.hasLink .cardContent .linkButton { -webkit-flex: 100% 0 0; flex: 100% 0 0; margin-left: 0; }
	}
	/* Miscellaneous */
	.mainDescription::after { content: " "; clear: both; display: block; }
	.basicInfoImage { float: right; max-width: 30%; max-height: 200px; margin: 0 0 10px 10px; }
	.socialMediaLinkList { text-align: center; }
	a.socialMediaLink { font-size: 50px; color: #45A085; opacity: 0.9; }
	a.socialMediaLink:hover, a.socialMediaLink:focus { opacity: 1; color: #45A085; }
	.gradientBackground { background-image: linear-gradient(#AAA, #EEE); }
	.jurisdictionAssertion .enumerationHeader { color: #000; }
	.rawMetadataContent { font-size: 12px; white-space: pre-wrap; font-family: Consolas, 'Courier New', monospace; padding: 10px; }
	.metadataBox.loadingFromRegistry { display: -webkit-flex; display: flex; }
	.metadataBox.loadingFromRegistry > div { -webkit-flex: 0 0 50%; flex: 0 0 50%; }
	.overlayWindow[data-overlayid='registryData'] .totalCount, [data-overlayid='registryData'] .totalCount { display: none; }
	.registryIDs .cardContent div { padding: 5px; }
	.card.conditionProfile { margin-bottom: 50px; }
	@@media ( min-width: 1276px ) {
		#detailContent #columns .column:first-child .columnHeader { margin-left: -1vw; padding-left: 1vw; }
		#detailContent #columns .column:last-child .columnHeader { margin-right: -1vw; padding-right: 1vw; }
	}
	@@media ( max-width: 1275px ) {
		#detailContent #columns { -webkit-flex-wrap: wrap; flex-wrap: wrap; }
		#detailContent #columns .column { max-width: none; }
		#detailContent #columns #about, #detailContent #columns #location { -webkit-flex: 50% 1 0; flex: 50% 1 0; }
		#detailContent #columns #details { -webkit-flex: 100% 1 0; flex: 100% 1 0; }
		.overlayWindow { left: 5vw; right: 5vw; }
	}
	@@media ( max-width: 700px ) {
		#detailContent #columns #about, #detailContent #columns #location { -webkit-flex: 100% 1 0; flex: 100% 1 0; }
		#detailContent #mainMapBox { margin: 0 25px 10px 25px; }
	}
	@@media ( max-width: 500px ) {
		.card.withImage .cardContent .cardImage { -webkit-flex: 50px 0 0; flex: 50px 0 0; }
	}
	/*iframe*/
	.frameworkIframe { width: 100%; }
</style>

<div id="detailContent" class="@data.TypeString">
	<div id="banner">
		<div id="bannerNames">
			<h1 id="name">@data.Source.Name</h1>
			@if ( data.Owner != null && data.Owner.Id > 0 )
			{
				<a id="owner" href="@Url.Content( "~/detail/organization/" + data.Owner.Id )">@data.Owner.Name</a>}
			<div id="entityType">@data.TypeSpecific</div>
			@if ( data.Credential.HasVerificationType_Badge )
			{
				<div class="badgeIssued">+ Badge Issued</div>}
		</div>
		<div id="bannerButtons">

			<button class="actionButton" onclick="compare.toggleCompareItem(@Model.Id, '@data.TypeString', '@data.Source.Name');"><i class="fa fa-fw fa-copy"></i> Compare</button>
			<button class="actionButton" id="widgetHomeButton" onclick="window.location = '\\';"><i class="fa fa-fw fa-search"></i> Back to Search</button>

			@if ( isUserSiteStaff )
			{
				if ( data.TypeString == "credential" || data.TypeString == "organization" || data.TypeString == "assessment" || data.TypeString == "learningopportunity" )
				{
					<button class="actionButton column" id="reimportButton" onclick="reimportEntity(@Model.Id, '@data.TypeString' , '@data.Ctid', '@data.CredentialRegistryId');"><i class="fa fa-upload"></i> Reimport</button>
					<button class="actionButton column" id="reindexButton" onclick="reindexEntity(@Model.Id, '@data.TypeString' , '@data.Ctid', '@data.CredentialRegistryId');"><i class="fa fa-redo"></i> Re-Index</button>

					<a class="actionButton column" style="margin-left:30px; text-decoration:none;" id="finderLink" href="@( credentialPublisherSite +  data.TypeString + "/" + data.Source.CTID )" target="publisherLink" title="view on Credential Publisher site"><i class="fas fa-external-link-alt" style="margin-right:3px;"></i> Publisher</a>
				}
			}
		</div>
	</div>
	<div id="columns">
		<div class="column" id="about">
			<h2 class="columnHeader">Basic Info</h2>
			@* Connect Link *@
			@RenderSection( "connectLink", "", new List<HelperResult>()
				{
					RenderExternalLinkButton( "Connect to this " + data.TypeTitle, data.Source.SubjectWebpage ),
				} )
			@* Basic Info *@
			@RenderSection( "basicInfo", "About this " + data.TypeTitle, new List<HelperResult>()
				{
					RenderIcon( data.IconUrl, "basicInfoImage" ),
					RenderText( "mainDescription description textBlock", "", data.Source.Description, true ),
					RenderText( "missionStatement textBlock", "Mission", data.Organization.MissionAndGoalsStatementDescription, true ),
					RenderExternalLinkButton( "Mission Statement", data.Organization.MissionAndGoalsStatement ),
					RenderText( "agentPurpose textBlock", "Purpose", data.Organization.AgentPurposeDescription, true ),
					RenderExternalLinkButton( "Purpose", data.Organization.AgentPurpose ),
				} )

			@RenderSection( "estimatedDuration", "Estimated Time to Earn", new List<HelperResult>() { RenderDurationProfileList( data.Credential.EstimatedDuration ) } )
			@RenderSection( "renewalFrequency", "Renewal Frequency", new List<HelperResult>() { RenderDurationItem( data.Credential.RenewalFrequency ) } )
			@RenderSection( "estimatedDuration", "Estimated Time to Complete", new List<HelperResult>() { RenderDurationProfileList( data.Assessment.EstimatedDuration ) } )
			@RenderSection( "estimatedDuration", "Estimated Time to Complete", new List<HelperResult>() { RenderDurationProfileList( data.LearningOpportunity.EstimatedDuration ) } )
			@RenderSection( "estimatedDuration", "Estimated Time to Complete Required Credentials", new List<HelperResult>() { RenderDurationProfileListWithNames( data.MergedRequirements.CredentialsSansSelf( data.Credential.Id ).ConvertAll( m => ( dynamic ) m ).ToList() ) } )
			@RenderSection( "estimatedDuration", "Estimated Time to Complete Required Learning Opportunities", new List<HelperResult>() { RenderDurationProfileListWithNames( data.MergedRequirements.LearningOpportunitiesSansSelf( data.LearningOpportunity.Id ).ConvertAll( m => ( dynamic ) m ).ToList() ) } )
			@RenderSection( "estimatedDuration", "Estimated Time to Complete Required Assessments", new List<HelperResult>() { RenderDurationProfileListWithNames( data.MergedRequirements.AssessmentsSansSelf( data.Assessment.Id ).ConvertAll( m => ( dynamic ) m ).ToList() ) } )

			@* Credential *@
			@*@RenderSection( "enumeration", "Credential Type", new List<HelperResult>() { RenderText( "credentialtype", "", data.Credential.CredentialTypeEnum ) } )*@
			@*Might be better to only show status if not active (eventually)*@
			@RenderSection( "enumeration", "Credential Status Type", new List<HelperResult>() { RenderEnumeration( "credentialStatusType", data.TypeString, "", data.Credential.CredentialStatusType, null, false ) } )
			@RenderSection( "enumeration", "Credential Type", new List<HelperResult>() { RenderEnumeration( "credentialType", data.TypeString, "", data.Credential.CredentialTypeEnum ) } )
			@RenderSection( "enumeration", "Alternate Name(s)", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.Credential.AlternateNames, false ) } )
			@RenderSection( "enumeration", "Assessment Delivery Type", new List<HelperResult>() { RenderEnumeration( "assessmentDeliveryTypes", data.TypeString, "", data.Credential.AssessmentDeliveryType, null, false ) } )
			@RenderSection( "enumeration", "Learning Delivery Type", new List<HelperResult>() { RenderEnumeration( "learningDeliveryTypes", data.TypeString, "", data.Credential.LearningDeliveryType, null, false ) } )
			@RenderSection( "enumeration", "Audience Levels", new List<HelperResult>() { RenderEnumeration( "audienceLevelType", data.TypeString, "", data.Credential.AudienceLevelType, null, false ) } )
			@RenderSection( "enumeration", "Audience Type(s)", new List<HelperResult>() { RenderEnumeration( "audienceType", data.TypeString, "", data.Credential.AudienceType, null, false ) } )
			@RenderSection( "enumeration", "Subjects", new List<HelperResult>() { RenderEnumeration( "subject", data.TypeString, "", null, data.Credential.Subject ) } )
			@RenderSection( "enumeration", "Occupations", new List<HelperResult>() { RenderEnumeration( "occupationType", data.TypeString, "", data.Credential.OccupationType ) } )
			@RenderSection( "enumeration", "Industries", new List<HelperResult>() { RenderEnumeration( "industryType", data.TypeString, "", data.Credential.IndustryType ) } )
			@RenderSection( "enumeration", "Instructional Programs", new List<HelperResult>() { RenderEnumeration( "cip", data.TypeString, "", data.Credential.InstructionalProgramType ) } )
			@RenderSection( "enumeration", "Keywords", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.Credential.Keyword ) } )

			@RenderSection( "enumeration", "Process", new List<HelperResult>() { RenderExternalLinkButton( "Process Data", data.Credential.ProcessStandards ), RenderText( "", "", data.Credential.ProcessStandardsDescription, true ) } )

			@* Organization *@
			@RenderSection( "enumeration", "Alternate Name(s)", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.Organization.AlternateNames, false ) } )
			@RenderSection( "enumeration", "Organization Type", new List<HelperResult>() { RenderEnumeration( "organizationType", data.TypeString, "", data.Organization.AgentType, null, false ) } )
			@RenderSection( "enumeration", "Sector", new List<HelperResult>() { RenderEnumeration( "agentSectorType", data.TypeString, "", data.Organization.AgentSectorType ) } )
			@RenderSection( "enumeration", "Services", new List<HelperResult>() { RenderEnumeration( "agentServiceType", data.TypeString, "", data.Organization.ServiceType ) } )
			@RenderSection( "enumeration", "Industries", new List<HelperResult>() { RenderEnumeration( "industryType", data.TypeString, "", data.Organization.IndustryType ) } )
			@RenderSection( "enumeration", "Keywords", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.Organization.Keyword ) } )

			@* Assessment *@
			@RenderSection( "enumeration", "Occupations", new List<HelperResult>() { RenderEnumeration( "occupationType", data.TypeString, "", data.Assessment.OccupationType ) } )
			@RenderSection( "enumeration", "Industries", new List<HelperResult>() { RenderEnumeration( "industryType", data.TypeString, "", data.Assessment.IndustryType ) } )
			@RenderSection( "enumeration", "Instructional Programs", new List<HelperResult>() { RenderEnumeration( "cip", data.TypeString, "", data.Assessment.InstructionalProgramType ) } )
			@RenderSection( "enumeration", "Methods", new List<HelperResult>() { RenderEnumeration( "assessmentMethodType", data.TypeString, "", data.Assessment.AssessmentMethodType, null, false ), RenderText( "assessmentOutput", "", data.Assessment.AssessmentOutput, true ) } )
			@RenderSection( "enumeration", "Delivery Type", new List<HelperResult>() { RenderEnumeration( "deliveryType", data.TypeString, "", data.Assessment.DeliveryType, null, false ), RenderText( "deliveryTypeDescription", "", data.Assessment.DeliveryTypeDescription, true ) } )
			@RenderSection( "enumeration", "Assessment Use", new List<HelperResult>() { RenderEnumeration( "assessmentUse", data.TypeString, "", data.Assessment.AssessmentUseType, null, false ) } )
			@RenderSection( "enumeration", "Audience Type(s)", new List<HelperResult>() { RenderEnumeration( "audienceType", data.TypeString, "", data.Assessment.AudienceType, null, false ) } )
			@RenderSection( "enumeration", "Subjects", new List<HelperResult>() { RenderEnumeration( "subject", data.TypeString, "", null, data.Assessment.Subject ) } )
			@RenderSection( "enumeration", "Keywords", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.Assessment.Keyword ) } )
			@RenderSection( "enumeration", "Scoring Method", new List<HelperResult>() { RenderEnumeration( "scoringMethodType", data.TypeString, "", data.Assessment.ScoringMethodType, null, false ), RenderText( "", "Scoring Method", data.Assessment.ScoringMethodDescription, true ), RenderText( "", "Scoring Method Example", data.Assessment.ScoringMethodExampleDescription, true ), RenderExternalLinkButton( "Scoring Method Data", data.Assessment.ScoringMethodExample ) } )
			@RenderSection( "enumeration", "Example", new List<HelperResult>() { RenderExternalLinkButton( "Example Data", data.Assessment.AssessmentExample ), RenderText( "", "", data.Assessment.AssessmentExampleDescription, true ) } )
			@RenderSection( "enumeration", "Credit", new List<HelperResult>()
				{
					RenderEnumeration( "creditUnitType", data.TypeString, "", data.Assessment.CreditUnitType, null, false ),
					RenderText( "", "Credit Unit Value", data.Assessment.CreditUnitValue.ToString(), false, -1, data.Assessment.CreditUnitValue > 0 ),
					RenderText( "", "Credit Unit Type Description", data.Assessment.CreditUnitTypeDescription ),
					RenderText( "", "Credit Hour Type", data.Assessment.CreditHourType ),
					RenderText( "", "Credit Hour Value", data.Assessment.CreditHourValue.ToString(), false, -1, data.Assessment.CreditHourValue > 0 ),
				} )
			@RenderSection( "enumeration", "Process", new List<HelperResult>() { RenderExternalLinkButton( "Process Data", data.Assessment.ProcessStandards ), RenderText( "", "", data.Assessment.ProcessStandardsDescription, true ) } )

			@* Learning Opportunity *@
			@RenderSection( "enumeration", "Occupations", new List<HelperResult>() { RenderEnumeration( "occupationType", data.TypeString, "", data.LearningOpportunity.OccupationType ) } )
			@RenderSection( "enumeration", "Industries", new List<HelperResult>() { RenderEnumeration( "industryType", data.TypeString, "", data.LearningOpportunity.IndustryType ) } )
			@RenderSection( "enumeration", "Instructional Programs", new List<HelperResult>() { RenderEnumeration( "cip", data.TypeString, "", data.LearningOpportunity.InstructionalProgramType ) } )
			@RenderSection( "enumeration", "Methods", new List<HelperResult>() { RenderEnumeration( "audienceLevelType", data.TypeString, "", data.LearningOpportunity.LearningMethodType, null, false ) } )
			@RenderSection( "enumeration", "Delivery Type", new List<HelperResult>() { RenderEnumeration("deliveryType", data.TypeString, "", data.LearningOpportunity.DeliveryType, null, false ), RenderText("deliveryTypeDescription", "",
			   data.LearningOpportunity.DeliveryTypeDescription, true) } )
			@RenderSection( "enumeration", "Audience Type(s)", new List<HelperResult>() { RenderEnumeration( "audienceType", data.TypeString, "", data.LearningOpportunity.AudienceType, null, false ) } )

			@RenderSection( "enumeration", "Subjects", new List<HelperResult>() { RenderEnumeration( "subject", data.TypeString, "", null, data.LearningOpportunity.Subject ) } )
			@RenderSection( "enumeration", "Keywords", new List<HelperResult>() { RenderEnumeration( "keyword", data.TypeString, "", null, data.LearningOpportunity.Keyword ) } )
			@RenderSection( "enumeration", "Credit", new List<HelperResult>()
				{
					RenderEnumeration( "creditUnitType", data.TypeString, "", data.LearningOpportunity.CreditUnitType, null, false  ),
					RenderText( "", "Credit Unit Value", data.LearningOpportunity.CreditUnitValue.ToString(), false, -1, data.LearningOpportunity.CreditUnitValue > 0 ),
					RenderText( "", "Credit Unit Type Description", data.LearningOpportunity.CreditUnitTypeDescription ),
					RenderText( "", "Credit Hour Type", data.LearningOpportunity.CreditHourType ),
					RenderText( "", "Credit Hour Value", data.LearningOpportunity.CreditHourValue.ToString(), false, -1, data.LearningOpportunity.CreditHourValue > 0 ),
				} )

			@* Other Basic Info *@
			@RenderSection( "otherBasicInfo", "Additional Information", new List<HelperResult>()
					{
						//RenderText( "inLanguage", "In Language", data.Credential.InLanguage + " (" + data.Credential.InLanguageCode + ")", false, -1, !string.IsNullOrWhiteSpace( data.Credential.InLanguageCode ) ),
						RenderText( "inLanguageList", "In Language", string.Join( ", ", data.Credential.InLanguageCodeList.Select(x=> x.TextValue)) ),
						//RenderText( "alternateName", "Alternate Name", string.Join(", ", data.Credential.AlternateName )),

						RenderText( "version", "Version", data.Credential.VersionIdentifier ),
						RenderText( "identificationCode", "Identification Code", data.Credential.CredentialId ),
						RenderText( "notationCode", "Notation Code", data.Credential.CodedNotation ),
						RenderText( "dateEffective", "Date Effective", data.Credential.DateEffective ),
						RenderEnumeration( "degreeConcentration", "credential", "Degree Concentration", null, data.Credential.DegreeConcentration ),
						RenderEnumeration( "degreeMajor", "credential", "Degree Major", null, data.Credential.DegreeMajor ),
						RenderEnumeration( "degreeMinor", "credential", "Degree Minor", null, data.Credential.DegreeMinor ),

						RenderText( "foundingDate", "Founding Date", data.Organization.FoundingDate ),
						RenderText( "dateEffective", "Date Effective", data.Organization.DateEffective ),
						//RenderText( "versioningInformation", "Versioning Information", data.Organization.Versioning ),
						RenderText( "identifier fein", "FEIN", data.Organization.ID_FEIN ),
						RenderText( "identifier duns", "DUNS", data.Organization.ID_DUNS ),
						RenderText( "identifier opeid", "OPE ID (FAFSA)", data.Organization.ID_OPEID ),
						RenderText( "identifier ipeds", "IPEDS ID", data.Organization.ID_IPEDSID ),
						//RenderText( "identifier AlternativeIdentifier", "Alternative Identifier", data.Organization.AlternativeIdentifier ),
						RenderEnumeration("identifier AlternativeIdentifier", "organization", "Alternative Identifier", null, data.Organization.ID_AlternativeIdentifier.ConvertAll(m => new TextValueProfile() { TextTitle = m.IdentifierType, TextValue = m.IdentifierValueCode })),
						//RenderText( "inLanguage", "In Language", data.Assessment.InLanguage + " (" + data.Assessment.InLanguageCode + ")", false, -1, !string.IsNullOrWhiteSpace( data.Assessment.InLanguageCode ) ),
						RenderText( "inLanguageList", "In Language", string.Join( ", ", data.Assessment.InLanguageCodeList.Select(x=> x.TextValue)) ),
						RenderText( "codedNotation", "Notation Code", data.Assessment.CodedNotation ),
						RenderText( "isProctored", "Proctored?", data.Assessment.IsProctored == null ? "" : (bool)data.Assessment.IsProctored ? "This assessment is proctored." : "This assessment is not proctored.", false, -1, data.Assessment.Id > 0 ),
						RenderText( "hasGroupEvaluation", "Group Evaluation?", data.Assessment.HasGroupEvaluation == null ? "" : (bool)data.Assessment.HasGroupEvaluation ? "This assessment involves group evaluation." : "This assessment does not involve group evaluation.", false, -1, data.Assessment.Id > 0 ),
						RenderText( "hasGroupParticipation", "Group Participation?", data.Assessment.HasGroupParticipation == null ? "" : (bool)data.Assessment.HasGroupParticipation ? "This assessment involves group participation." : "This assessment does not involve group participation.", false, -1, data.Assessment.Id > 0 ),
						RenderText( "verificationMethodDescription", "Verification Method", data.Assessment.VerificationMethodDescription ),
						RenderText( "dateEffective", "Date Effective", data.Assessment.DateEffective ),
						RenderExternalLinkButton( "External Research", data.Assessment.ExternalResearch ),

						//RenderText( "inLanguage", "In Language", data.LearningOpportunity.InLanguage + " (" + data.LearningOpportunity.InLanguageCode + ")", false, -1, !string.IsNullOrWhiteSpace( data.LearningOpportunity.InLanguageCode ) ),
						RenderText( "inLanguageList", "In Language", string.Join( ", ", data.LearningOpportunity.InLanguageCodeList.Select(x=> x.TextValue)) ),
						RenderText( "codedNotation", "Notation Code", data.LearningOpportunity.CodedNotation ),
						RenderText( "verificationMethodDescription", "Verification Method", data.LearningOpportunity.VerificationMethodDescription ),
						RenderText( "dateEffective", "Date Effective", data.LearningOpportunity.DateEffective ),
					}
																																					   .Concat( data.Organization.ID_AlternativeIdentifier.ConvertAll( m => RenderText( "identifier alternative", m.IdentifierType, m.IdentifierValueCode ) ) ).ToList()
																																				   )
		</div><!-- /column about -->

		<div class="column" id="location">
			<h2 class="columnHeader">Location Info</h2>
			@RenderSection( "locationLinks", "", new List<HelperResult>()
				{
					RenderExternalLinkButton( "Available Online", data.Credential.AvailableOnlineAt ),
					RenderExternalLinkButton( "Available Online", data.Assessment.AvailableOnlineAt ),
					RenderExternalLinkButton( "Available Online", data.LearningOpportunity.AvailableOnlineAt ),
					RenderExternalLinkButton( "Location Listing", data.Source.AvailabilityListing ),
				} )
			@if ( mapData.HasMap )
			{
				<div class="section">
					<div id="mainMapBox"></div>
					<script src="https://maps.googleapis.com/maps/api/js?key=@mapData.MapKey&callback=setupMap" async defer></script>
				</div>
				<div class="section" id="mapData">
					@RenderAddressList( mapData.Addresses, true )
				</div>}
			@RenderSection( "contactInfo", "Contact", new List<HelperResult>()
				{
					RenderContactPointList( data.Organization.ContactPoint ),
				} )
			@RenderSection( "jurisdiction", "Jurisdiction", new List<HelperResult>()
				{
					RenderJurisdictionList( "Applicable Jurisdictions", data.Credential.Jurisdiction, "This credential can be used in:", "This credential cannot be used in:" ),
					RenderJurisdictionList( "Jurisdictions", data.Organization.Jurisdiction, "This organization has a notable presence in:", "This organization does not operate in:" ),
					RenderJurisdictionList( "Applicable Jurisdictions", data.Assessment.Jurisdiction, "This assessment is acknowledged in:", "This assessment is not acknowledged in:" ),
					RenderJurisdictionList( "Applicable Jurisdictions", data.LearningOpportunity.Jurisdiction, "This learning opportunity is acknowledged in:", "This learning opportunity is not acknowledged in:" ),
				} )
			@* Owner *@
			@RenderSection( "owner", "Owned By", data.Roles.Owner.ConvertAll( m => RenderOrganizationCard( m ) ).ToList() )
			@* Related Orgs - should be non-owner, non-QA only *@
			@RenderSection( "roles", "Related Organizations", data.Roles.NonQA.ConvertAll( m => RenderOrganizationCard( m ) ).ToList() )
			@RenderSection( "copyrightHolder", "Copyright Holder", new List<HelperResult>() { RenderOrganizationCard( data.Credential.CopyrightHolderOrganization, new Enumeration() { Items = new List<EnumeratedItem>() { new EnumeratedItem() { SchemaName = "ceterms:copyrightHolder", Name = "Copyright Holder" } } } ) } )

		</div><!-- /column location -->

		<div class="column" id="details">
			<h2 class="columnHeader">More Info</h2>
			@RenderSection( "competencies", "Competencies", new List<HelperResult>()
{
RenderOverlayWindow( "requiresCompetencies", "Requires {#} Competenc{ies}", data.AllCompetencies.Requires.Count(), RenderCompetencyFrameworkViewer( data.AllCompetencies.RequiresByFramework, CompetencyTypes.REQUIRES ) ),
//RenderOverlayWindow( "assessesCompetencies", "Assesses {#} Competenc{ies}", data.AllCompetencies.Assesses.Count(), RenderCompetencyFrameworkList( data.AllCompetencies.AssessesByFramework, CompetencyTypes.ASSESSES ) ),
RenderOverlayWindow("assessesCompetencies", "Assesses {#} Competenc{ies}", data.AllCompetencies.Assesses.Count(), RenderCompetencyFrameworkViewer( data.AllCompetencies.AssessesByFramework, CompetencyTypes.ASSESSES ) ),
RenderOverlayWindow( "teachesCompetencies", "Teaches {#} Competenc{ies}", data.AllCompetencies.Teaches.Count(), RenderCompetencyFrameworkViewer( data.AllCompetencies.TeachesByFramework, CompetencyTypes.TEACHES ) ),
} )
			@RenderSection( "connections", "Connections", new List<HelperResult>()
			{
			RenderLinkWindowCred(@data.Source.Name, data.Organization.Id, "Owns/Offers {#} Credential{s}", "credential", data.Organization.TotalCredentials, data.Organization.CreatedCredentials.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct().ToList() ),
		   //RenderOverlayWindow( "ownsCredentials", "Owns/Offers {#} Credential{s}", data.Organization.CreatedCredentials.Count(), RenderCredentialCardList( data.Organization.CreatedCredentials ) ),
			RenderLinkWindowAsmnt(@data.Source.Name, data.Organization.Id, "Owns {#} Assessment{s}", "assessment", data.Organization.TotalAssessments, data.Organization.OwnedAssessments.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct().ToList() ),
		   //RenderOverlayWindow( "ownsAssessments", "Owns {#} Assessment{s}", data.Organization.OwnedAssessments.Count(), RenderAssessmentCardList( data.Organization.OwnedAssessments ) ),
			//RenderOverlayWindow( "ownsLopps", "Owns {#} Learning Opportunities{s}", data.Organization.OwnedLearningOpportunities.Count(), RenderLearningOpportunityCardList( data.Organization.OwnedLearningOpportunities ) ),
			RenderLinkWindowLopp(@data.Source.Name, data.Organization.Id, "Owns {#} Learning Opportunit{ies}", "learningopportunity", data.Organization.TotalLopps, data.Organization.OwnedLearningOpportunities.SelectMany( x => x.OwnerRoles.Items ).Select(x=> x.Id).Distinct().ToList() ),


			RenderOverlayWindow( "hasPart", "Included Credential{s}", data.Credential.EmbeddedCredentials.Count(), RenderCredentialCardList( data.Credential.EmbeddedCredentials ) ),
			RenderOverlayWindow( "isPartOf", "Included With {#} Credential{s}", data.Credential.IsPartOf.Where( m => m != null && m.Id > 0 ).Count(), RenderCredentialCardList( data.Credential.IsPartOf ) ),
			RenderOverlayWindow( "hasPart", "Included Learning Opportunit{ies}", data.LearningOpportunity.HasPart.Count(), RenderLearningOpportunityCardList( data.LearningOpportunity.HasPart ) ),
			RenderOverlayWindow( "isPartOf", "Included With {#} Learning Opportunit{ies}", data.LearningOpportunity.IsPartOf.Count(), RenderLearningOpportunityCardList( data.LearningOpportunity.IsPartOf ) ),

			RenderOverlayWindow( "entryConditionCredentials", "{#} Entry Condition Credential{s}", data.Connections.EntryCondition.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.EntryCondition, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "entryConditionAssessments", "{#} Entry Condition Assessment{s}", data.Connections.EntryCondition.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.EntryCondition, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "entryConditionLearningOpportunities", "{#} Entry Condition Learning Opportunit{ies}", data.Connections.EntryCondition.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.EntryCondition, data.TypeString, false, false, true ) ),

			RenderOverlayWindow( "isTargetForCredentials", "Part of {#} Credential{s}", data.Assessment.IsPartOfCredential.Count(), RenderCredentialCardList( data.Assessment.IsPartOfCredential) ),
			RenderOverlayWindow( "isTargetForCredentials", "Part of {#} Credential{s}",
			data.LearningOpportunity.IsPartOfCredential.Count(), RenderCredentialCardList( data.LearningOpportunity.IsPartOfCredential) ),

			RenderOverlayWindow( "requiredForCredentials", "Required For {#} Credential{s}", data.Connections.IsRequiredFor.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.IsRequiredFor, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "recommendedForCredentials", "Recommended For {#} Credential{s}", data.Connections.IsRecommendedFor.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.IsRecommendedFor, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "advancedStandingForCredentials", "Advanced Standing For {#} Credential{s}", data.Connections.IsAdvancedStandingFor.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.IsAdvancedStandingFor, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "preparationForCredentials", "Preparation For {#} Credential{s}", data.Connections.IsPreparationFor.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.IsPreparationFor, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "advancedStandingFromCredentials", "Advanced Standing From {#} Credential{s}", data.Connections.AdvancedStandingFrom.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.AdvancedStandingFrom, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "preparationFromCredentials", "Preparation From {#} Credential{s}", data.Connections.PreparationFrom.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.PreparationFrom, data.TypeString, true, false, false ) ),

			RenderOverlayWindow( "requiredForAssessments", "Required For {#} Assessment{s}", data.Connections.IsRequiredFor.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.IsRequiredFor, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "recommendedForAssessments", "Recommended For {#} Assessment{s}", data.Connections.IsRecommendedFor.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.IsRecommendedFor, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "advancedStandingForAssessments", "Advanced Standing For {#} Assessment{s}", data.Connections.IsAdvancedStandingFor.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.IsAdvancedStandingFor, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "preparationForAssessments", "Preparation For {#} Assessment{s}", data.Connections.IsPreparationFor.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.IsPreparationFor, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "advancedStandingFromAssessments", "Advanced Standing From {#} Assessment{s}", data.Connections.AdvancedStandingFrom.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.AdvancedStandingFrom, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "preparationFromAssessments", "Preparation From {#} Assessment{s}", data.Connections.PreparationFrom.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.PreparationFrom, data.TypeString, false, true, false ) ),

			RenderOverlayWindow( "requiredForLearningOpportunities", "Required For {#} Learning Opportunit{ies}", data.Connections.IsRequiredFor.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.IsRequiredFor, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "recommendedForLearningOpportunities", "Recommended For {#} Learning Opportunit{ies}", data.Connections.IsRecommendedFor.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.IsRecommendedFor, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "advancedStandingForLearningOpportunities", "Advanced Standing For {#} Learning Opportunit{ies}", data.Connections.IsAdvancedStandingFor.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.IsAdvancedStandingFor, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "preparationForLearningOpportunities", "Preparation For {#} Learning Opportunit{ies}", data.Connections.IsPreparationFor.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.IsPreparationFor, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "advancedStandingFromLearningOpportunities", "Advanced Standing From {#} Learning Opportunit{ies}", data.Connections.AdvancedStandingFrom.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.AdvancedStandingFrom, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "preparationFromLearningOpportunities", "Preparation From {#} Learning Opportunit{ies}", data.Connections.PreparationFrom.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.PreparationFrom, data.TypeString, false, false, true ) ),

			RenderOverlayWindow( "hasCommonConditions", "Has {#} Common Condition{s}", data.Credential.CommonConditions.Count(), RenderConditionManifestList( ConditionManifestExpanded.ExpandConditionManifestList( data.Credential.CommonConditions ) ) ),

			RenderOverlayWindow( "hasConditionManifest", "Has {#} Condition Manifest{s}", data.Organization.HasConditionManifest.Count(), RenderConditionManifestList( ConditionManifestExpanded.ExpandConditionManifestList( data.Organization.HasConditionManifest ) ) ),
			RenderOverlayWindow( "hasCostManifest", "Has {#} Cost Manifest{s}", data.Organization.HasCostManifest.Count(), RenderCostManifestList( data.Organization.HasCostManifest ) ),
			} )


			@RenderSection( "qualityAssurance", "Quality Assurance", new List<HelperResult>()
			{
			RenderOverlayWindow( "qualityAssuranceMerged", "Quality Assurance", data.Roles.QAMerged.Count(), RenderOrganizationCardList( data.Roles.QAMerged, "" ) ),

			RenderOverlayWindow( "qualityAssuranceOwner", "Owner's Quality Assurance", data.Roles.QAFromOwner.SelectMany( m => m.AgentRole.Items ).Count(), RenderOrganizationCardList( data.Roles.QAFromOwner ) ),
			//RenderOverlayWindow( "qualityAssuranceDirect", "Quality Assurance Received", data.Roles.QADirect.SelectMany( m => m.AgentRole.Items ).Count(), RenderOrganizationCardList( data.Roles.QADirect ) ),
			//18-08-28 mp: previously commented out (2/13/2018), reactivated per CE team request
			//RenderOverlayWindow( "qualityAssurancePerformed", "Quality Assurance Performed", data.RolesPerformed.QADirectActualCount, RenderTargetCardList( data.RolesPerformed.QADirect, "The results are sorted by target type (credential, organization, etc.), organization name, and artifact name." ),"", data.RolesPerformed.QADirectActualCount ),
			//changed to four big buttons as on 18-02-2019 
			RenderQALinkWindowCred(@data.Source.Name, data.Organization.Id, "Quality Assurance Performed on Credential{s}", "credential", data.Organization.QAPerformedOnCredentialsCount, data.Organization.QAPerformedOnCredentialsCount),
			RenderQALinkWindowCred(@data.Source.Name, data.Organization.Id, "Quality Assurance Performed on Organization{s}", "organization", data.Organization.QAPerformedOnOrganizationsCount, data.Organization.QAPerformedOnOrganizationsCount),
			RenderQALinkWindowCred(@data.Source.Name, data.Organization.Id, "Quality Assurance Performed on Assessment{s}", "assessment", data.Organization.QAPerformedOnAssessmentsCount, data.Organization.QAPerformedOnAssessmentsCount),
			RenderQALinkWindowCred(@data.Source.Name, data.Organization.Id, "Quality Assurance Performed on Learning Opportunit{ies}", "learningopportunity", data.Organization.QAPerformedOnLoppsCount, data.Organization.QAPerformedOnLoppsCount),
			} )


			@RenderSection( "fullRequiresRecommends", "Requirements and Recommendations", new List<HelperResult>()
			{
			RenderOverlayWindow( "requiresCredentialConditions", "Requires {#} Credential{s}", data.Connections.Requires.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.Requires, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "requiresAssessmentConditions", "Requires {#} Assessment{s}", data.Connections.Requires.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.Requires, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "requiresLearningOpportunityConditions", "Requires {#} Learning Opportunit{ies}", data.Connections.Requires.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.Requires, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "requiresOtherConditions", ( ( data.Connections.Requires.SelectMany( m => m.TargetCredential ).Count() == 0 && data.Connections.Requires.SelectMany( m => m.TargetAssessment ).Count() == 0 && data.Connections.Requires.SelectMany( m => m.TargetLearningOpportunity ).Count() == 0 ) ? "" : "Additional ") + "Requirements", data.Connections.Requires.Where( m => m.TargetCredential.Count() == 0 && m.TargetAssessment.Count() == 0 && m.TargetLearningOpportunity.Count() == 0 && m.IsWorthDisplaying == true ).Count(), RenderFullConditionProfileList( data.Connections.Requires, data.TypeString, false, false, false, true ) ),

			RenderOverlayWindow( "corequisiteCredentialConditions", "Corequisite with {#} Credential{s}", data.Connections.Corequisite.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.Corequisite, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "corequisiteAssessmentConditions", "Corequisite with {#} Assessment{s}", data.Connections.Corequisite.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.Corequisite, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "corequisiteLearningOpportunityConditions", "Corequisite with {#} Learning Opportunit{ies}", data.Connections.Corequisite.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.Corequisite, data.TypeString, false, false, true ) ),

			RenderOverlayWindow( "recommendsCredentialConditions", "Recommends {#} Credential{s}", data.Connections.Recommends.SelectMany( m => m.TargetCredential ).Count(), RenderFullConditionProfileList( data.Connections.Recommends, data.TypeString, true, false, false ) ),
			RenderOverlayWindow( "recommendsAssessmentConditions", "Recommends {#} Assessment{s}", data.Connections.Recommends.SelectMany( m => m.TargetAssessment ).Count(), RenderFullConditionProfileList( data.Connections.Recommends, data.TypeString, false, true, false ) ),
			RenderOverlayWindow( "recommendsLearningOpportunityConditions", "Recommends {#} Learning Opportunit{ies}", data.Connections.Recommends.SelectMany( m => m.TargetLearningOpportunity ).Count(), RenderFullConditionProfileList( data.Connections.Recommends, data.TypeString, false, false, true ) ),
			RenderOverlayWindow( "recommendsOtherConditions", "Other Recommendations", data.Connections.Recommends.Where( m => m.TargetCredential.Count() == 0 && m.TargetAssessment.Count() == 0 && m.TargetLearningOpportunity.Count() == 0 && m.IsWorthDisplaying == true ).Count(), RenderFullConditionProfileList( data.Connections.Recommends, data.TypeString, false, false, false, true ) ),

			RenderOverlayWindow( "otherEntryConditions", "Other Entry Conditions", data.Connections.EntryCondition.Where( m => m.TargetCredential.Count() == 0 && m.TargetAssessment.Count() == 0 && m.TargetLearningOpportunity.Count() == 0 && m.IsWorthDisplaying == true ).Count(), RenderFullConditionProfileList( data.Connections.EntryCondition, data.TypeString, false, false, false, true ) ),

			RenderOverlayWindow( "renewalCredentialConditions", "{#} Renewal Requirement{s}", data.Credential.Renewal.Count(), RenderFullConditionProfileList(data.Credential.Renewal, "credential", true, true, true, true, true ) )
			} )
			@RenderSection( "assertions", "Jurisdiction Assertions", new List<HelperResult>()
{
RenderOverlayWindow( "jurisdictionAssertions", "Jurisdiction Assertion{s}", data.Credential.JurisdictionAssertions.Select(m => m.JurisdictionAssertion.Items ).Count(), RenderJurisdictionAssertionList( "Jurisdiction Assertions", data.Credential.JurisdictionAssertions, "This credential has these assertions in:", "This credential does not have these assertions in:" ) ),
RenderOverlayWindow( "jurisdictionAssertions", "Jurisdiction Assertion{s}", data.Organization.JurisdictionAssertions.Select(m => m.JurisdictionAssertion.Items ).Count(), RenderJurisdictionAssertionList( "Jurisdiction Assertions", data.Organization.JurisdictionAssertions, "This organization has these assertions in:", "This organization does not have these assertions in:" ) ),
RenderOverlayWindow( "jurisdictionAssertions", "Jurisdiction Assertion{s}", data.Assessment.JurisdictionAssertions.Select(m => m.JurisdictionAssertion.Items ).Count(), RenderJurisdictionAssertionList( "Jurisdiction Assertions", data.Assessment.JurisdictionAssertions, "This assessment has these assertions in:", "This assessment does not have these assertions in:" ) ),
RenderOverlayWindow( "jurisdictionAssertions", "Jurisdiction Assertion{s}", data.LearningOpportunity.JurisdictionAssertions.Select(m => m.JurisdictionAssertion.Items ).Count(), RenderJurisdictionAssertionList( "Jurisdiction Assertions", data.LearningOpportunity.JurisdictionAssertions, "This learning opportunity has these assertions in:", "This learning opportunity does not have these assertions in:" ) ),
} )
			@RenderSection( "costs", "Estimated Costs", new List<HelperResult>()
{
//RenderOverlayWindow( "hasCommonCost", "Common Cost{s}", data.DirectCostManifests.Count(), RenderCostManifestList( data.DirectCostManifests ) ),
//RenderOverlayWindow("costDirectAndManifest", "Direct Estimated Cost{s}", data.DirectAndManifestCosts.Count(), RenderCostProfileList( data.DirectAndManifestCosts ) ),

//HIDE FOR HOW - GET DUPLICATES WHEN NO COST ITEMS 		RenderOverlayWindow( "costDirectAndManifestDetailsOnly", "Cost Information", data.DirectAndManifestCosts.SelectMany( m => m.Items).Count() == 0 ? data.DirectAndManifestCosts.Count() : 0, RenderCostProfileList( data.DirectAndManifestCosts ) ),
//RenderOverlayWindow( "costAssessments", "Assessment Cost{s}", data.MergedRequirements.AssessmentsSansSelf( data.Assessment.Id ).SelectMany( m => m.EstimatedCost ).SelectMany( m => m.Items ).Count(), RenderCostProfileList( data.MergedRequirements.AssessmentsSansSelf( data.Assessment.Id ).SelectMany( m => m.EstimatedCost ).ToList() ) ),
// RenderOverlayWindow( "costLearningOpportunities", "Learning Opportunity Cost{s}", data.MergedRequirements.LearningOpportunitiesSansSelf( data.LearningOpportunity.Id ).SelectMany( m => m.EstimatedCost ).SelectMany( m => m.Items ).Count(), RenderCostProfileList( data.MergedRequirements.LearningOpportunitiesSansSelf( data.LearningOpportunity.Id ).SelectMany( m => m.EstimatedCost ).ToList() ) ), costDirectAndManifest

RenderOverlayWindow( "costDirectAndManifest", "Cost{s}", data.DirectCostManifests.Count() + data.DirectAndManifestCosts.Count(), RenderCosts( data ) ),
RenderOverlayWindow( "costCredentials", "Embedded Credential Estimated Cost{s}", data.MergedRequirements.CredentialsSansSelf( data.Credential.Id ).SelectMany( m => m.EstimatedCost ).SelectMany( m => m.Items ).Count(), RenderCostProfileList( data.MergedRequirements.CredentialsSansSelf( data.Credential.Id ).SelectMany( m => m.EstimatedCost ).ToList() ) ),

RenderOverlayWindow( "costAssessments", "Assessment Cost{s}", data.Connections.Requires.SelectMany( x => x.TargetAssessment.Where( y => y.EstimatedCost.Count() + y.CommonCosts.Count() > 0 ) ).Count(), RenderTargetAssessment ( data.Connections.Requires.SelectMany(x=> x.TargetAssessment).ToList() ) ),

RenderOverlayWindow( "costLearningOpportunities", "Learning Opportunity Cost{s}", data.Connections.Requires.SelectMany(x => x.TargetLearningOpportunity.Where( y => y.EstimatedCost.Count() + y.CommonCosts.Count() > 0 ) ).Count(), RenderTargetLearningOpportunity( data.Connections.Requires.SelectMany(x=> x.TargetLearningOpportunity).ToList() ) ),

// RenderOverlayWindow( "costLearningOpportunities", "Learning Opportunity Cost{s}", data.Connections.Requires.SelectMany( m => m.TargetLearningOpportunity ).Count() , RenderTargetLearningOpportunity( data.Connections.Requires.SelectMany( m => m.TargetLearningOpportunity ).ToList() ) ),
RenderOverlayWindow( "costIncludedLearningOpportunities", "Related Learning Opportunity Cost{s}", data.LearningOpportunity.HasPart.SelectMany(m=> m.CommonCosts).Count() + data.LearningOpportunity.HasPart.SelectMany(x=> x.EstimatedCost).Count(), RenderTargetLearningOpportunity( data.LearningOpportunity.HasPart.ToList() ) ),

RenderOverlayWindow( "financialAssistance", "Financial Assistance", data.Credential.FinancialAssistance.Count(), RenderFinancialAssistanceList( data.Credential.FinancialAssistance ) ),
RenderOverlayWindow( "financialAssistance", "Financial Assistance", data.Assessment.FinancialAssistance.Count(), RenderFinancialAssistanceList( data.Assessment.FinancialAssistance ) ),
RenderOverlayWindow( "financialAssistance", "Financial Assistance", data.LearningOpportunity.FinancialAssistance.Count(), RenderFinancialAssistanceList( data.LearningOpportunity.FinancialAssistance ) ),
} )
			@RenderSection( "details", "Details", new List<HelperResult>() {
RenderOverlayWindow( "revocation", "Revocation Term{s}", data.Credential.Revocation.Count(), RenderRevocationProfileList( data.Credential.Revocation ) ),
//I think we do not have Credential and Agent Process any more
RenderOverlayWindow( "credentialProcess", "Process{es}", data.Credential.CredentialProcess.Count(), RenderProcessProfileList( data.Credential.CredentialProcess ) ),
RenderOverlayWindow( "agentProcess", "Agent Process{es}", data.Organization.AgentProcess.Count(), RenderProcessProfileList( data.Organization.AgentProcess ) ),

RenderOverlayWindow( "appealProcess", "Appeal Process{es}", data.Organization.AppealProcess.Count(), RenderProcessProfileList( data.Organization.AppealProcess ) ),
RenderOverlayWindow( "complaintProcess", "Complaint Process{es}", data.Organization.ComplaintProcess.Count(), RenderProcessProfileList( data.Organization.ComplaintProcess ) ),

RenderOverlayWindow( "reviewProcess", "Review Process{es}", data.Organization.ReviewProcess.Count(), RenderProcessProfileList( data.Organization.ReviewProcess ) ),
RenderOverlayWindow( "revocationProcess", "Revocation Process{es}", data.Organization.RevocationProcess.Count(), RenderProcessProfileList( data.Organization.RevocationProcess ) ),
RenderOverlayWindow( "developmentProcess", "Development Process{es}", data.Organization.DevelopmentProcess.Count(), RenderProcessProfileList( data.Organization.DevelopmentProcess ) ),
RenderOverlayWindow( "administrationProcess", "Administration Process{es}", data.Organization.AdministrationProcess.Count(), RenderProcessProfileList( data.Organization.AdministrationProcess ) ),
RenderOverlayWindow( "maintenanceProcess", "Maintenance Process{es}", data.Organization.MaintenanceProcess.Count(), RenderProcessProfileList( data.Organization.MaintenanceProcess ) ),
RenderOverlayWindow( "verification", "Verification Service{s}", data.Organization.VerificationServiceProfiles.Count(), RenderVerificationServiceList( data.Organization.VerificationServiceProfiles ) ),
RenderOverlayWindow( "developmentProcess", "Development Process{es}", data.Assessment.DevelopmentProcess.Count(), RenderProcessProfileList( data.Assessment.DevelopmentProcess ) ),
RenderOverlayWindow( "administrationProcess", "Administration Process{es}", data.Assessment.AdministrationProcess.Count(), RenderProcessProfileList( data.Assessment.AdministrationProcess ) ),
RenderOverlayWindow( "maintenanceProcess", "Maintenance Process{es}", data.Assessment.MaintenanceProcess.Count(), RenderProcessProfileList( data.Assessment.MaintenanceProcess ) ),

} )
			@if ( true || Request.Params[ "showregistryinfo" ] == "true" ) /* Re-added on Stuart's request */
			{
				@RenderSection( "registryInfo", "", new List<HelperResult>() {
RenderOverlayWindow( "registryData", "Registry Info", 1, RenderRegistryData( data.RawMetadataImport ) )
} )
			}
			@if ( FrameworkPayloads != null && FrameworkPayloads.Count > 0 )
			{
				int cntr = 0;
				foreach ( KeyValuePair<string, RegistryImport> item in FrameworkPayloads )
				{
					cntr++;
					@RenderSection( string.Format( "FrameworkSection_{0}", cntr ), "", new List<HelperResult>() {
RenderOverlayWindow( string.Format("FrameworkData_{0}",cntr), item.Key, 1, RenderRegistryData( workIT.Factories.ImportManager.GetByCtid( item.Value.Ctid ) ) )
} )
				}
			}
		</div><!-- /column details -->
	</div>
	<div class="pull-right">
		@if ( FrameworkPayloads != null && FrameworkPayloads.Count > 0 )
		{
			int cntr = 0;
			foreach ( KeyValuePair<string, RegistryImport> item in FrameworkPayloads )
			{
				cntr++;
				@*@RenderSection( string.Format( "FrameworkSection_{0}", cntr ), "", new List<HelperResult>() {
					RenderOverlayWindow( string.Format("FrameworkData_{0}",cntr), item.Key, 1, RenderRegistryCompetencyData( item.Value ) )} )*@
				<div class="registryButtonBox">
					<button class="jsonLDButton" data-target="@string.Format("FrameworkData_{0}",cntr)" title="Competency Framework" style=" display:inline-block"><img src="@Url.Content( "~/images/icons/icon_jsonld.png" )" /></button>
					<span>@(item.Key.Length > 65 ? item.Key.Substring( 0, 64 ) + "..." : item.Key)</span>
				</div>
			}
		}
		<div class="registryButtonBox">
			<button class="jsonLDButton" data-target="registryData"><img src="@Url.Content( "~/images/icons/icon_jsonld.png" )" /></button>
			<span>@data.TypeTitle</span>
		</div>
	</div>
</div>

@Html.Partial( "~/Views/Compare/_CompareBar.cshtml", "" )
<div id="waitWrapper">
	<div id="wait">
		<i id="waitSpinner" class="fa fa-spin fa-spinner"></i>
		<div id="waitTitle">Working...</div>
	</div>
</div>
