@* 
Include this view once and use divs formatted as shown below for each competency framework you want to render. The script should do the rest.
<div class="competencyFramework" data-rendered="false" data-ctid="ce-your-framework's-ctid-here"></div>
*@
@{ 

}
<script type="text/javascript">
	var CompetencyFrameworks = {};
	$(document).ready(function () {
		CompetencyFrameworks.setupFrameworks();
		CompetencyFrameworks.loadAllFrameworks();
	});
	//

	CompetencyFrameworks.setupFrameworks = function () {
		//Default templates
		CompetencyFrameworks.FrameworkTemplate = $("#template_CompetencyFramework").html();
		CompetencyFrameworks.CompetencyTemplate = $("#template_Competency").html();
		CompetencyFrameworks.ConceptTemplate = $("#template_Concept").html();
		CompetencyFrameworks.Frameworks = [];
		CompetencyFrameworks.ConceptSchemes = [];
		CompetencyFrameworks.ConceptSchemeProperties = ["ceasn:complexityLevel", "ceasn:conceptTerm"]; //Consider replacing this with a call to the @@context


		$(".competencyFramework[data-rendered='false']").each(function () {
			CompetencyFrameworks.initializeFramework($(this));
		});
	}
	//

	CompetencyFrameworks.initializeFramework = function (box, ctid, uri) {
		var Framework = {};
		Framework.Box = box;
		Framework.CTID = ctid || Framework.Box.attr("data-ctid") || "";
		Framework.URI = uri || Framework.Box.attr("data-uri") || "";
		Framework.Loading = true;
		Framework.LoadError = false;
		Framework.Data = {};
		Framework.RenderedCompetencies = [];

		CompetencyFrameworks.Frameworks.push(Framework);
		return Framework;
	}
	//

	CompetencyFrameworks.loadAllFrameworks = function () {
		//Get data
		CompetencyFrameworks.Frameworks.forEach(function (Framework) {
			CompetencyFrameworks.getFrameworkData(Framework, function (Framework) {
				CompetencyFrameworks.renderFramework(Framework, Framework.Box, CompetencyFrameworks.FrameworkTemplate);
			});
		});

		CompetencyFrameworks.getConceptSchemes(function () {
			CompetencyFrameworks.renderConceptSchemes();
		});
	}
	//

	CompetencyFrameworks.getRegistryData = function (ctid, uri, success) {
		$.ajax({
			url: "@Url.Content("~/detail/GetRegistryData?ctid=")" + ctid + "&uri=" + encodeURIComponent(uri),
			method: "GET"
		}).always(function (message) {
			success(message);
		});
	}
	//

	CompetencyFrameworks.getFrameworkData = function (Framework, onload) {
		CompetencyFrameworks.getRegistryData(Framework.CTID, Framework.URI, function (message) {
			try {
				var data = JSON.parse(message);
				console.log("Loaded framework for CTID " + Framework.CTID + ": ", data);

				if (data.errors) {
					throw new Exception();
				}

				//Format data
				Framework.Data.Raw = data;
				Framework.Data.Framework = Framework.Data.Raw["@@graph"].filter(function (m) { return m["@@type"] == "ceasn:CompetencyFramework" })[0];
				Framework.Data.Competencies = Framework.Data.Raw["@@graph"].filter(function (m) { return m["@@type"] == "ceasn:Competency" });
			}
			catch (e) {
				console.log("Error loading framework for CTID " + Framework.CTID + ": ", { "Error": e, "Loaded Data": message });
				Framework.LoadError = true;
				Framework.Data.Error = message;
			}

			Framework.Loading = false;
			if (onload) {
				onload(Framework);
			}
		});
	}
	//

	CompetencyFrameworks.renderFramework = function (Framework, Box, template) {
		//Skip if already rendered
		if (Box.attr("data-rendered") == "true") {
			return;
		}

		//Setup HTML
		if (template) {
			Framework.Box.html($(template).html()); //Allows skipping the template injection by passing null to the template argument
		}
		Framework.NameBox = Framework.Box.find(".frameworkName");
		Framework.DescriptionBox = Framework.Box.find(".frameworkDescription");
		Framework.CompetencyBox = Framework.Box.find(".frameworkCompetencies");
		Framework.SourceLink = Framework.Box.find(".frameworkSource");

		//Handle failure to load the framework
		if (!Framework.Data || !Framework.Data.Raw) {
			Box.html("<p>There was an error loading this Framework:<br />" + Framework.CTID + "</p>");
			return;
		}

		//Format framework data
		Framework.NameBox.html(CompetencyFrameworks.getLanguageMapValue(Framework.Data.Framework["ceasn:name"]));
		Framework.DescriptionBox.html(CompetencyFrameworks.getLanguageMapValue(Framework.Data.Framework["ceasn:description"]));
		Framework.SourceLink.attr("href", Framework.Data.Framework["ceasn:source"]).html(Framework.Data.Framework["ceasn:source"]);

		//Render Competencies
		CompetencyFrameworks.renderCompetenciesForFramework(Framework, Framework.CompetencyBox);

		//Mark rendered
		Framework.Box.attr("data-rendered", "true");
	}
	//

	CompetencyFrameworks.renderCompetenciesForFramework = function(Framework, Container) {
		//Get top-level competencies
		var topCompetencies = Framework.Data.Competencies.filter(function (m) { return m["ceasn:isTopChildOf"] });
		if (topCompetencies.length == 0) { //Failsafe
			topCompetencies = Framework.Data.Competencies;
		}

		topCompetencies.forEach(function (competencyData) {
			CompetencyFrameworks.renderCompetency(Framework, competencyData, Container);
		});
	}
	//

	CompetencyFrameworks.renderCompetency = function (Framework, competencyData, Container) {
		//Parts
		var Competency = {};
		Competency.Box = $(CompetencyFrameworks.CompetencyTemplate).appendTo(Container);
		Competency.Data = competencyData;
		Competency.ChildrenBox = Competency.Box.find(".competencyChildren");
		Competency.URI = Competency.Data["@@id"];
		Competency.CTID = Competency.Data["ceterms:ctid"];

		//Initialization
		Competency.Box.attr("data-uri", Competency.Data["@@id"]);
		Competency.Box.find(".competencyText").html(CompetencyFrameworks.getLanguageMapValue(Competency.Data["ceasn:competencyText"]));
		Competency.Box.find(".competencyListID").html(Competency.Data["ceasn:listID"]);
		Competency.Box.find(".competencyCodedNotation").html(Competency.Data["ceasn:codedNotation"]);
		Competency.Box.find(".competencyCategory").html(CompetencyFrameworks.joinStrings(CompetencyFrameworks.getLanguageMapValue(Competency.Data["ceasn:competencyCategory"]), ", "));
		Competency.Box.find(".competencyComment").html(CompetencyFrameworks.joinStrings(CompetencyFrameworks.getLanguageMapValue(Competency.Data["ceasn:comment"]), "<br />"));
		if (Competency.Data["ceasn:conceptKeyword"]) {
			CompetencyFrameworks.getLanguageMapValue(CompetencyData["ceasn:conceptKeyword"]).forEach(function (value) {
				var keyword = $(CompetencyFrameworks.ConceptTemplate).appendTo(Competency.Box.find("[data-scheme='ceasn:conceptKeyword']"));
				keyword.find(".label").html(value);
			});
		}

		//Recursion
		if (Competency.Data["ceasn:hasChild"]) {
			Competency.Data["ceasn:hasChild"].forEach(function (childID) {
				var match = Framework.Data.Competencies.filter(function (m) { return m["@@id"] == childID })[0];
				if (match) {
					CompetencyFrameworks.renderCompetency(Framework, match, Competency.ChildrenBox);
				}
			});
		}

		Framework.RenderedCompetencies.push(Competency);
	}
	//

	CompetencyFrameworks.joinStrings = function (data, joiner) {
		return data ? Array.isArray(data) ? data.join(joiner) : data : "";
	}
	//

	CompetencyFrameworks.getLanguageMapValue = function (map, language) {
		return map ? map[language] || map["en"] || map["en-us"] || map["en-US"] : "";
	}
	//

	CompetencyFrameworks.getConceptSchemes = function (onloadAll) {
		//Once all frameworks have loaded, look for concept schemes
		if (CompetencyFrameworks.Frameworks.filter(function (m) { return m.Loading }).length > 0) {
			setTimeout(function () {
				CompetencyFrameworks.getConceptSchemes();
			}, 100);
			return;
		}

		var conceptIDs = [];
		CompetencyFrameworks.Frameworks.forEach(function (Framework) {
			Framework.Data.Competencies.forEach(function (Competency) {
				CompetencyFrameworks.ConceptSchemeProperties.forEach(function (property) {
					if (Competency[property] && Competency[property].length > 0) {
						conceptIDs = conceptIDs.concat(Competency[property]);
					}
				});
			});
		});
		
		conceptIDs = Array.from( new Set(conceptIDs) ); //Deduplication
		console.log("Concept IDs", conceptIDs);

		CompetencyFrameworks.loadConcepts(conceptIDs, onloadAll);

	}
	//

	//Load concepts one at a time and use the concept scheme to get more data more efficiently
	CompetencyFrameworks.loadConcepts = function(conceptIDs, onloadAll){
		if (conceptIDs.length > 0) {
			var nextID = conceptIDs.pop();
			CompetencyFrameworks.getRegistryData(null, nextID.replace("/resources/", "/graph/"), function (message) {
				try{
					//Add the scheme's data to the CompetencyFrameworks object
					var scheme = JSON.parse(message);
					console.log("loaded concept scheme", scheme);
					CompetencyFrameworks.ConceptSchemes.push(scheme);

					//Avoid loading concepts that were just loaded
					conceptIDs = conceptIDs.filter(function (m) { return scheme["@@graph"].filter(function (n) { return n["@@id"] == m }).length == 0 });
					console.log("filtered concept IDs", conceptIDs);
					CompetencyFrameworks.loadConcepts(conceptIDs, onloadAll);
				}
				catch (e) {
					console.log("Error loading concept scheme", e);
				}
			});
		}
		else {
			if (onloadAll) {
				onloadAll();
			}
		}
	}
	//

	CompetencyFrameworks.renderConceptSchemes = function () {
		console.log("rendering concept schemes", CompetencyFrameworks.ConceptSchemes);
		var allConcepts = [].concat.apply([], CompetencyFrameworks.ConceptSchemes.map(function (m) { return m["@@graph"] })); //Get the @@graph arrays and concatenate their elements

		CompetencyFrameworks.Frameworks.forEach(function (Framework) {
			Framework.RenderedCompetencies.forEach(function (Competency) {
				CompetencyFrameworks.ConceptSchemeProperties.forEach(function (property) {
					if (Competency.Data[property]) {
						var container = Competency.Box.find("[data-scheme='" + property + "']");
						Competency.Data[property].forEach(function (value) {
							var match = allConcepts.filter(function (m) { return m["@@id"] == value })[0];
							if (match) {
								var box = $(CompetencyFrameworks.ConceptTemplate).appendTo(container);
								box.find(".label").attr("title", CompetencyFrameworks.getLanguageMapValue(match["skos:definition"])).html(CompetencyFrameworks.getLanguageMapValue(match["skos:prefLabel"]));
								//box.find(".description").html(CompetencyFrameworks.getLanguageMapValue(match["skos:definition"]));
							}
						});
					}
				});
			});
		});
	}
	//

</script>
<style type="text/css">

</style>
<script type="text/template" id="template_CompetencyFramework">
	<div class="competencyFramework">
		<div class="frameworkName"></div>
		<div class="frameworkDescription"></div>
		<a href="" target="_blank" class="frameworkSource"></a>
		<div class="frameworkCompetencies"></div>
	</div>
</script>
<script type="text/template" id="template_Competency">
	<div class="competency" data-ctid="" data-id="">
		<div class="competencyContent">
			<div class="competencyTitle">
				<div class="competencyListID competencyTag"></div>
				<div class="competencyCodedNotation competencyTag"></div>
				<div class="competencyCategory competencyTag"></div>
				<div class="competencyText"></div>
			</div>
			<div class="competencyComment"></div>
			<div class="competencyConcepts">
				<div class="conceptList" data-scheme="ceasn:conceptKeyword"></div>
				<div class="conceptList" data-scheme="ceasn:complexityLevel"></div>
				<div class="conceptList" data-scheme="ceasn:conceptTerm"></div>
			</div>
		</div>
		<div class="competencyChildren"></div>
	</div>
</script>
<script type="text/template" id="template_Concept">
	<div class="concept competencyTag" data-concept="">
		<div class="label"></div>
	</div>
</script>