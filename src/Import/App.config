<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
	</configSections>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.2" />
	</startup>
	<appSettings>
		<add key="UnobtrusiveJavaScriptEnabled" value="true" />
		<add key="aspnet:MaxJsonDeserializerMembers" value="5000" />
		<add key="siteVersion" value="2021-03-05" />
		<add key="GeoNamesUserName" value="##AddCustomUserName for GeoNames##" />
		<!-- ?????-->
		<add key="ClientSettingsProvider.ServiceUri" value="" />
		<add key="envType" value="development" />
		<add key="serverName" value="localhost" />
		<add key="credentialFinderSite" value="https://sandbox.credentialengine.org/finder/" />
		<!--<add key="credentialFinderSite" value="https://credentialfinder.org/" />-->
		<!-- Options:
				daily, 
				sinceLastRun, 
				hourly, 
				adhoc, 
				or integer - meaning minutes. Could use to schedule for 7:00 am and minutes since 8pm previous night
					will need to record or derive the last run 
			-->
		<add key="scheduleType" value="adhoc" />
		<!-- Normally false, set to true if say only want to download and save the registry document and not import data-->
		<add key="DoingDownloadOnly" value="false" />
		
		<!-- ================= relates to Import.PendingRequest processing only ======================-->

		<!-- ========================================================================-->
		<!-- probably false here, as will do the updates from an elastic build.-->
		<add key="populatingCredentialJsonProperties" value="false" />
		<add key="populatingOrganizationJsonProperties" value="false" />		
		<!-- ========================================================================-->

		<!-- NOTE: start/end dates will be converted to UTC before calling the registry searches.
	If the dates will be provided in UTC, be sure to set usingUTC_ForTime to false. -->
		<add key="startingDate" value="2020-02-05T00:00:00" />
		<!-- If doing an adhoc import and the endDate is to be less than the current date, then provide an end date.-->
		<add key="endingDate" value="2021-12-28T00:00:00" />
		<add key="usingUTC_ForTime" value="true" />
		<!-- Indicate which document types to import. Only those with a value of true will be imported. Note that there is no a full import for competency frameworks and pathways at this time.-->
		<!--
		<add key="importing_credential"					value="true"/>
		<add key="importing_cost_manifest_schema"		value="true"/>
		<add key="importing_condition_manifest_schema"	value="true"/>
		<add key="importing_assessment_profile"			value="true"/>
		<add key="importing_learning_opportunity_profile" value="true"/>
		<add key="importing_organization"				value="true"/>
		<add key="importing_competency_framework"		value="true"/>
		<add key="importing_concept_scheme"				value="true"/>
		<add key="importing_pathway"					value="true"/>
		<add key="importing_pathway_set"				value="true"/>
		<add key="importing_rating"						value="false"/>
		<add key="importing_rubric"						value="false"/>
		<add key="importing_transfer_value_profile"		value="true"/>

-->
		<add key="importing_credential"					value="true"/>
		<add key="importing_cost_manifest_schema"		value="false"/>
		<add key="importing_condition_manifest_schema"	value="false"/>
		<add key="importing_assessment_profile"			value="false"/>
		<add key="importing_learning_opportunity_profile" value="false"/>
		<add key="importing_organization"				value="false"/>
		<add key="importing_competency_framework"		value="false"/>
		<add key="importing_concept_scheme"				value="false"/>
		<add key="importing_pathway"					value="false"/>
		<add key="importing_pathway_set"				value="false"/>
		<add key="importing_rating"						value="false"/>
		<add key="importing_rubric"						value="false"/>
		<add key="importing_transfer_value_profile"		value="false"/>
		
		
		<!-- special codes for imports to handle special cases. Typically due to a change to data format in the registry  LIKELY LEFT AS false-->
		<add key="skipCredImportIfNoOccupations" value="false" />
		<add key="skipAsmtImportIfNoCompetencies" value="false" />
		<add key="skipAsmtImportIfNoCIP" value="false" />
		<add key="skipLoppImportIfNoCompetencies" value="false" />
		<add key="skipOppImportIfNoShortRegions" value="false" />
		<add key="skipLoppImportIfNoCIP" value="false" />

		<!-- *** Actions: 0-normal; 1-DeleteOnly; 2-SkipDelete -->
		<add key="deleteAction" value="2" />
		<!-- true if should attempt to resolve pending (EntityStateId = 1) after an import
			Only applicable if testing the credential finder -->
		<add key="processingPendingRecords" value="false" />
		<add key="doingPropertyCounts" value="false" />
		
		<!-- *** set to 0 to import all based on import type or set to a number to limit the number of records to import per run. Useful for initial testing.  -->
		<add key="maxImportRecords" value="0" />
		<add key="importPageSize" value="100" />
		<add key="maxExceptions" value="200" />
	  <!-- Used in BaseFactory.DoesRemoteFileExists, 
		20-08-10 mp - decide to not do link checking as should be done by API. If API missed bad links, can't do anything here. OR add warning but be sure to continue and save. -->		
		<add key="skippingLinkChecking" value="true" />
		<add key="treatingRemoteFileNotExistingAsError" value="false" />
		<add key="requireRegionOrIsGlobal" value="false" />
		<add key="includeHasPartIsPartWithConnections" value="true" />
		<!-- Normally true. Set to false during amss updates. Actually would be a problem - really need the previous entityLastUpdated -->
		<add key="usingEntityLastUpdatedDateForIndexLastUpdated" value="true" />
		<add key="hideFrameworksNotPublished" value="true" />
		<!-- If true expand state abbreviations to the full name -->
		<add key="doingExpandOfRegion" value="true" />
		<add key="usingQuantitiveValue" value="true" />
		<!-- doing google Geocoding during an import can slow performance. It is better to do so at the end of a cycle-->
		<add key="doingGeoCodingImmediately" value="false" />

		<!-- Keys that are needed due to common code used by the finder, but not applicable directly to the import-->
		<!-- cache is used to prevent a conflict where a user selects a page to view that is currently being imported. -->
		<add key="credentialCacheMinutes" value="0" />
		<add key="organizationCacheMinutes" value="0" />
		<add key="learningOppCacheMinutes" value="0" />
		<!-- length checks-->
		<add key="maxKeywordLength" value="600" />
		<add key="maxReferenceTextLength" value="900" />
		<add key="maxReferenceUrlLength" value="600" />
		<!-- CR registry - Keys related to the target credential registry environment =========================== -->
		
		<!-- used after competency import to update totals, skipped if false (recommended-only applies to the finder) -->
		<add key="updateCompetencyFrameworkReportTotals" value="false" />

		<!-- ====== registry ============================================= -->
		<!-- The public community is ce-registry for all environments. If using a custom community, then specify as the default - so only it will be the target, or populate additionalCommunity so that both communities will be targetted as sources. -->		
		<!--<add key="defaultCommunity" value="ce-registry"/>-->
		<add key="defaultCommunity" value="ce-registry" />
		<add key="additionalCommunity" value="" />

		<!-- Dec. 15, 2020 - an API key will always be required for the production registry search and must use the assistant direct search-->
		<!-- sandbox  -->
		
		<!-- sandbox  -->
		<add key="MyCredentialEngineAPIKey"		value="**TBD**" />
		<add key="usingAssistantRegistrySearch" value="true" />
		<add key="assistantCredentialRegistrySearch" value="https://sandbox.credentialengine.org/assistant/search/direct?" />
		<add key="credentialRegistrySearch" value="obsolete" />

		<add key="credentialRegistryUrl"		value="https://sandbox.credentialengineregistry.org" />
		<add key="cerGetEnvelope"				value="https://sandbox.credentialengineregistry.org/{0}/envelopes/{1}" />
		<add key="credentialRegistryResource"	value="https://sandbox.credentialengineregistry.org/{0}/resources/{1}" />
		<add key="AssistantCTDLJSONSearchAPIUrl" value="https://sandbox.credentialengine.org/assistant/search/ctdl" />


		<!-- Production  
		<add key="MyCredentialEngineAPIKey"		value="##PROVIDE YOUR PRODUCTION API KEY##" />
		<add key="assistantCredentialRegistrySearch" value="https://credentialengine.org/assistant/search/direct?" />

		<add key="credentialRegistryUrl"		value="https://credentialengineregistry.org" />
		<add key="cerGetEnvelope"				value="https://credentialengineregistry.org/{0}/envelopes/{1}" />
		<add key="credentialRegistryResource"	value="https://credentialengineregistry.org/{0}/resources/{1}" />
		<add key="AssistantCTDLJSONSearchAPIUrl" value="https://apps.credentialengine.org/assistant/search/ctdl" />
 	 -->
		<!-- elasticsearch ========================================= -->
		<add key="elasticSearchUrl" value="http://localhost:9200/" />
		<!-- If including references in search results, or least for a detail page search, set to 2, otherwise 3
		relates to credentials, assessments and lopps 
		19-04-18 changed to have separate keys for asmts, and lopps -->
		<add key="minEntityStateId" value="2" />
		<add key="minAsmtEntityStateId" value="3" />
		<add key="minLoppEntityStateId" value="3" />
		<!-- elastic search collection. This is an alias. The ES interface is to be used to associate the appropriate collection with this alias-->
		<!--   LEAVE BLANK IF NOT USING ELASTIC   -->
		
		<!--  -->
		<add key="credentialCollection" value="" />
		<add key="organizationCollection" value="" />
		<add key="assessmentCollection" value="" />
		<add key="learningOppCollection" value="" />
		<add key="competencyFrameworkCollection" value="" />
		<add key="commonCollection" value="" />
  

		<!--   
   <add key="credentialCollection" value="credentials_sandbox" />
    <add key="organizationCollection" value="organizations_sandbox" />
    <add key="assessmentCollection" value="assessments_sandbox" />
    <add key="learningOppCollection" value="learningopps_sandbox" />
	<add key="commonCollection" value="common_index_sandbox"/>

 -->
	<!--   LEAVE AS False IF NOT USING ELASTIC   -->
		<add key="usingElasticCredentialSearch" value="false" />
		<add key="usingElasticOrganizationSearch" value="false" />
		<add key="usingElasticAssessmentSearch" value="false" />
		<add key="usingElasticLearningOppSearch" value="false" />
		<add key="usingElasticPathwaySearch" value="false" />
		<add key="usingElasticPathwaySetSearch" value="false" />
		<add key="usingElasticTransferValueSearch" value="false" />


		<!--  False - will update caches, and elastic on a per record basis, 
          True - store requests in the SearchPendingReindex table, and handle at end of import.
    -->
		<add key="delayingAllCacheUpdates" value="true" />
		<!-- if false update searchPendingReindex-->
		<add key="updatingElasticIndexImmediately" value="false" />
		<!-- 0-none; 1- Use Index; 2-use Bulk-->
		<add key="updateCredIndexAction" value="2" />
		<add key="includingFrameworksInTextValueIndex" value="false" />

		<!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->
		<!-- notifyOnEmailNotFound: if true, user will be notified where email not found during forgot password process -->
		<add key="notifyOnEmailNotFound" value="true" />
		<!-- EmailService: smtp, "serviceApi", mailgun -->
		<add key="emailService" value="" />
		<add key="MailgunSendingDomainName" value="yourdomain.org" />
		<add key="MailgunSecretAPIKey" value="PROVIDE OWN IF USING MAILGUN" />
		<add key="MailgunPublicAPIKey" value="PROVIDE OWN IF USING MAILGUN" />
		<!-- use web service, and ignore others TEMP UNTIL OUR OWN IS SET UP-->
		<add key="SendEmailService" value="" />
		<add key="SmtpHost" value="localhost" />
		<!-- sendEmailFlag - use TRUE uppercase to set on -->
		<add key="sendEmailFlag" value="FALSE" />
		<add key="usingTempOverrideEmail" value="yes" />
		<!-- contact US email addresses -->
		<add key="contactUsMailTo" value="email@yourDomain.com"/>
		<add key="contactUsMailFrom" value="email@yourDomain.com"/>
		<!-- Email for system and/or application related messages -->
		<add key="systemAdminEmail" value="email@yourDomain.com"/>
		<!--<add key="systemNotifyFromEmail" value="dev@yourDomain.com" />-->
		<add key="systemNotifyFromEmail" value="devEnv@yourDomain.com"/>
		<add key="logAllEmail" value="yes" />
		<!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
		<add key="logErrors" value="yes" />
		<add key="notifyOnException" value="no" />
		<!-- Set to the max level of tracing to display from DoTrace methods -->
		<add key="appTraceLevel" value="6" />
		<!-- Path and filename for file to store error messages-->
		<add key="path.error.log" value="C:\@logs\[date]_FinderImport_ErrorLog.txt" />
		<add key="path.email.log" value="C:\@logs\[date]_FinderImport_EmailLog.txt" />
		<!-- Path and filename for file to store trace messages.-->
		<add key="path.trace.log" value="C:\@logs\[date]_FinderImport_TraceLog.txt" />
		<add key="path.log.file" value="D:\@logs\RegistryDownload\[date]_[filename].json" />

	</appSettings>
	<connectionStrings>
		<!-- DefaultConnection and AccountEntities are used for account mgmt -->
		<!--        -->
		<add name="DefaultConnection" connectionString="Server=(local);database=credFinder_github;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
		<add name="AccountEntities" connectionString="metadata=res://*/Accounts.Accounts.csdl|res://*/Accounts.Accounts.ssdl|res://*/Accounts.Accounts.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder_github;persist security info=True;user id=ceGithub;password=ce$Rocks2020;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

		<add name="MainConnection" connectionString="Server=(local);database=credFinder_github;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
		<add name="workIT_RO" connectionString="Server=(local);database=credFinder_github;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

		<add name="workITEntities" connectionString="metadata=res://*/Tables.workIT.csdl|res://*/Tables.workIT.ssdl|res://*/Tables.workIT.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder_github;persist security info=True;user id=ceGithub;password=ce$Rocks2020;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

		<add name="workITViews" connectionString="metadata=res://*/Views.workITViews.csdl|res://*/Views.workITViews.ssdl|res://*/Views.workITViews.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder_github;persist security info=True;user id=ceGithub;password=ce$Rocks2020;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

	</connectionStrings>
	<system.web.extensions>
		<scripting>
			<webServices>
				<jsonSerialization maxJsonLength="2147483647" />
			</webServices>
		</scripting>
	</system.web.extensions>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
			<parameters>
				<parameter value="mssqllocaldb" />
			</parameters>
		</defaultConnectionFactory>
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<system.web>
		<membership defaultProvider="ClientAuthenticationMembershipProvider">
			<providers>
				<add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
			</providers>
		</membership>
		<roleManager defaultProvider="ClientRoleProvider" enabled="true">
			<providers>
				<add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
			</providers>
		</roleManager>
	</system.web>
</configuration>
