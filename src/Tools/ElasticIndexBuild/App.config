<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
  
  <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
  </startup>
  <appSettings>
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="aspnet:MaxJsonDeserializerMembers" value="5000" />
	<add key="loggingErrorsToDatabase" value="true" />
	<add key="environment" value="development" />
	  <!--			UPDATES TO PROPAGATE	- related to including get of detail data		-->
	  <add key="credentialCacheMinutes"			value="0" />
	  <add key="organizationCacheMinutes"		value="0" />
	  <add key="learningOppCacheMinutes"		value="0" />
	  <add key="enumCacheLifetimeMinutes" value="60"/>
	  <add key="displayingPublishedBy"			value="true" />
	  <add key="hideFrameworksNotPublished"		value="true" />
	  <add key="includeRegistryPayloadWithDetails" value="false" />
	  <add key="DisplayAdditionalInformationForManifests" value="false" />
	  <add key="usingAssistantForRegistryGets" value="false" />
	  <add key="maxResourceNameLength"    value="800"/>
	  <add key="portionOfDescriptionToUseForName"    value="150"/>
	  <!-- If true, only check for and handle pending requests
		NOTE: there is a scheduled job to handle any pending requests from the import. This must be true in the current folder!!!
		ALSO - THE MUST BE A VALUE FOR EACH OF THE ELASTIC COLLECTIONS OR THE PENDING TASK WILL FAIL/
	  -->
	  <add key="processPendingRequests" value="false" />
	  
	  <!-- If true, only check custom filter SQL like "credentialsCustomFilter", and call related index build -->
	  <add key="processCustomFiltersRequests" value="false" />
	  
	  <!-- work around for when the elastic build step seems to stall for lopp. generate LearningOpportunity_IndexBuild and then set the following to true to use the generated table -->
	<add key="using_LearningOpportunity_IndexBuild" value="false" />
	  <!-- ================== testing =====================
	  NOW OBSOLETE. LEAVE AS FALSE, SHOULD BE REMOVED PERMANENTLY AT SOME POINT-->
	  <!--<add key="usingNewLoppElasticProcess" value="false" />-->
	<!-- elasticsearch ========================================= -->
	<!-- using 6.8.6 locally -->
    <add key="elasticSearchUrl_v6" value="http://localhost:9200/" />
	  <add key="elasticVersion" value="7.x" />
    <add key="elasticSearchUrl" value="http://localhost:9207/" />
	<add key="elasticSearchUrl_v5" value="http://localhost:9205/" />
	<add key="elasticSearchUrl_v7" value="http://localhost:9207/" />
    <add key="credentialRebuildPageSize" value="900" />
	  
	  <!-- Set to true if rebuilding the whole index or false where just doing updates. 
			OR so as to not disrupt current site - VERIFY OK
			NO??-there is code in the build methods that will prevent this from working as hoped!-->
	  <add key="deletingIndexBeforeRebuild" value="true" />
	  
    <!-- elastic search collection. This is an alias. The ES interface is to be used to associate the appropriate collection with this alias-
      - set empty to skip the load
    -->
    <!--   choose a set: REMEMBER INDEX NAMES MUST BE ALL **** LOWER CASE ****  -->

	  <!-- NOTE if credentialCollection is empty, will get: 
		"Dispatching IndicesExists() from NEST into to Elasticsearch.NET" 
		(no default index name). 
		So credentialCollection MUST always be present.
		Use: buildingCredentialIndex = false where the credentials should not be rebuilt -->
	  <add key="buildingCredentialIndex" value="true" />

	  <!--
	  <add key="credentialCollection" value="credentials_sandbox" />
	  <add key="organizationCollection" value="" />
	  <add key="assessmentCollection" value="" />
	  <add key="learningOppCollection" value="" />
	  <add key="competencyFrameworkCollection" value=""/>
	  <add key="commonCollection" value="common_index_sandbox"/>
	  <add key="pathwayCollection" value="" />
	  -->

	  <add key="credentialCollection" value="credentials_sandbox" />
	  <add key="organizationCollection" value="" />
	  <add key="assessmentCollection" value="" />
	  <add key="learningOppCollection" value="" />
	  <add key="competencyFrameworkCollection" value=""/>
	  <add key="commonCollection" value=""/>
	  <add key="pathwayCollection" value="" />
      
	  <!-- optionally choose to exclude elements of the common index. More applicable once there are 1000+ combined records -->
	  <add key="includeCollectionInBuild"		value="false" />
      <add key="includeConceptSchemeInBuild"	value="false" />
	  <add key="includeCredentialingActionInBuild"	value="false" />	  
	  <add key="includeJobInBuild"				value="false" />
	  <add key="includeOutcomeDataInBuild"		value="true" />
	  <add key="includeOccupationInBuild"		value="false" />
      <add key="includeProgressionModelInBuild"	value="false" />
	  <add key="includePathwaySetInBuild"		value="false" />
	  <add key="includeRubricInBuild"		value="false" />
	  <add key="includeSupportServiceInBuild"	value="false" />
	  <add key="includeScheduledOfferingInBuild"	value="false" />
	  <add key="includeTaskInBuild"				value="false" />
	  <add key="includeTransferIntermediaryInBuild" value="false" />
	  <add key="includeTransferValueInBuild"	value="false" />
	  <add key="includeWorkRoleInBuild"			value="false" />
	  <!-- 


<add key="credentialCollection" value="credentials_sandbox" />
<add key="organizationCollection" value="organizations_sandbox" />
<add key="assessmentCollection" value="assessments_sandbox" />
<add key="learningOppCollection" value="learningopps_sandbox" />
<add key="competencyFrameworkCollection" value="competency_frameworks_sandbox"/>
<add key="commonCollection" value="common_index_sandbox"/>
<add key="pathwayCollection" value="pathways_sandbox" />

==== 

	<add key="credentialCollection" value="credentials_prod" />
	<add key="organizationCollection" value="organizations_prod" />
	<add key="assessmentCollection" value="assessments_prod" />
	<add key="learningOppCollection" value="learningopps_prod" />
	<add key="competencyFrameworkCollection" value="competency_frameworks_prod"/>
	<add key="commonCollection" value="common_index_prod"/>
			<add key="pathwayCollection" value="pathways_prod" />

-->

    <add key="populatingAllCaches" value="false" />
	  <add key="nonCredentialPageSize" value="300" />
    <!-- 0-none; 1- Use Index; 2-use Bulk-->
    <add key="updateCredIndexAction" value="2" />

	<!-- ========================================================================-->
	  <!-- the theory (with true) would be to start populating a json properties on Credential to move to using the latter to populate elastic rather than many views, and procs NOT CURRENTLY USED-->
	<add key="populatingCredentialJsonProperties" value="false"/>
	<add key="populatingOrganizationJsonProperties" value="false"/>

	<!-- If including references in search results, or least for a detail page search, set to 2, otherwise 3
	relates to credentials, assessments and lopps 
	19-04-18 changed to have separate keys for asmts, and lopps -->
	<add key="minEntityStateId"		value="2" />
	<add key="minAsmtEntityStateId" value="2" />
	<add key="minLoppEntityStateId" value="2" />

	<!-- not sure if we need this-->
	<add key="includeHasPartIsPartWithConnections" value="true" />
	<!-- Normally true. Set to false during mass updates. Actually would be a problem - really need the previous entityLastUpdated -->
	<add key="usingEntityLastUpdatedDateForIndexLastUpdated" value="true" />
	<add key="includingFrameworksInTextValueIndex" value="false" />
	  <!-- if true and a resource (cred, etc.) doesn't have an address, then use the org address
	    Found unexpected results. Perhaps only use where there is one address?
	-->
	  <add key="ifNoResourceAddressThenAddOrgAddresses" value="false" />
      <!-- CUSTOM FILTERS FOR INDEX BUILDS ====================================================== 
	*****	NOTE: processCustomFiltersRequests MUST BE TRUE for these to be processed *****
-->
	  <!-- ********** credential **************-->
	  <add key="credentialsCustomFilter" value=""/>
	  <add key="credentialsCustomFilter2" value=" ( base.EntityStateId = 3 And base.OwningAgentUid = '1E64FBB0-1A10-4FD8-AE8D-6BB29B2AB644'  AND base.JsonProperties IS NULL)  "/>

	  <add key="credSql_PurdueUWestLafyette"	value=" ( base.EntityStateId = 3 And base.OwningAgentUid = '1E64FBB0-1A10-4FD8-AE8D-6BB29B2AB644'  AND base.JsonProperties IS NULL)  "/>
	  <!-- ********** organization **************-->
	  <add key="organizationsCustomFilter" value=""/>
	  
	  <!-- ********** lopp **************-->
	  <add key="loppCustomFilter_0" value=""/>
      <!-- TWC-->
      <add key="loppCustomFilter" value=" (base.Id in  (select baseId from  [dbo].[Entity_Cache] where OwningOrgId = 34 and EntityTypeId = 7 ))"/>
      
	  <add key="loppCustomFilter_course" value=" ( base.EntityStateId = 3 And base.EntityTypeId = 37  AND Convert(varchar(10),LastUpdated,120) = '2022-11-16')  "/>
	  <!-- ********** asmt **************-->
	  <add key="asmtCustomFilter" value=""/>

	  <!-- ********** general **************-->
	  <add key="generalCustomFilter" value=" (base.Id in (SELECT [RecordId]  FROM [dbo].[SearchPendingReindex] where [EntityTypeId] in ( 26) And [StatusId] = 1 AND IsUpdateOrDeleteTypeId= 1 ) )"/>

	  <!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->
    <!-- notifyOnEmailNotFound: if true, user will be notified where email not found during forgot password process -->
    <add key="notifyOnEmailNotFound" value="true" />
    <!-- EmailService: smtp, serviceApi, sendGrid -->
    <add key="emailService" value="mailgun" />
    <!-- use web service, and ignore others TEMP UNTIL OUR OWN IS SET UP-->
    <add key="SendEmailWebService" value="" />
    <add key="SmtpHost" value="localhost" />
	  <!-- sendEmailFlag - use true to set on, false to prevent emails from being sent -->
	  <add key="sendEmailFlag" value="true" />
	  <add key="usingTempOverrideEmail" value="true" />
    <!-- contact US email addresses -->
    <add key="contactUsMailTo" value="mparsons@credentialengine.org" />
    <add key="contactUsMailFrom" value="DoNotReply@credentialEngine.org" />
    <!--<add key="contactUsMailFrom" value="DoNotReply@credentialEngine.org" />-->
    <!-- Email for system and/or application related messages -->
    <add key="systemAdminEmail" value="mparsons@credentialengine.org" />
    <add key="systemNotifyFromEmail" value="ElasticDevEnv@credentialEngine.org" />
    <!--<add key="systemNotifyFromEmail" value="DoNotReply@credentialEngine.org" />-->
    <add key="logAllEmail" value="yes" />
    <!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
    <add key="logErrors" value="yes" />
    <add key="notifyOnException" value="no" />

	<!-- === tracing ================================================= -->
	<!-- Set to the max level of tracing to display from DoTrace methods -->
	<add key="appTraceLevel" value="5"/>
	<add key="appDebuggingTraceLevel" value="6"/>
	<add key="appSectionDurationTraceLevel" value="7"/>
	<add key="appMethodEntryTraceLevel" value="7"/>
	<add key="appMethodExitTraceLevel" value="8"/>
	<!-- special use tracing-->
	<add key="appSpecialTraceLevel" value="9"/>
	<!-- ============================================================== -->

	  <add key="path.error.log" value="C:\@logs\[date]_ElasticBuild_ErrorLog.txt" />
    <add key="path.email.log" value="C:\@logs\[date]_ElasticBuild_EmailLog.txt" />
    <add key="path.trace.log" value="C:\@logs\[date]_ElasticBuild_TraceLog.txt" />
    <add key="path.log.file" value="C:\@logs\RegistryDownload\[date]_[filename].json" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  <connectionStrings>
    <!-- test     
    <add name="DefaultConnection" connectionString="Server=(local);database=ctdlEditor;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
    <add name="AccountEntities" connectionString="metadata=res://*/Accounts.Accounts.csdl|res://*/Accounts.Accounts.ssdl|res://*/Accounts.Accounts.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=ctdlEditor;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="MainConnection" connectionString="Server=(local);database=credFinder;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
    <add name="workIT_RO" connectionString="Server=(local);database=credFinder;User Id=ctiReader;password=ctiDev2@16!;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
    <add name="workITEntities" connectionString="metadata=res://*/Tables.workIT.csdl|res://*/Tables.workIT.ssdl|res://*/Tables.workIT.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="workITViews" connectionString="metadata=res://*/Views.workITViews.csdl|res://*/Views.workITViews.ssdl|res://*/Views.workITViews.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
	-->  
	  
	  <!-- sandbox    	-->  
	  <add name="DefaultConnection" connectionString="Server=(local);database=sandbox_ctdlEditor;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
	  
	  <add name="AccountEntities" connectionString="metadata=res://*/Accounts.Accounts.csdl|res://*/Accounts.Accounts.ssdl|res://*/Accounts.Accounts.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=sandbox_ctdlEditor;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
	  
	  <add name="MainConnection" connectionString="Server=(local);database=sandbox_credFinder;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
	  
	  <add name="workIT_RO" connectionString="Server=(local);database=sandbox_credFinder;User Id=ctiReader;password=ctiDev2@16!;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
	  
	  <add name="workITEntities" connectionString="metadata=res://*/Tables.workIT.csdl|res://*/Tables.workIT.ssdl|res://*/Tables.workIT.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=sandbox_credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
	  
	  <add name="workITViews" connectionString="metadata=res://*/Views.workITViews.csdl|res://*/Views.workITViews.ssdl|res://*/Views.workITViews.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=sandbox_credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
 
    <!-- prod 
	  <add name="DefaultConnection" connectionString="Server=(local);database=ctdlEditor;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

	  <add name="AccountEntities" connectionString="metadata=res://*/Accounts.Accounts.csdl|res://*/Accounts.Accounts.ssdl|res://*/Accounts.Accounts.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=ctdlEditor;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

	  <add name="MainConnection" connectionString="Server=(local);database=credFinder;User Id=ctiAdmin;password=w@rkH#rdPl$yH%rd;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

	  <add name="workIT_RO" connectionString="Server=(local);database=credFinder;User Id=ctiReader;password=ctiDev2@16!;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />

	  <add name="workITEntities" connectionString="metadata=res://*/Tables.workIT.csdl|res://*/Tables.workIT.ssdl|res://*/Tables.workIT.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

	  <add name="workITViews" connectionString="metadata=res://*/Views.workITViews.csdl|res://*/Views.workITViews.ssdl|res://*/Views.workITViews.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder;persist security info=True;user id=ctiAdmin;password=w@rkH#rdPl$yH%rd;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
 -->

  </connectionStrings>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
		<dependentAssembly>
			<assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
			<bindingRedirect oldVersion="0.0.0.0-13.0.0.0" newVersion="13.0.0.0" />
		</dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>