<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.2" />
  </startup>
  <appSettings>
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="aspnet:MaxJsonDeserializerMembers" value="5000" />
	<add key="application" value="FinderImport" />
    <add key="siteVersion" value="2022-08-30" />
    <add key="serverName" value="localhost" />
	
<!-- ================= Application Keys - external services ===========================-->	
	   
	<!-- Your Credential Engine ApiKey for the current environment -->		
    <add key="MyCredentialEngineAPIKey" value="" />
	
	<!-- GeoNamesUserName - if you want to do look ups to get the lat/lng for an address where missing, provide your Google GeoNames API key -->
	 <add key="GeoNamesUserName" value="" />
    <add key="usingAssistantRegistrySearch" value="true" />
	
	<!-- to have emails sent using a Maingun account, provide the following. -->	
    <add key="MailgunSendingDomainName" value="" />
    <add key="MailgunSecretAPIKey" value="" />
    <add key="MailgunPublicAPIKey" value="" />
	
    <!-- ================= Basic Configuration ==================================================-->
    <!-- validatingSetup-defaults to true. 
				Used to ensure apikey is present and valid
				Also to ensure database is preseny and default database user has access
				Set to false once all steps have been validated.
		-->
    <add key="validatingSetup" value="true" />
    <!--  Recommended to be false to defer the Geo coding of addresses to be once per cycle. 
				If true, could add 20+ seconds to an import cycle (1-3 seconds per check) -->
    <add key="doingGeoCodingImmediately" value="false" />
    <!-- normally false. Set to true if not doing geocoding. If false, then must have a value for GeoNamesUserName -->
    <add key="skippingGeoCodingCompletely" value="true" />
    <!-- optionally can log errors to the database. Table=MessageLog -->
    <add key="loggingErrorsToDatabase" value="true" />
	
    <!-- optionally can write data to the default credential finder database 
			- this will be difficult to handle false initially due to the existance checking
			-->
    <add key="writingToFinderDatabase" value="true" />
	<!-- Set this to true to save downloaded JSON documents to a database. Currently only Sql server is supported. 
	If setting this to true, you can decide to set savingDocumentToFileSystem to false - your choice 
	Requires restoring the CredentialDownload database
	TBD - is this only for the download project?? -->
	<add key="writingToDownloadResourceDatabase" value="false" />	
    <!-- Set this to true to save downloaded documents to the file system. The location is based upon the appKey: path.log.file-->
    <add key="savingDocumentToFileSystem" value="false" />	
    <!-- Normally false, set to true if say only want to download and save the registry document and not import data-->
    <add key="DoingDownloadOnly" value="false" />
	
    <!-- options fullTextSearch or graphSearch -->
    <add key="searchToolType" value="fullTextSearch" />
	  
    <!-- If using the graphSearch queryFileName must contain the path and filename containing the query.  -->
    <add key="queryFileName" value="" />
   
	  
    <!-- ========================================================		-->
    <!-- ================= Environment Specific Configuration	==================================================-->
    <!-- =================				SANDBOX					==================================================-->
    <add key="environment" value="sandbox" />
    <add key="oldCredentialFinderSite" value="https://sandbox.credentialengine.org/services/" />
    <add key="credentialFinderMainSite" value="https://sandbox.credentialengine.org/finder/" />
    <!-- Prod
		<add key="environment" value="production" />
		<add key="oldCredentialFinderSite" value="https://apps.credentialengine.org/services/" />
		<add key="credentialFinderMainSite" value="https://credentialfinder.org/" />
		-->
    <!-- ============================ RUN OPTIONS ============================		-->
    <!-- scheduleType:
				daily, 
				sinceLastRun, 
				hourly, 
				adhoc, 
				graph
				or integer - meaning minutes. Could use to schedule for 7:00 am and minutes since 8pm previous night
					will need to record or derive the last run 
			-->
    <add key="scheduleType" value="adhoc" />
    <!-- NOTE: start/end dates will be converted to UTC before calling the registry searches.
	If the dates will be provided in UTC, be sure to set usingUTC_ForTime to false. -->
    <add key="startingDate" value="2018-01-01T00:00:00" />
    <!-- If doing an adhoc import and the endDate is to be less than the current date, then provide an end date.-->
    <add key="endingDate" value="2023-12-31T00:00:00" />
    <add key="usingUTC_ForTime" value="true" />
    <!-- ____________________________  COMMON FILTERS ____________________________					-->
    <!-- if you always only want to download documents for your organization, provide the list of comma separated CTIDs here. 
			Then you don't have to add it to the search calls. 
			-->
    <add key="owningOrganizationCTID" value="" />
    <!-- if you want to download documents published by a third party publisher, provide thel ist of comma separated CTIDs  here. 
			NOTE: where the publisher and the owner are the same, there is no need to provide both the owning and publishing org filters, just pick one.  -->
    <add key="publishingOrganizationCTID" value="" />
<!-- Adhoc list of comma separated CTIDs to download -->
	<add key="resourcesCTIDList" value="" />	
	
 <!-- *** Actions: 0-normal; 1-DeleteOnly; 2-SkipDelete 
	The default is to skip deletes, as these should be rare. 
	If an action of 0, or 1 is selected, a separate step will check for any records marked as deleted for the timeframe. Any records found will be marked as virtually deleted in the finder database by setting EntityStateId to 0 -->
    <add key="deleteAction" value="2" />
    <!-- true if should attempt to resolve pending (EntityStateId = 1) after an import-->
    <add key="processingPendingRecords" value="false" />	  
   
    <!-- ==========================================================================-->		
		<!-- Indicate which document types to import. Only those with a value of true will be imported. Note that there is no a full import for competency frameworks (competencies are in progress) at this time. -->
		
		
		<!--**** NEW - choice of using a comma separated list of resources to import, or the old way of setting a list of importing_... appKeys to true or false ***
			if usingListOfResourceTypes is true, then resourceTypeList must be populated with a comma separately list of resource types. These can be copied from the appKey resourceTypeListAll, which contains all valid resource types (as defined in the credential registry 
		-->
		<add key="usingListOfResourceTypes" value="true" />
		<!-- resourceTypeListAll: list of all possible resource types to download. 
			- COPY the ones that you wish to use to resourceTypeList. 
			- The latter will be used by the application to determine which resource types to download. -->
		<add key="resourceTypeListAll" value="credential, assessment_profile,  learning_opportunity_profile, learning_program, course, organization, collection, concept_scheme,  competency_framework, cost_manifest_schema, condition_manifest_schema, pathway, pathway_set, transfer_intermediary, transfer_value_profile, qdata_dataset_profile, asn_progression_model" />

		<!-- Indicate which document types to import. Only those with a value of true will be imported. Example of just organizations and credentials  
		NOTE: organization should always be done first -->
		<add key="resourceTypeList" value="organization, credential " />

		<!--				 OR 					 -->			
		<!--if usingListOfResourceTypes is false, then from the importing list below, set the value to true for the resources to import--> 
   
		<add key="importing_credential"					value="true"/>
		<add key="importing_organization"				value="true"/>
		<add key="importing_assessment_profile"			value="true"/>
		
		<add key="importing_learning_opportunity_profile" value="true"/>
		<add key="importing_learning_program"			value="true"/>
		<add key="importing_course"						value="true"/>
		
		<add key="importing_cost_manifest_schema"		value="true"/>
		<add key="importing_condition_manifest_schema"	value="true"/>
		
		<add key="importing_collection"					value="true"/>
		<add key="importing_competency_framework"		value="true"/>
		<add key="importing_concept_scheme"				value="true"/>
		
		<add key="importing_pathway"					value="true"/>
		<add key="importing_pathway_set"				value="true"/>
		<add key="importing_qdata_dataset_profile"		value="false"/>
		
		<add key="importing_occupation_profile"			value="true"/>
		<add key="importing_job_profile"				value="true"/>
		<add key="importing_rating"						value="false"/>
		<add key="importing_rubric"						value="false"/>
		<add key="importing_transfer_value_profile"		value="true"/>


   
    <!-- ================= relates to Import.PendingRequest processing only (CE INTERNAL PROCESS ONLY) ======================-->
    <!-- if true, will use the [Import.PendingRequest] table, and not scheduled-->
    <add key="usingImportPendingProcess" value="false" />
    <add key="onlySelectIfWasChanged" value="true" />
    <!-- set to a bit less than scheduled task, so ends before next one starts -->
    <add key="stopAfterMinutes" value="13" />
    <!-- number of seconds to pause if no data found in last loop -->
    <add key="primeTimeSleepSeconds" value="15" />
    <!-- number of minutes between checks for deleted records. NOT USED with usingNewDeleteProcess -->
    <add key="deleteInterval" value="15" />
    <!-- ========================================================================-->
	
    <!-- probably false here, as will do the updates from an elastic build.-->
    <add key="populatingCredentialJsonProperties" value="false" />
    <add key="populatingOrganizationJsonProperties" value="false" />	
 <!-- ========================================================================-->	
    <!-- special codes for imports to handle special cases. Typically due to a change to data format in the registry-->
    <add key="skipCredImportIfNoOccupations" value="false" />
    <add key="skipAsmtImportIfNoCompetencies" value="false" />
    <add key="skipAsmtImportIfNoCIP" value="false" />
    <add key="skipLoppImportIfNoCompetencies" value="false" />
    <add key="skipLoppImportIfNoCIP" value="false" />
    <add key="skipOrgImportIfNoShortRegions" value="false" />
    <!-- set to true to reimport orgs with addresses - temp fix-->
    <add key="skipOrgImportIfNoAddress" value="false" />
   
    <!-- set to true to update codeTable property counts during import
		2021 - now done with schedule stored proc, so will usually be false -->
    <add key="doingPropertyCounts" value="false" />
    <!-- *** Used by adhoc importset to 0 to import all based on import type or set to a number to limit the number of records to import per run. Useful for initial testing.  -->
    <add key="maxImportRecords" value="0" />
    <!-- used by PendingImportProcess-->
    <add key="maxPendingImportRecords" value="100" />
    <add key="importPageSize" value="100" />
    <add key="maxExceptions" value="200" />
    <add key="displayingPublishedBy" value="true" />
    <!-- Used in BaseFactory.DoesRemoteFileExists, 
		20-08-10 mp - decide to not do link checking as should be done by API. If API missed bad links, can't do anything here. OR add warning but be sure to continue and save. -->
    <add key="skippingLinkChecking" value="true" />
    <add key="treatingRemoteFileNotExistingAsError" value="false" />
    <add key="requireRegionOrIsGlobal" value="false" />
    <add key="includeHasPartIsPartWithConnections" value="true" />
    <!-- Normally true. Set to false during amss updates. Actually would be a problem - really need the previous entityLastUpdated -->
    <add key="usingEntityLastUpdatedDateForIndexLastUpdated" value="true" />
    <add key="hideFrameworksNotPublished" value="true" />
    <!-- If true expand state abbreviations to the full name -->
    <add key="doingExpandOfRegion" value="true" />
    <add key="usingQuantitiveValue" value="true" />
    <!-- Keys that are needed due to common code used by the finder, but not applicable directly to the import-->
    <!-- cache is used to prevent a conflict where a user selects a page to view that is currently being imported. -->
    <add key="credentialCacheMinutes" value="0" />
    <add key="organizationCacheMinutes" value="0" />
    <add key="learningOppCacheMinutes" value="0" />
    <!-- length checks-->
    <add key="maxKeywordLength" value="600" />
    <add key="maxReferenceTextLength" value="900" />
    <add key="maxReferenceUrlLength" value="600" />
    <!-- CR registry - Keys related to the target credential registry environment =========================== -->
    <!-- used after competency import to update totals, skipped if false (recommended) -->
    <add key="updateCompetencyFrameworkReportTotals" value="false" />
    <!-- ====== registry ============================================= -->
    <!-- The public community is ce-registry for all environments. If using a custom community, then specify as the default - so only it will be the target, or populate additionalCommunity so that both communities will be targetted as sources. -->
    <add key="defaultCommunity" value="ce-registry" />
    <add key="additionalCommunity" value="" />
    <add key="usingSparQLForSearch" value="true" />
	  
    <!-- Dec. 15, 2020 - an API key will always be required for the production registry search and must use the assistant direct search-->
    <!-- sandbox -->

    <add key="usingAssistantRegistrySearch" value="true" />
    <add key="assistantCredentialRegistrySearch" value="https://sandbox.credentialengine.org/assistant/search/direct?" />
    <add key="credentialRegistrySearch" value="https://sandbox.credentialengineregistry.org/{0}/search?" />
    <add key="credentialRegistryUrl" value="https://sandbox.credentialengineregistry.org/" />
    <add key="cerGetEnvelope" value="https://sandbox.credentialengineregistry.org/{0}/envelopes/{1}" />
    <add key="credentialRegistryResource" value="https://sandbox.credentialengineregistry.org/{0}/resources/{1}" />
    <add key="AssistantCTDLJSONSearchAPIUrl" value="https://sandbox.credentialengine.org/assistant/search/ctdl" />
    <add key="ceAccountValidateOrganizationApiKey" value="https://sandbox.credentialengine.org/accountsAPI/Organization/FinderValidateApiKey?apikey={0}" />
    
    <!-- Production    
		<add key="MyCredentialEngineAPIKey"		value="**TBD**" />
		<add key="usingAssistantRegistrySearch" value="true" />
		<add key="assistantCredentialRegistrySearch" value="https://apps.credentialengine.org/assistant/search/direct?with_bnodes=false&amp;" />
		<add key="credentialRegistryUrl" value="https://credentialengineregistry.org/" />
		<add key="cerGetEnvelope" value="https://credentialengineregistry.org/{0}/envelopes/{1}" />
		<add key="credentialRegistrySearch" value="https://credentialengineregistry.org/{0}/search?with_bnodes=false&amp;" />
		<add key="credentialRegistryResource" value="https://credentialengineregistry.org/{0}/resources/{1}" />
		<add key="AssistantCTDLJSONSearchAPIUrl" value="https://apps.credentialengine.org/assistant/search/ctdl" />
		<add key="ceAccountValidateOrganizationApiKey" value="https://apps.credentialengine.org/accountsAPI/Organization/FinderValidateApiKey?apikey={0}" />
 -->
    <!-- elasticsearch ========================================= -->
    <!-- 0-none; 1- Use Index; 2-use Bulk
		Set to 0 if not using elastic -->
    <add key="updateCredIndexAction" value="0" />	
    <add key="elasticVersion" value="7.x" />
    <!--If using elastic, provide the proper URL -->
    <add key="elasticSearchUrl" value="http://localhost:9207/" />
    <!-- If including references in search results, or least for a detail page search, set to 2, otherwise 3
		relates to credentials, assessments and lopps 
		19-04-18 changed to have separate keys for asmts, and lopps -->
    <add key="minEntityStateId" value="2" />
    <add key="minAsmtEntityStateId" value="3" />
    <add key="minLoppEntityStateId" value="3" />
    <!-- elastic search collection. This is an alias. The ES interface is to be used to associate the appropriate collection with this alias-->
    <!--   choose a set: REMEMBER INDEX NAMES MUST BE ALL LOWER CASE   -->
   
    <add key="credentialCollection" value="credentials_sandbox" />
    <add key="organizationCollection" value="organizations_sandbox" />
    <add key="assessmentCollection" value="assessments_sandbox" />
    <add key="learningOppCollection" value="learningopps_sandbox" />
    <add key="competencyFrameworkCollection" value="competency_frameworks_sandbox" />
    <add key="commonCollection" value="common_index_sandbox" />
    <add key="pathwayCollection" value="pathways_sandbox" />
   
    <!-- set the following to true if using elastic. False indicates that seaches will use sql server -->
    <add key="usingElasticCredentialSearch" value="false" />
    <add key="usingElasticCredentialAutocomplete" value="false" />
    <add key="usingElasticOrganizationSearch" value="false" />
    <add key="usingElasticAssessmentSearch" value="false" />
    <add key="usingElasticLearningOppSearch" value="false" />
    <add key="usingElasticCompetencyFrameworkSearch" value="false" />
    <add key="usingElasticTransferValueSearch" value="false" />
    <add key="usingElasticPathwaySearch" value="false" />
    <!-- not using elastic-->
    <add key="usingElasticCollectionSearch" value="false" />
    <add key="usingElasticPathwaySetSearch" value="false" />
    <add key="usingElasticTransferIntermediarySearch" value="false" />
	  
    <!-- using registry for search -->
    <add key="collectionUsingRegistrySearch" value="true" />
    <add key="competencyFrameworkUsingRegistrySearch" value="true" />
  
    <!--  False - will update caches, and elastic on a per record basis, 
          True - store requests in the SearchPendingReindex table, and handle at end of import.
    -->
    <add key="delayingAllCacheUpdates" value="true" />
    <!-- if false update searchPendingReindex-->
    <add key="updatingElasticIndexImmediately" value="false" />

    <add key="includingFrameworksInTextValueIndex" value="false" />
    <add key="nonCredentialPageSize" value="300" />
	
	<!-- A possible helper. If true, and a resource doesn't have a address, then add the org addresses to the related elastic index -->
	<add key="ifNoResourceAddressThenAddOrgAddresses" value="false" />	
    <!-- ACCOUNT/CONTACT US NOTIFICATION ====================================================== -->
    <!-- notifyOnEmailNotFound: if true, user will be notified where email not found during forgot password process -->
    <add key="notifyOnEmailNotFound" value="true" />
    <!-- EmailService: smtp, "serviceApi", mailgun -->
    <add key="emailService" value="" />
    <!-- use web service, and ignore others TEMP UNTIL OUR OWN IS SET UP-->
    <add key="SendEmailService" value="" />
    <add key="SmtpHost" value="localhost" />
    <!-- sendEmailFlag - use TRUE uppercase to set on -->
    <add key="sendEmailFlag" value="FALSE" />
    <add key="usingTempOverrideEmail" value="yes" />
    <!-- contact US email addresses -->
    <add key="accountNotifications" value="email@yourDomain.com" />
    <add key="contactUsMailTo" value="email@yourDomain.com" />
    <add key="contactUsMailFrom" value="DoNotReply@yourDomain.com" />
    <!-- Email for system and/or application related messages -->
    <add key="systemAdminEmail" value="email@yourDomain.com" />
    <add key="systemNotifyFromEmail" value="devEnvImport@yourDomain.com" />
    <add key="logAllEmail" value="yes" />
    <!-- LOG SETTINGS ========================================================================
      Notes:
        - Be sure to give write access to the everyone role for the following log file
    -->
    <add key="logErrors" value="yes" />
    <add key="notifyOnException" value="no" />
    <!-- Set to the max level of tracing to display from DoTrace methods -->
    <add key="appTraceLevel" value="5" />
    <!-- Path and filename for file to store error messages-->
    <add key="path.error.log" value="C:\@logs\[date]_FinderImport_ErrorLog.txt" />
    <add key="path.email.log" value="C:\@logs\[date]_FinderImport_EmailLog.txt" />
    <!-- Path and filename for file to store trace messages.-->
    <add key="path.trace.log" value="C:\@logs\[date]_FinderImport_TraceLog.txt" />
    <!-- Set logFileTraceLevel to be above appTraceLevel if you do NOT want to save the downloaded registry documents to the file system -->
    <add key="logFileTraceLevel" value="7" />
    <add key="path.log.file" value="c:\@logs\RegistryDownload\[date]_[filename].json" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  <connectionStrings>
	<!-- ceExternalData is always required -->
	<add name="ceExternalData" connectionString="Server=(local);database=CE_ExternalData;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
   
    <!--    credFinder_github  	-->
	  <add name="MainConnection" connectionString="Server=(local);database=credFinder_github;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
	  
	  <add name="workIT_RO" connectionString="Server=(local);database=credFinder_github;User Id=ceGithub;password=ce$Rocks2020;Pooling=true;Min Pool Size=10;Max Pool Size=50;Connect Timeout=200" providerName="System.Data.SqlClient" />
	  
	  <add name="workITEntities" connectionString="metadata=res://*/Tables.workIT.csdl|res://*/Tables.workIT.ssdl|res://*/Tables.workIT.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder_github;persist security info=True;user id=ceGithub;password=ce$Rocks2020;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
	  
	  <add name="workITViews" connectionString="metadata=res://*/Views.workITViews.csdl|res://*/Views.workITViews.ssdl|res://*/Views.workITViews.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=(local);initial catalog=credFinder_github;persist security info=True;user id=ceGithub;password=ce$Rocks2020;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />

  </connectionStrings>
  <system.web.extensions>
    <scripting>
      <webServices>
        <jsonSerialization maxJsonLength="2147483647" />
      </webServices>
    </scripting>
  </system.web.extensions>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>